(this["webpackJsonpwd21-classes-react"]=this["webpackJsonpwd21-classes-react"]||[]).push([[0],{225:function(e,n,t){"use strict";t.r(n);var o=t(4),s=t.n(o),i=t(1),a=t(80),r=t.n(a),l=(t(86),t(5)),c=t.p+"static/media/home.1037ec9d.svg",d=t(0);function h(){return Object(d.jsx)("nav",{id:"sidebar",children:Object(d.jsxs)("ul",{className:"list-unstyled components",children:[Object(d.jsx)("li",{children:Object(d.jsx)(i.b,{to:"/",children:Object(d.jsx)("img",{src:c,alt:"home",className:"home",height:"2.7em"})})}),Object(d.jsxs)("li",{children:[Object(d.jsx)("a",{href:"#bdlSubmenu","data-toggle":"collapse","aria-expanded":"false",className:"dropdown-toggle",children:"Basic Digital Literacy"}),Object(d.jsxs)("ul",{className:"collapse list-unstyled",id:"bdlSubmenu",children:[Object(d.jsx)("li",{children:Object(d.jsx)(i.b,{to:"BDL01",children:"BDL 1"})}),Object(d.jsx)("li",{children:Object(d.jsx)(i.b,{to:"BDL02",children:"BDL 2"})}),Object(d.jsx)("li",{children:Object(d.jsx)(i.b,{to:"BDL03",children:"BDL 3"})}),Object(d.jsx)("li",{children:Object(d.jsx)(i.b,{to:"BDL04",children:"BDL 4"})}),Object(d.jsx)("li",{children:Object(d.jsx)(i.b,{to:"BDL05",children:"BDL 5"})}),Object(d.jsx)("li",{children:Object(d.jsx)(i.b,{to:"BDL06",children:"BDL 6"})}),Object(d.jsx)("li",{children:Object(d.jsx)(i.b,{to:"BDL07",children:"BDL 7"})}),Object(d.jsx)("li",{children:Object(d.jsx)(i.b,{to:"BDL08",children:"BDL 8"})}),Object(d.jsx)("li",{children:Object(d.jsx)(i.b,{to:"BDL09",children:"BDL 9"})})]})]}),Object(d.jsxs)("li",{children:[Object(d.jsx)("a",{href:"#uibSubmenu","data-toggle":"collapse","aria-expanded":"false",className:"dropdown-toggle",children:"User Interface Basics"}),Object(d.jsxs)("ul",{className:"collapse list-unstyled",id:"uibSubmenu",children:[Object(d.jsx)("li",{children:Object(d.jsx)(i.b,{to:"UIB10",children:"UIB 1"})}),Object(d.jsx)("li",{children:Object(d.jsx)(i.b,{to:"UIB11",children:"UIB 2"})}),Object(d.jsx)("li",{children:Object(d.jsx)(i.b,{to:"UIB12",children:"UIB 3"})}),Object(d.jsx)("li",{children:Object(d.jsx)(i.b,{to:"UIB13",children:"UIB 4"})}),Object(d.jsx)("li",{children:Object(d.jsx)(i.b,{to:"UIB14",children:"UIB 5"})}),Object(d.jsx)("li",{children:Object(d.jsx)(i.b,{to:"UIB15",children:"UIB 6"})}),Object(d.jsx)("li",{children:Object(d.jsx)(i.b,{to:"UIB16",children:"UIB 7"})}),Object(d.jsx)("li",{children:Object(d.jsx)(i.b,{to:"UIB17",children:"UIB 8"})}),Object(d.jsx)("li",{children:Object(d.jsx)(i.b,{to:"UIB18",children:"UIB 9"})}),Object(d.jsx)("li",{children:Object(d.jsx)(i.b,{to:"UIB19",children:"UIB 10"})}),Object(d.jsx)("li",{children:Object(d.jsx)(i.b,{to:"UIB20",children:"UIB 11"})}),Object(d.jsx)("li",{children:Object(d.jsx)(i.b,{to:"UIB21",children:"UIB 12"})}),Object(d.jsx)("li",{children:Object(d.jsx)(i.b,{to:"UIB22",children:"UIB 13"})}),Object(d.jsx)("li",{children:Object(d.jsx)(i.b,{to:"UIB23",children:"UIB 14"})}),Object(d.jsx)("li",{children:Object(d.jsx)(i.b,{to:"UIB24",children:"UIB 15"})}),Object(d.jsx)("li",{children:Object(d.jsx)(i.b,{to:"UIB25",children:"UIB 16"})}),Object(d.jsx)("li",{children:Object(d.jsx)(i.b,{to:"UIB26",children:"UIB 17"})}),Object(d.jsx)("li",{children:Object(d.jsx)(i.b,{to:"UIB27",children:"UIB 18"})}),Object(d.jsx)("li",{children:Object(d.jsx)(i.b,{to:"UIB28",children:"UIB 19"})}),Object(d.jsx)("li",{children:Object(d.jsx)(i.b,{to:"UIB29",children:"UIB 20"})}),Object(d.jsx)("li",{children:Object(d.jsx)(i.b,{to:"UIB30",children:"UIB 21"})}),Object(d.jsx)("li",{children:Object(d.jsx)(i.b,{to:"UIB31",children:"UIB 22"})}),Object(d.jsx)("li",{children:Object(d.jsx)(i.b,{to:"UIB32",children:"UIB 23"})}),Object(d.jsx)("li",{children:Object(d.jsx)(i.b,{to:"UIB33",children:"UIB 24"})}),Object(d.jsx)("li",{children:Object(d.jsx)(i.b,{to:"UIB34",children:"UIB 25"})}),Object(d.jsx)("li",{children:Object(d.jsx)(i.b,{to:"UIB35",children:"UIB 26"})})]})]}),Object(d.jsxs)("li",{children:[Object(d.jsx)("a",{href:"#pbSubmenu","data-toggle":"collapse","aria-expanded":"false",className:"dropdown-toggle",children:"Programing Basics"}),Object(d.jsxs)("ul",{className:"collapse list-unstyled",id:"pbSubmenu",children:[Object(d.jsx)("li",{children:Object(d.jsx)(i.b,{to:"PB36",children:"PB 1"})}),Object(d.jsx)("li",{children:Object(d.jsx)(i.b,{to:"PB37",children:"PB 2"})}),Object(d.jsx)("li",{children:Object(d.jsx)(i.b,{to:"PB38",children:"PB 3"})}),Object(d.jsx)("li",{children:Object(d.jsx)(i.b,{to:"PB39",children:"PB 4"})}),Object(d.jsx)("li",{children:Object(d.jsx)(i.b,{to:"PB40",children:"PB 5"})}),Object(d.jsx)("li",{children:Object(d.jsx)(i.b,{to:"PB41",children:"PB 6"})}),Object(d.jsx)("li",{children:Object(d.jsx)(i.b,{to:"PB42",children:"PB 7"})}),Object(d.jsx)("li",{children:Object(d.jsx)(i.b,{to:"PB43",children:"PB 8"})}),Object(d.jsx)("li",{children:Object(d.jsx)(i.b,{to:"PB44",children:"PB 9"})}),Object(d.jsx)("li",{children:Object(d.jsx)(i.b,{to:"PB45",children:"PB 10"})}),Object(d.jsx)("li",{children:Object(d.jsx)(i.b,{to:"PB46",children:"PB 11"})}),Object(d.jsx)("li",{children:Object(d.jsx)(i.b,{to:"PB47",children:"PB 12"})}),Object(d.jsx)("li",{children:Object(d.jsx)(i.b,{to:"PB48",children:"PB 13"})}),Object(d.jsx)("li",{children:Object(d.jsx)(i.b,{to:"PB49",children:"PB 14"})}),Object(d.jsx)("li",{children:Object(d.jsx)(i.b,{to:"PB50",children:"PB 15"})}),Object(d.jsx)("li",{children:Object(d.jsx)(i.b,{to:"PB51",children:"PB 16"})}),Object(d.jsx)("li",{children:Object(d.jsx)(i.b,{to:"PB52",children:"PB 17"})}),Object(d.jsx)("li",{children:Object(d.jsx)(i.b,{to:"PB53",children:"PB 18"})}),Object(d.jsx)("li",{children:Object(d.jsx)(i.b,{to:"PB54",children:"PB 19"})}),Object(d.jsx)("li",{children:Object(d.jsx)(i.b,{to:"PB55",children:"PB 20"})}),Object(d.jsx)("li",{children:Object(d.jsx)(i.b,{to:"PB56",children:"PB 21"})}),Object(d.jsx)("li",{children:Object(d.jsx)(i.b,{to:"PB57",children:"PB 22"})}),Object(d.jsx)("li",{children:Object(d.jsx)(i.b,{to:"PB58",children:"PB 23"})})]})]}),Object(d.jsxs)("li",{children:[Object(d.jsx)("a",{href:"#spaSubmenu","data-toggle":"collapse","aria-expanded":"false",className:"dropdown-toggle",children:"Single Page Applications"}),Object(d.jsxs)("ul",{className:"collapse list-unstyled",id:"spaSubmenu",children:[Object(d.jsx)("li",{children:Object(d.jsx)(i.b,{to:"SPA59",children:"SPA 1"})}),Object(d.jsx)("li",{children:Object(d.jsx)(i.b,{to:"SPA60",children:"SPA 2"})}),Object(d.jsx)("li",{children:Object(d.jsx)(i.b,{to:"SPA61",children:"SPA 3"})}),Object(d.jsx)("li",{children:Object(d.jsx)(i.b,{to:"SPA62",children:"SPA 4"})}),Object(d.jsx)("li",{children:Object(d.jsx)(i.b,{to:"SPA63",children:"SPA 5"})}),Object(d.jsx)("li",{children:Object(d.jsx)(i.b,{to:"SPA64",children:"SPA 6"})}),Object(d.jsx)("li",{children:Object(d.jsx)(i.b,{to:"SPA65",children:"SPA 7"})}),Object(d.jsx)("li",{children:Object(d.jsx)(i.b,{to:"SPA66",children:"SPA 8"})}),Object(d.jsx)("li",{children:Object(d.jsx)(i.b,{to:"SPA67",children:"SPA 9"})}),Object(d.jsx)("li",{children:Object(d.jsx)(i.b,{to:"SPA68",children:"SPA 10"})}),Object(d.jsx)("li",{children:Object(d.jsx)(i.b,{to:"SPA69",children:"SPA 11"})}),Object(d.jsx)("li",{children:Object(d.jsx)(i.b,{to:"SPA70",children:"SPA 12"})}),Object(d.jsx)("li",{children:Object(d.jsx)(i.b,{to:"SPA71",children:"SPA 13"})}),Object(d.jsx)("li",{children:Object(d.jsx)(i.b,{to:"SPA72",children:"SPA 14"})}),Object(d.jsx)("li",{children:Object(d.jsx)(i.b,{to:"SPA73",children:"SPA 15"})}),Object(d.jsx)("li",{children:Object(d.jsx)(i.b,{to:"SPA74",children:"SPA 16"})}),Object(d.jsx)("li",{children:Object(d.jsx)(i.b,{to:"SPA75",children:"SPA 17"})}),Object(d.jsx)("li",{children:Object(d.jsx)(i.b,{to:"SPA76",children:"SPA 18"})}),Object(d.jsx)("li",{children:Object(d.jsx)(i.b,{to:"SPA77",children:"SPA 19"})}),Object(d.jsx)("li",{children:Object(d.jsx)(i.b,{to:"SPA78",children:"SPA 20"})}),Object(d.jsx)("li",{children:Object(d.jsx)(i.b,{to:"SPA79",children:"SPA 21"})}),Object(d.jsx)("li",{children:Object(d.jsx)(i.b,{to:"SPA80",children:"SPA 22"})}),Object(d.jsx)("li",{children:Object(d.jsx)(i.b,{to:"SPA81",children:"SPA 23"})}),Object(d.jsx)("li",{children:Object(d.jsx)(i.b,{to:"SPA82",children:"SPA 24"})}),Object(d.jsx)("li",{children:Object(d.jsx)(i.b,{to:"SPA83",children:"SPA 25"})})]})]}),Object(d.jsx)("li",{children:Object(d.jsx)("a",{href:"https://andreglock.github.io/portfolio/",target:"_blank",rel:"noreferrer",children:"Portfolio"})})]})})}var u=t.p+"static/media/linda1.3aad0622.jpg",m=t.p+"static/media/linda2.80f4369e.jpg",p=t.p+"static/media/linda3.69a0e928.jpg",b=t.p+"static/media/linda4.f60f36ad.jpg",g=t.p+"static/media/linda5.459858d5.jpg";function f(){return Object(d.jsxs)("div",{id:"content",className:"indexContent",children:[Object(d.jsx)("header",{children:Object(d.jsx)("h1",{children:"Codelicious Classes"})}),Object(d.jsxs)("main",{children:[Object(d.jsxs)("div",{children:[Object(d.jsx)("h2",{children:"Flexbox games:"}),Object(d.jsx)("a",{className:"block",href:"https://flexboxfroggy.com/",target:"blank",children:"Level one: Flexfroggy"}),Object(d.jsx)("a",{className:"block",href:"https://www.flexboxdefense.com/",target:"blank",children:"Level two: Flexbox Defense"})]}),Object(d.jsxs)("div",{children:[Object(d.jsx)("h2",{children:"Other CSS games:"}),Object(d.jsx)("a",{className:"block",href:"https://flukeout.github.io/",target:"blank",children:"CSS Diner"}),Object(d.jsx)("a",{className:"block",href:"https://cssgridgarden.com/",target:"blank",children:"CSS Garden"})]}),Object(d.jsxs)("div",{children:[Object(d.jsx)("h2",{children:"CSS Designing Tools:"}),Object(d.jsx)("a",{className:"block",href:"https://bennettfeely.com/clippy/",target:"blank",children:"Clip-path maker"}),Object(d.jsx)("a",{className:"block",href:"https://cssgradient.io/",target:"blank",children:"Gradient Maker"}),Object(d.jsx)("a",{className:"block",href:"https://paletton.com/",target:"blank",children:"Color Pallet Generator"})]}),Object(d.jsx)("img",{src:u,alt:"Linda"}),Object(d.jsx)("img",{src:m,alt:"Linda"}),Object(d.jsx)("img",{src:p,alt:"Linda"}),Object(d.jsx)("img",{src:b,alt:"Linda"}),Object(d.jsx)("img",{src:g,alt:"Linda"})]})]})}function j(){return Object(d.jsxs)("div",{id:"content",children:[Object(d.jsx)("h1",{children:"Basic digital literacy 11.01.2020"}),Object(d.jsx)("p",{children:"Windows and Linux terminals are very different. Mac and Linux terminals are very similar."}),Object(d.jsx)("h2",{children:"Terminal"}),Object(d.jsx)("p",{children:"The terminal is sometimes called - console - shell - command prompt (might refer to the windows one) - cli = command line interface"}),Object(d.jsx)("h2",{children:"Filesystem structure"}),Object(d.jsx)("p",{children:"(root)/ home/ - user folders etc/  - configuration files var/  - logs tmp/  - temporary files ..."}),Object(d.jsx)("h2",{children:"Special folder names"}),Object(d.jsx)("h3",{children:"Absolute paths"}),Object(d.jsx)("p",{children:'"/"  -- root directory "/home/dci/Downloads"'}),Object(d.jsx)("h3",{children:"Alias or variable path"}),Object(d.jsx)("p",{children:'"~" -- home directory'}),Object(d.jsx)("h3",{children:"Special shortcut"}),Object(d.jsx)("p",{children:'"-" -- previous directoy'}),Object(d.jsx)("h3",{children:"Relative paths"}),Object(d.jsx)("p",{children:'".." -- up one level in the directory tree or structure "."  -- current directory'}),Object(d.jsx)("h2",{children:"Basic commands"}),Object(d.jsx)("pre",{children:Object(d.jsx)("code",{children:'$ pwd # print working directory $ ls  # list $ cd  # change directory $ cd .. # change directory up the directory tree $ cd Downloads # change directory to "Downloads"'})}),Object(d.jsx)("p",{children:"Note! Use the tab key when you can!"}),Object(d.jsx)("pre",{children:Object(d.jsx)("code",{children:"$ ls -l $ ls -a $ ls -h $ ls -lah"})}),Object(d.jsx)("p",{children:"$ history up arrow, down arrow"})]})}function w(){return Object(d.jsxs)("div",{id:"content",children:[Object(d.jsx)("h1",{children:"Basic Digital Literacy day 2"}),Object(d.jsx)("p",{children:"RECAP"}),Object(d.jsx)("p",{children:"$ ls -lah $ pwd $ history $ cd"}),Object(d.jsx)("h2",{children:"Files and Folderss"}),Object(d.jsx)("p",{children:"Naming Names are like something.zip Case sensitive! File name endings are nice to have, but not necessary Text files and binary files Binary files need a program to be openeds Text files contain readable text content Avoid strange characters such as space, \xfc and \xe4 Use alphanumerics for file namings A-Z, 0-9 Also using - _ are fine \xfcber.jpg ueber.jpg \xe4 -> ae \xf6 -> oe"}),Object(d.jsx)("h2",{children:"glob"}),Object(d.jsxs)("ul",{children:[Object(d.jsx)("li",{children:"File and folder name matching with special characters"}),Object(d.jsx)("li",{children:"File and folder name matching or searching using the characters * and ?"}),Object(d.jsx)("li",{children:"the * is often called a wildcard (asterisk)"}),Object(d.jsxs)("li",{children:["commands like ",Object(d.jsx)("code",{children:"ls Do*"})]}),Object(d.jsxs)("li",{children:[Object(d.jsx)("code",{children:"ls -R Do*"})," <-- List files and folders Recursively"]})]}),Object(d.jsx)("h2",{children:"New commands"}),Object(d.jsx)("p",{children:"print out files: $ cat filename(s) # display the contents of a file or files the cat command = conCATente text file(s)"}),Object(d.jsx)("p",{children:"$ ls [-l] [file or folder name(s)s]"}),Object(d.jsx)("p",{children:"Change your password $ passwd # change your passwordx"}),Object(d.jsx)("p",{children:"Getting help and more info on commands $ man [somecommand] # display manual file for a command $ [ls] --help # display help output for a command"}),Object(d.jsx)("p",{children:"Controlling files and folders $ mkdir something # create new directory $ mkdir -p something/something2 # create directory and its missing parents $ rmdir something # remove empty directory $ touch newfile.md # create empty file or update the timestamp of an existing file $ rm filename # removes a file $ rm -r foldername # removes a folder RECURSIVELY $ cp path1 path2 # copy from one path to another path1 can be a file or a folder path2 can be a file or a folder"}),Object(d.jsx)("p",{children:"$ mv path1 path2 # move from one path to another path1 can be a file or a folder path2 can be a file or a folder"})]})}function y(){return Object(d.jsxs)("div",{id:"content",children:[Object(d.jsx)("h1",{children:"Basic Digital Literacy 3"}),Object(d.jsx)("p",{children:"Quick recap of all the commands"}),Object(d.jsx)("p",{children:"$ pwd   # print working directory $ ls    # list $ cd    # change directory $ touch # create file $ mkdir # create directory $ rmdir # remove directory $ rm    # remove $ cp    # copy $ mv    # move $ history # show command history $ man   # manual $ cat   # output file"}),Object(d.jsx)("p",{children:"Useful argument often found in commands: --version"}),Object(d.jsx)("p",{children:"^C --- the caret symbol means Control here. Control and c were pressed. M-U -- usually the M means the Alt key. Alt and c pressed here. Super key usually means the windows key (or apple key on mac)."}),Object(d.jsxs)("p",{children:["Another help command: ",Object(d.jsx)("code",{children:"help"})," - might not be super useful."]}),Object(d.jsx)("h2",{children:"More important commands"}),Object(d.jsx)("p",{children:"$ less some/path/here.txt q - exit file g - go to the top of a file G - go the bottom of a file"}),Object(d.jsx)("p",{children:"$ find [dir] -name [search_pattern] $ find [dir] -type [d or f] $ find [/home/dci/Documents] -type f -name *.txt $ find [/home/dci] -type d -name Documents"}),Object(d.jsx)("p",{children:"$ grep [search_pattern] [file] $ grep -r [search_pattern] [folder]"}),Object(d.jsx)("p",{children:"$ nano [path/to/file]"})]})}function x(){return Object(d.jsxs)("div",{id:"content",children:[Object(d.jsx)("h1",{children:"BDL 4 - Day 3"}),Object(d.jsx)("h2",{children:"More commands"}),Object(d.jsx)("p",{children:"Friends of cat"}),Object(d.jsx)("pre",{children:Object(d.jsx)("code",{children:"$ tail output.log       # display the last lines of text in a file $ tail -n 5 output.log  # display the last 5 lines of text in a file"})}),Object(d.jsx)("p",{children:"Have a peek at a file"}),Object(d.jsx)("pre",{children:Object(d.jsx)("code",{children:"$ head # display the first lines of text in a file"})}),Object(d.jsx)("h2",{children:"Markdown"}),Object(d.jsxs)("p",{children:["Markdown syntax Documentation: ",Object(d.jsx)("a",{href:"https://www.markdownguide.org/basic-syntax",children:"Markdown Guide"})]}),Object(d.jsx)("p",{children:"Super simple. Is rendered. Can be converted into HTML easily by renderers. Halfway between visual and code."}),Object(d.jsx)("p",{children:Object(d.jsx)("img",{alt:"Les Horribles Cernettes",src:"https://musiclub.web.cern.ch/bands/cernettes/pictures/LHC5.jpg",title:"Les Horribles Cernettes say hello"})}),Object(d.jsx)("p",{children:"Syntax examples"}),Object(d.jsxs)("ul",{children:[Object(d.jsxs)("li",{children:["Images are done using this syntax: ",Object(d.jsx)("code",{children:'![Image Text Version](relative/path/to/image.jpg "What the image is")'})]}),Object(d.jsxs)("li",{children:["List",Object(d.jsxs)("ul",{children:[Object(d.jsxs)("li",{children:["Sublist 1",Object(d.jsxs)("ul",{children:[Object(d.jsx)("li",{children:"SubSublist 1"}),Object(d.jsx)("li",{children:"SubSublist 2"})]})]}),Object(d.jsx)("li",{children:"Sublist 2"})]})]}),Object(d.jsxs)("li",{children:["Text effect: ",Object(d.jsx)("strong",{children:"Bold"})," text"]}),Object(d.jsxs)("li",{children:["Text effect: ",Object(d.jsx)("strong",{children:"Bold"})," text"]}),Object(d.jsxs)("li",{children:["Text effect: ",Object(d.jsx)("em",{children:"Italic"})," text"]}),Object(d.jsxs)("li",{children:["Text effect: ",Object(d.jsx)("em",{children:"Italic"})," text"]}),Object(d.jsxs)("li",{children:["Text effects combo: ",Object(d.jsxs)("strong",{children:[Object(d.jsx)("em",{children:"Both"})," effects"]})]}),Object(d.jsxs)("li",{children:["Text effect: ",Object(d.jsx)("code",{children:"Inline code blocks"})," like so!"]}),Object(d.jsxs)("li",{children:["Linking to an address: ",Object(d.jsx)("code",{children:"[Link Text Here](address here)"})]}),Object(d.jsxs)("li",{children:["Headings",Object(d.jsxs)("ul",{children:[Object(d.jsx)("li",{children:Object(d.jsx)("code",{children:"# Level 1"})}),Object(d.jsx)("li",{children:Object(d.jsx)("code",{children:"## Level 2"})}),Object(d.jsx)("li",{children:Object(d.jsx)("code",{children:"### Level 3 ... up until level 6"})})]})]}),Object(d.jsx)("li",{children:"Indented code blocks / preformatted text"}),Object(d.jsx)("li",{children:"Block quotes"}),Object(d.jsxs)("li",{children:["Numbered lists:",Object(d.jsxs)("ol",{children:[Object(d.jsx)("li",{children:"Example Banana"}),Object(d.jsx)("li",{children:"Example Beet"}),Object(d.jsx)("li",{children:"Example Cherry"}),Object(d.jsx)("li",{children:"Example Potato"}),Object(d.jsx)("li",{children:"Example Curry"})]})]})]}),Object(d.jsx)("p",{children:"Example of a Code Block:"}),Object(d.jsx)("pre",{children:Object(d.jsx)("code",{children:"$ mkdir projects/newproject $ cd projects/newproject $ something_else_amazing"})}),Object(d.jsxs)("blockquote",{children:[Object(d.jsx)("p",{children:"Albert Einstein once said,"}),Object(d.jsx)("p",{children:'"HTML Rocks"'}),Object(d.jsx)("p",{children:"Something"})]}),Object(d.jsx)("p",{children:"TASKS"}),Object(d.jsxs)("ol",{children:[Object(d.jsx)("li",{children:"Open two consoles"}),Object(d.jsx)("li",{children:'Run "history" in one of them'}),Object(d.jsx)("li",{children:'In the other, create a new markdown file called "notes.md"'}),Object(d.jsx)("li",{children:"In the new file, write down all the commands you have used"}),Object(d.jsx)("li",{children:"Write down all the arguments you have used and a brief explanation of them"}),Object(d.jsx)("li",{children:"Also put in a section for general tips and knowledge you have learned"}),Object(d.jsx)("li",{children:"Use markdown examples and syntax"}),Object(d.jsx)("li",{children:"I recommend using BOTH nano and visual studio code."}),Object(d.jsxs)("li",{children:["When done, ",Object(d.jsx)("code",{children:"cat"})," the file out in the console, copy it and send it to Joel as a private message in Slack."]})]}),Object(d.jsx)("h2",{children:"Installing software"}),Object(d.jsx)("p",{children:"MAC/OSX -- brew, cask (macports program)"}),Object(d.jsx)("p",{children:"A few commands"}),Object(d.jsx)("p",{children:'$ df -h # check how much space do I have lefts $ whoami $ groups $ sudo # do something as the "super user" or "root"'}),Object(d.jsx)("p",{children:"Root has all permissions, can do anything to the system. Avoid using sudo or the root user as much as possible. Use only when necessary."}),Object(d.jsx)("p",{children:"Package management systems: apt, snap, npm, brew, cask, yum, gem, emerge"}),Object(d.jsx)("p",{children:"$ sudo apt update   # updates the list of things that I can install $ sudo apt install  # actually installs something $ sudo apt remove   # uninstall something $ sudo apt search google chrome # search for something to install $ sudo apt autoremove # remove left over files from updating and installing"}),Object(d.jsx)("p",{children:"$ sudo snap search opera $ sudo snap install opera $ sudo snap remove"}),Object(d.jsx)("p",{children:'$ npm install -g "something" # node package manager installation $ npm uninstall -g "something" '}),Object(d.jsx)("p",{children:"$ which  # show information about a program $ whereis # show program location"}),Object(d.jsx)("h2",{children:"Browser Basics"}),Object(d.jsx)("p",{children:"Big browsers: Google Chrome, Safari, Internet Explorer, Edge, Mozilla Firefox Small browsers: Opera, Brave, Vivaldi, eLinks, DuckDuck, Midori...."}),Object(d.jsx)("p",{children:"Target browsers: Support latest version of chrome and Edge"}),Object(d.jsx)("p",{children:"Browser = Browser Engine + JavaScript engine + other stuff too, such as plugins and tools Browser Engine = HTML to visual rendering JavaSript Engine = Runs Javascript"}),Object(d.jsx)("p",{children:"If your site works with one Browser using the Blink engine, most likely other Blink engine Browsers will work too. If your JS works with one browser that uses the V8 engine, it will most likely work with all of them."}),Object(d.jsx)("p",{children:"Shortcuts"}),Object(d.jsx)("p",{children:"^T -- opens new tab ^N -- opens new window ^W -- closes a tab ^Shift-T -- reopens a closed tab ^Shift-N -- reopens a closed window F11 -- view full screen F12 -- open developer console -- the web developers best friend and toolkit"})]})}function v(){return Object(d.jsxs)("div",{id:"content",children:[Object(d.jsx)("h1",{children:"BDL 5 Day 4"}),Object(d.jsx)("h2",{children:"Core internet skills and knowledge"}),Object(d.jsx)("p",{children:"Networking = communication with a shared set of protocols. Protocol = an agreement on how to do a very specific thing."}),Object(d.jsxs)("ul",{children:[Object(d.jsxs)("li",{children:[Object(d.jsx)("p",{children:"Internet Protocol"}),Object(d.jsxs)("ul",{children:[Object(d.jsx)("li",{children:"70s"}),Object(d.jsx)("li",{children:"mail, file exchange, message boards"}),Object(d.jsxs)("li",{children:["Two kinds communication",Object(d.jsxs)("ul",{children:[Object(d.jsx)("li",{children:"TCP Connected       - like a telephone - used for example in games and some chat"}),Object(d.jsx)("li",{children:"UDP Connectionless  - like the post office - far more commons"})]})]})]})]}),Object(d.jsxs)("li",{children:[Object(d.jsx)("p",{children:"All computers on a network have an address"}),Object(d.jsxs)("ul",{children:[Object(d.jsxs)("li",{children:[Object(d.jsx)("p",{children:"IPv4 - IP adddresses"}),Object(d.jsxs)("ul",{children:[Object(d.jsx)("li",{children:"Can sometimes change, so they are dynamic"}),Object(d.jsx)("li",{children:"You can buy static IP addresses, most servers have a static address that doesn't change"}),Object(d.jsx)("li",{children:"Can be shared among many computers too"}),Object(d.jsx)("li",{children:"192.168.1.1 <-- example"}),Object(d.jsx)("li",{children:"0.0.0.0 - 255.255.255.255"}),Object(d.jsx)("li",{children:"Public (used on the internet) and Private (used in local networks) addresses"}),Object(d.jsx)("li",{children:"VPNs will hide or change your address"}),Object(d.jsx)("li",{children:"You can run multiple websites in one IP address, on the same server"}),Object(d.jsx)("li",{children:"We are slowly running out of addresses"}),Object(d.jsx)("li",{children:"~3400 million addresses"}),Object(d.jsx)("li",{children:"127.0.0.1 <- your local machine"})]})]}),Object(d.jsxs)("li",{children:[Object(d.jsx)("p",{children:"IPv6 - new shiny awesome unique addresses"}),Object(d.jsx)("ul",{children:Object(d.jsx)("li",{children:"2001:db8::8a2e:370:1123"})})]})]})]}),Object(d.jsxs)("li",{children:[Object(d.jsx)("p",{children:"DNS - Domain name system"}),Object(d.jsxs)("ul",{children:[Object(d.jsx)("li",{children:"Each IP address can have a human readable domain name"}),Object(d.jsx)("li",{children:"google.de is a domain address"}),Object(d.jsx)("li",{children:"one website can have multiple IP addresses, but usually just one domain    "}),Object(d.jsx)("li",{children:"The point of domains is to make Addresses easy to recognize and remember"}),Object(d.jsx)("li",{children:"You can register domains for yourself"}),Object(d.jsx)("li",{children:"Domain names are a big business"}),Object(d.jsx)("li",{children:"Usually you pay per domain per year"}),Object(d.jsx)("li",{children:"Domain name servers are run by multiple organisations over the globe"}),Object(d.jsx)("li",{children:"When registering a domain, it takes a little bit of time for your new domain to be available"}),Object(d.jsx)("li",{children:"When changing a domain, it takes time to change too"}),Object(d.jsx)("li",{children:"www.google.de --\x3e 19.22.55.12"}),Object(d.jsx)("li",{children:"You can check who owns a domain, or at least get some info on it"}),Object(d.jsx)("li",{children:Object(d.jsx)("p",{children:"https://who.is/"})}),Object(d.jsxs)("li",{children:[Object(d.jsx)("p",{children:"TLD Top Level Domain"}),Object(d.jsxs)("ul",{children:[Object(d.jsxs)("li",{children:["Examples",Object(d.jsxs)("ul",{children:[Object(d.jsx)("li",{children:".de"}),Object(d.jsx)("li",{children:".fi"}),Object(d.jsx)("li",{children:".tv -- tuvalu"}),Object(d.jsx)("li",{children:'.com --- "commerce"'}),Object(d.jsx)("li",{children:".info"}),Object(d.jsx)("li",{children:'.org --- "organization"'}),Object(d.jsx)("li",{children:'.gov --- "government"'})]})]}),Object(d.jsx)("li",{children:"You cannot register to every single TLD"})]})]}),Object(d.jsxs)("li",{children:[Object(d.jsx)("p",{children:"Domains are Mostly alphanumeric"}),Object(d.jsxs)("ul",{children:[Object(d.jsx)("li",{children:"www.abcde1234689.com"}),Object(d.jsx)("li",{children:"It is unusual to see a domain like www.\xfc\xfc\xfc\xfc\xfc\xc4\xd6\xf6\xc4.com"})]})]}),Object(d.jsxs)("li",{children:[Object(d.jsx)("p",{children:"Domains have Subdomains"}),Object(d.jsxs)("ul",{children:[Object(d.jsx)("li",{children:"For example: www.google.de"}),Object(d.jsx)("li",{children:'"www" is a subdomain'}),Object(d.jsx)("li",{children:"website.amazon.de"}),Object(d.jsx)("li",{children:"ww2.services.internet.bank.de"}),Object(d.jsx)("li",{children:"mail.google.com"})]})]}),Object(d.jsxs)("li",{children:[Object(d.jsx)("p",{children:"Hosts file"}),Object(d.jsxs)("ul",{children:[Object(d.jsx)("li",{children:"Historically, before DNS we just had a hosts file"}),Object(d.jsx)("li",{children:"120.5.1.1 jennyscomputer"}),Object(d.jsx)("li",{children:"154.1.1.1 bobs-message-board"}),Object(d.jsx)("li",{children:"In linux it#s at /etc"})]})]})]})]}),Object(d.jsx)("li",{children:Object(d.jsx)("p",{children:"All data transferred is between server and client"})}),Object(d.jsxs)("li",{children:[Object(d.jsx)("p",{children:"URL"}),Object(d.jsxs)("ul",{children:[Object(d.jsx)("li",{children:"Universal Resource Locator"}),Object(d.jsx)("li",{children:"Web address"}),Object(d.jsx)("li",{children:"example.org             # simplest possible"}),Object(d.jsx)("li",{children:"www.example.org         # subdomain"}),Object(d.jsx)("li",{children:"http://www.example.org  # protocol part -- basic one; HyperText Transfer Protocol"}),Object(d.jsx)("li",{children:"https://example.org     # protocol; http with SSL encryption; when in production, always use"}),Object(d.jsx)("li",{children:"http://example.org:80   # the port -- http -- the browser hides this one"}),Object(d.jsx)("li",{children:"https://example.org:443 # the port for https -- the browser hides this one"}),Object(d.jsx)("li",{children:Object(d.jsx)("p",{children:"http://localhost:3000   # port 3000 is usually for NodeJS"})}),Object(d.jsx)("li",{children:Object(d.jsx)("p",{children:'http://example.org/dogs         # "dogs" here is part of the path, some kind of resource'})}),Object(d.jsx)("li",{children:"http://example.org/dogs.html    # if you have an extension, it could be a file, but might not"}),Object(d.jsx)("li",{children:"http://example.org/captcha.jpg  # could be a file, or could point to some logic"}),Object(d.jsx)("li",{children:Object(d.jsx)("p",{children:'http://example.org/dogs/search  # "dogs/search" is part of the path, again some resource    '})}),Object(d.jsx)("li",{children:Object(d.jsx)("p",{children:"http://example.org/dogs/poodle?color=white&puppy=false&size=small [--query parameters---]"})}),Object(d.jsx)("li",{children:Object(d.jsxs)("p",{children:["Query parameters are separated first with a question mark ",Object(d.jsx)("code",{children:"?"})," and after that, with an ",Object(d.jsx)("code",{children:"&"})]})}),Object(d.jsx)("li",{children:Object(d.jsx)("p",{children:"http://example.org/dogs/poodle?color=white#bottom   # the fragment part # could be a part of the page # could be some strange logic.. # always the last part"})}),Object(d.jsx)("li",{children:Object(d.jsx)("p",{children:"URLs are basically always unicode, meaning that symbols need to be Encoded."})}),Object(d.jsx)("li",{children:Object(d.jsx)("p",{children:'URL encoding looks like this: "green apple" -----encoding---\x3e "green%20apple" "green%20apple" ---decoding---\x3e "green apple"'})}),Object(d.jsx)("li",{children:Object(d.jsx)("p",{children:"Ports 80 - used for normal http web traffic 443 - used for https web traffic 22  - used for SSH connections"})})]})]})]}),Object(d.jsx)("h2",{children:"A word on publishing"}),Object(d.jsx)("p",{children:"You have a website. How do you publish it?"}),Object(d.jsx)("h3",{children:"FTP - File Transfer Protocol"}),Object(d.jsx)("pre",{children:Object(d.jsx)("code",{children:"The Oldschool way of publishing Just copy the files to the server, usually with a graphical program"})}),Object(d.jsx)("h3",{children:"SSH - Secure SHell"}),Object(d.jsx)("pre",{children:Object(d.jsx)("code",{children:"Copying files manually or over git ... But mostly used for connecting to a server. To transfer files use a command like `$ scp SOURCEFILE.txt username@serveraddress:/target/path/`"})}),Object(d.jsx)("h3",{children:"CI -- continuous integration systems"}),Object(d.jsx)("pre",{children:Object(d.jsx)("code",{children:'Used mostly on bigger projects and products As soon as your feature is accepted, it will automatically be updated into the website The most advanced system Difficult to set up Once up, it\'s by far the fastest ones Or "Contiunuous deployment" It might be only connected to a test or staging environment'})}),Object(d.jsx)("h3",{children:"Version control"}),Object(d.jsx)("p",{children:"You can go back and see the history of your files. You can see Who did, What did they do, When did they do it."}),Object(d.jsx)("p",{children:"Website is done --- Add a new feature --- Fix a bug --- Change the User Interface"}),Object(d.jsx)("p",{children:"History is just a part of why to use VCS - version control systems."}),Object(d.jsx)("p",{children:"Different VCS's - git --- originally developed for linux kernel development - subversion -- still popular but kinda old - mercurial... "}),Object(d.jsx)("p",{children:"We will be using git."}),Object(d.jsx)("p",{children:"Other than history, the biggest reason to use a VCS is collaboration. You can monitor and check each others work."}),Object(d.jsx)("p",{children:"Checking other peoples work is often called Peer Review and/or Code Review."}),Object(d.jsx)("p",{children:"VCS help with dealing with conflicts when multiple people work on the same file at the same time."}),Object(d.jsx)("h2",{children:"Advanced terminal usage"}),Object(d.jsx)("h3",{children:"Running multiple commands at the same time!"}),Object(d.jsx)("p",{children:"Method 1: $ command1 && command2 Command2 will run only if command1 is successful!"}),Object(d.jsx)("p",{children:"Method 2: $ command1; command2 Command2 will run even if command1 fails!"}),Object(d.jsx)("h3",{children:"Streams"}),Object(d.jsx)("p",{children:"In Linux-like systems each program has 3 streams:"}),Object(d.jsx)("pre",{children:Object(d.jsx)("code",{children:"input       STDIN   standard in output      STDOUT  standard out error       STDERR  standard errors"})}),Object(d.jsxs)("p",{children:["With the pipe symbol ",Object(d.jsx)("code",{children:"|"})," we can redirect the output stream of a program into the input stream of some other program."]}),Object(d.jsxs)("p",{children:["With the ",Object(d.jsx)("code",{children:">"})," symbol we can redirect the output stream into a file! Wit just one > we will replace the contents of a file. With two of them, however we can append text to the end of a file;"]}),Object(d.jsx)("p",{children:'$ echo "New stuff here!" >> logfile.txt'})]})}function O(){return Object(d.jsxs)("div",{id:"content",children:[Object(d.jsx)("h1",{children:"DAY 6 - BDL - GIT Todays agenda:"}),Object(d.jsx)("p",{children:"TEAM STUFF"}),Object(d.jsxs)("ul",{children:[Object(d.jsxs)("li",{children:["Code of conduct",Object(d.jsxs)("ul",{children:[Object(d.jsx)("li",{children:"https://berlincodeofconduct.org/"}),Object(d.jsxs)("li",{children:["Rules",Object(d.jsxs)("ul",{children:[Object(d.jsx)("li",{children:"Discrimination in all its forms won't be tolerated, tell Joel or Bianca if you witness this!"}),Object(d.jsx)("li",{children:"Strive to be on time"})]})]}),Object(d.jsxs)("li",{children:["Expectations",Object(d.jsxs)("ul",{children:[Object(d.jsx)("li",{children:'Respect others, "be excellent to each other"'}),Object(d.jsx)("li",{children:"Communicate! It's better to overcommunicate than undercommunicate"})]})]}),Object(d.jsxs)("li",{children:["Guidelines",Object(d.jsxs)("ul",{children:[Object(d.jsx)("li",{children:"There are no dumb questions!"}),Object(d.jsx)("li",{children:"When frustrated, contact Joel. Or contact Bianaca if frustrated with Joel :)"}),Object(d.jsx)("li",{children:"Be patient with others, sometimes you will know things already, but there's always the possibility of learning"}),Object(d.jsx)("li",{children:"Be patient with yourself, learning this stuff takes time, repetition and effort"}),Object(d.jsx)("li",{children:"It's OK to make mistakes and fail! Everyone does."})]})]})]})]}),Object(d.jsx)("li",{children:"Class name"}),Object(d.jsx)("li",{children:"Class logo? Carsten you made a cool one for Markdown!"}),Object(d.jsxs)("li",{children:["Custom Slack workspace",Object(d.jsxs)("ul",{children:[Object(d.jsx)("li",{children:"History is limited"}),Object(d.jsx)("li",{children:"Files are limited"}),Object(d.jsx)("li",{children:"Custom emojis :D"}),Object(d.jsx)("li",{children:"Custom name"}),Object(d.jsx)("li",{children:"Custom logo"}),Object(d.jsx)("li",{children:"Easier to setup custom channels"}),Object(d.jsx)("li",{children:"More privatererHACKATHON in #allgemein"})]})]}),Object(d.jsx)("li",{children:"Register before feb 12!GIT"}),Object(d.jsx)("li",{children:"Github account, send me your name!"}),Object(d.jsxs)("li",{children:["Git is distributed. You ",Object(d.jsx)("em",{children:"are"})," a server too. GH is just the central repo."]}),Object(d.jsx)("li",{children:"Git tracks Files, not folders."}),Object(d.jsxs)("li",{children:["Github",Object(d.jsxs)("ul",{children:[Object(d.jsx)("li",{children:"It's a great tool, butt not the ONLY tool!"}),Object(d.jsx)("li",{children:"Owned & operated by microsoft, used for developing Linux :)"}),Object(d.jsx)("li",{children:"First day on GH https://lab.github.com/githubtraining/first-day-on-github"})]})]})]})]})}function k(){return Object(d.jsxs)("div",{id:"content",children:[Object(d.jsx)("h1",{children:"BDL Day 7 :)"}),Object(d.jsx)("h2",{children:"GIT"}),Object(d.jsxs)("ul",{children:[Object(d.jsx)("li",{children:"Git tracks the version history of files"}),Object(d.jsx)("li",{children:"The history of a project is a timeline containing sets of changes (commits)"}),Object(d.jsxs)("li",{children:["Terminology",Object(d.jsxs)("ul",{children:[Object(d.jsx)("li",{children:"Commit = Set of changes to files"}),Object(d.jsx)("li",{children:"Master branch = Main branch of your repository"}),Object(d.jsx)("li",{children:"Repository = The place where your project code exists"}),Object(d.jsx)("li",{children:'Branch = Your "copy" for working with the code'}),Object(d.jsx)("li",{children:"Workflow = Order of operations, a guideline on when and how to work"})]})]}),Object(d.jsxs)("li",{children:["The ",Object(d.jsx)("code",{children:"git"})," command",Object(d.jsxs)("ul",{children:[Object(d.jsx)("li",{children:'Has "subcommands" or arguments'}),Object(d.jsx)("li",{children:"The git command does things depending on where you are"}),Object(d.jsxs)("li",{children:[Object(d.jsx)("code",{children:"git status"})," -- shows the status of git inside the current working directory"]}),Object(d.jsxs)("li",{children:[Object(d.jsx)("code",{children:"git clone [repository_address]"})," -- get a local copy of a repository, inside a new directory"]}),Object(d.jsx)("li",{children:"Has tab completion!"})]})]}),Object(d.jsx)("li",{children:"The .git folder defines that a folder is a git repository"}),Object(d.jsx)("li",{children:"The .gitignore file is a list of paths"}),Object(d.jsx)("li",{children:"The .gitignore paths --- yeah, git ignores them"}),Object(d.jsxs)("li",{children:["To changes branches, run ",Object(d.jsx)("code",{children:"git checkout [branchname]"})]}),Object(d.jsxs)("li",{children:["To get a list of all the branches, run ",Object(d.jsx)("code",{children:"git branch"})]}),Object(d.jsxs)("li",{children:["Live coding example...",Object(d.jsx)("ul",{children:Object(d.jsxs)("li",{children:["Workflow:",Object(d.jsxs)("ol",{children:[Object(d.jsx)("li",{children:"Clone the repository"}),Object(d.jsx)("li",{children:"Assign task to yourself"}),Object(d.jsxs)("li",{children:["Create a branch for this new task ",Object(d.jsx)("code",{children:"git checkout -b [branchname]"})]}),Object(d.jsx)("li",{children:"Made some changes (new file and edited a file)"}),Object(d.jsxs)("li",{children:["We staged the file we added with ",Object(d.jsx)("code",{children:"git add [newfile]"})]}),Object(d.jsxs)("li",{children:["We staged the file we changed with ",Object(d.jsx)("code",{children:"git add [oldfile]"})]}),Object(d.jsxs)("li",{children:["You can stage many changes (files) at the same time, such as with ",Object(d.jsx)("code",{children:"git add [foldername]"})]}),Object(d.jsxs)("li",{children:["You can finalize a commit with ",Object(d.jsx)("code",{children:"git commit"}),Object(d.jsxs)("ul",{children:[Object(d.jsx)("li",{children:"If git asks you to, tell it who you are using the provided commands"}),Object(d.jsx)("li",{children:"You need to add some kind of commit message."}),Object(d.jsx)("li",{children:'Commit messages are often imperative, such as "Update README"'})]})]}),Object(d.jsxs)("li",{children:["Update our changes to github using the command ",Object(d.jsx)("code",{children:"git push"}),Object(d.jsxs)("ul",{children:[Object(d.jsx)("li",{children:"Because we created the branch locally, we need to tell GitHub about it when pushing:"}),Object(d.jsxs)("li",{children:[Object(d.jsx)("code",{children:"git push --set-upstream origin issue-11-add-dogs"}),' - here "origin" refers to github']})]})]}),Object(d.jsx)("li",{children:"After the push is done, create a new Pull Request in GitHub"}),Object(d.jsx)("li",{children:"Merge the pull request"}),Object(d.jsx)("li",{children:"Close the issue."})]})]})})]}),Object(d.jsxs)("li",{children:["Live coding example 2: the same again, but twice!",Object(d.jsx)("ul",{children:Object(d.jsxs)("li",{children:["Remember to update your local repository using ",Object(d.jsx)("code",{children:"git pull"})]})})]})]}),Object(d.jsx)("h2",{children:"More git stuff"}),Object(d.jsxs)("ul",{children:[Object(d.jsxs)("li",{children:[Object(d.jsx)("p",{children:"Git Remotes"}),Object(d.jsxs)("ul",{children:[Object(d.jsx)("li",{children:"git works on repositories"}),Object(d.jsx)("li",{children:"you can have multiple repositories on your computer"}),Object(d.jsx)("li",{children:"you can have multiple repos in github"}),Object(d.jsx)("li",{children:"one repository can have relations to other repositories"})]})]}),Object(d.jsxs)("li",{children:[Object(d.jsxs)("p",{children:[Object(d.jsx)("em",{children:"Fork"})," Forking a repository means to get your own copy of the repository where you are in control!"]}),Object(d.jsx)("ul",{children:Object(d.jsxs)("li",{children:["This is often done to get your own ",Object(d.jsx)("em",{children:"remote"})," of someone elses repository"]})})]})]})]})}function S(){return Object(d.jsxs)("div",{id:"content",children:[Object(d.jsx)("h1",{children:"BDL 8 - Even MORE git stuff!"}),Object(d.jsxs)("ul",{children:[Object(d.jsxs)("li",{children:[Object(d.jsx)("code",{children:"git init"})," - initializes the current working folder as a git repository"]}),Object(d.jsx)("li",{children:"Init should just be run one time per repository"}),Object(d.jsxs)("li",{children:[Object(d.jsx)("code",{children:"git"})," commands can be run in subfolders"]}),Object(d.jsxs)("li",{children:["Git ",Object(d.jsx)("em",{children:"only"})," tracks files, not directories"]}),Object(d.jsx)("li",{children:'The commit message of the first commit to a repo often is "Initial import", "Initial commit" or something similar'}),Object(d.jsx)("li",{children:"You can create a repository in GitHub before OR after creating your local project"}),Object(d.jsxs)("li",{children:["To add an existing local git repository (new project for example) to a newly created GH repository, you need to add the GH repository as a ",Object(d.jsx)("em",{children:"remote"}),Object(d.jsx)("ul",{children:Object(d.jsx)("li",{children:Object(d.jsx)("code",{children:"git remote add origin https://github.com/usernamehere/projectnamehere.git"})})})]}),Object(d.jsxs)("li",{children:["You can see the manual for git commands too! ",Object(d.jsx)("code",{children:"man git branch"})]})]}),Object(d.jsx)("p",{children:"git config --global init.defaultBranch main "})]})}function T(){return Object(d.jsxs)("div",{id:"content",children:[Object(d.jsx)("h1",{children:"BDL The final countdown"}),Object(d.jsxs)("ul",{children:[Object(d.jsx)("li",{children:"Pull Request Review / Code Review example"}),Object(d.jsx)("li",{children:"New Project Example starting from GitHub"}),Object(d.jsxs)("li",{children:[Object(d.jsx)("code",{children:"git branch"})," - show a listing of all the branches"]}),Object(d.jsxs)("li",{children:[Object(d.jsx)("code",{children:"git branch -v"})," - show a list of all the branches (verbose, show more information)"]}),Object(d.jsxs)("li",{children:[Object(d.jsx)("code",{children:'git commit -m "Improve README"'})," - create a new commit and give it a commit message at the same time!"]}),Object(d.jsxs)("li",{children:[Object(d.jsx)("code",{children:"git log"})," - Shows the commit history of a repository"]}),Object(d.jsxs)("li",{children:[Object(d.jsx)("code",{children:"git diff"})," - Show the differences between two states in git",Object(d.jsx)("ul",{children:Object(d.jsx)("li",{children:"For example, show the modifications you have done without committing"})})]}),Object(d.jsxs)("li",{children:[Object(d.jsx)("code",{children:"git checkout"})," - Can do many different things",Object(d.jsxs)("ul",{children:[Object(d.jsxs)("li",{children:[Object(d.jsx)("code",{children:"git checkout [Branchname]"})," - This one switches the currently active branch"]}),Object(d.jsxs)("li",{children:[Object(d.jsx)("code",{children:"git checkout -b [Branchname]"}),' - This one creates a new branch called "Branchname"']}),Object(d.jsxs)("li",{children:[Object(d.jsx)("code",{children:"git checkout -- [path_to_file]"})," - This one reverts the changes you have made to a file"]})]})]}),Object(d.jsxs)("li",{children:[Object(d.jsx)("code",{children:"git rm"})," - Remove a file from git"]}),Object(d.jsxs)("li",{children:["Conflicts",Object(d.jsxs)("ul",{children:[Object(d.jsx)("li",{children:"Conflicts happen when a file is modified at the same time in two different places and those changes are merged"}),Object(d.jsx)("li",{children:"For example, Kai edits REAMDE.md in GitHub and Joel edits README.md in the local repository and tries to merge the changes"}),Object(d.jsx)("li",{children:"What needs to happen is we need to Resolve the Conflict"}),Object(d.jsxs)("li",{children:["When a conflict happens, you need to:",Object(d.jsxs)("ol",{children:[Object(d.jsx)("li",{children:"manually fix the conflicted files"}),Object(d.jsx)("li",{children:"stage (git add) the fixed conflicted files"}),Object(d.jsx)("li",{children:"make a new commit"}),Object(d.jsx)("li",{children:"remember to use git status to help you along"})]})]})]})]})]})]})}function C(){return Object(d.jsxs)("div",{id:"content",children:[Object(d.jsx)("h1",{children:"UIB - Boilerplate"}),Object(d.jsxs)("ul",{children:[Object(d.jsxs)("li",{children:["Boilerplate?",Object(d.jsx)("ul",{children:Object(d.jsx)("li",{children:"Repeated code that doesn't really do much, but is necessary"})})]}),Object(d.jsxs)("li",{children:["The user of a website is Usually human, but not always",Object(d.jsxs)("ul",{children:[Object(d.jsx)("li",{children:"Web Crawlers / Bots"}),Object(d.jsx)("li",{children:"For example, the Google Robot needs to understand your site"}),Object(d.jsx)("li",{children:"Screen scrapers user your website too, maybe"})]})]}),Object(d.jsxs)("li",{children:["Human users for websites vary a lot!",Object(d.jsxs)("ul",{children:[Object(d.jsx)("li",{children:"Different levels of sightedness (completely blind, partially or...)"}),Object(d.jsx)("li",{children:"Colour blindness"}),Object(d.jsx)("li",{children:"Different size screens"}),Object(d.jsx)("li",{children:"Cultural differences matter too"}),Object(d.jsx)("li",{children:"Connections speeds"})]})]})]}),Object(d.jsx)("h2",{children:"HTML"}),Object(d.jsxs)("ul",{children:[Object(d.jsx)("li",{children:"Based on SGML"}),Object(d.jsx)("li",{children:"Really exploded after HTML 4"}),Object(d.jsxs)("li",{children:["There used to be HTML 4 variants, such as",Object(d.jsxs)("ul",{children:[Object(d.jsx)("li",{children:"Frameset"}),Object(d.jsx)("li",{children:"Transitional"}),Object(d.jsx)("li",{children:"Strict"})]})]}),Object(d.jsxs)("li",{children:["There used to be XHTML",Object(d.jsxs)("ul",{children:[Object(d.jsx)("li",{children:"XML-compatible HTML"}),Object(d.jsx)("li",{children:"Normal HTML is NOT XML compatible"}),Object(d.jsx)("li",{children:"XHTML is pretty much dead"})]})]}),Object(d.jsx)("li",{children:"Now we have HTML 5.2 (5.3 is coming!)"}),Object(d.jsxs)("li",{children:["HTML is continuously developed",Object(d.jsx)("ul",{children:Object(d.jsx)("li",{children:"New elements are being added"})})]}),Object(d.jsxs)("li",{children:["HTML Elements",Object(d.jsxs)("ul",{children:[Object(d.jsx)("li",{children:"Start tag, End tag, Content, Attributes"}),Object(d.jsxs)("li",{children:["Paragraph: ",Object(d.jsx)("p",{title:"Hi!",children:"Bananas are great!"})]}),Object(d.jsxs)("li",{children:["Image: ",Object(d.jsx)("img",{src:"..",alt:""})]}),Object(d.jsx)("li",{children:"Empty elements, like img have no ending tag and no content"}),Object(d.jsxs)("li",{children:["Some elements can be self-closing as well, meaning that ending tag is integrated into the starting",Object(d.jsxs)("ul",{children:[Object(d.jsxs)("li",{children:[Object(d.jsx)("p",{}),"   this is a self-closing element/tag"]}),Object(d.jsxs)("li",{children:["Especially for line breaks this is common: ",Object(d.jsx)("br",{})," "]}),Object(d.jsx)("li",{children:'Self closing tags work, but might not be the "correct" way'}),Object(d.jsx)("li",{children:"Self closing tags are common especially because of React"}),Object(d.jsxs)("li",{children:["In React closing tags are ",Object(d.jsx)("em",{children:"mandatory"})," and we are actually not writing HTML (its JSX)"]})]})]})]})]})]}),Object(d.jsx)("h2",{children:"How the internet works (again!)"}),Object(d.jsxs)("ul",{children:[Object(d.jsx)("li",{children:"HTML documents are rendered by a web browser"}),Object(d.jsx)("li",{children:"The browser downloads the HTML file and processes it as it is downloaded"}),Object(d.jsx)("li",{children:"Browsers are super smart, erven if the HTML is a BIT broken, it might still work"}),Object(d.jsx)("li",{children:'HTML is "evaluated" or "interpreted" by the browser'})]}),Object(d.jsx)("h2",{children:"Working with code - VSCode"}),Object(d.jsxs)("ul",{children:[Object(d.jsx)("li",{children:"We will be using Visual Studio Code"}),Object(d.jsx)("li",{children:"VSCode is an IDE - Integrated Development Environment"}),Object(d.jsx)("li",{children:"Alternatives include Atom and Sublime"}),Object(d.jsx)("li",{children:"HTML files are edited often by hand, even though visual editors exist"}),Object(d.jsxs)("li",{children:["Setting up VSCode",Object(d.jsxs)("ul",{children:[Object(d.jsxs)("li",{children:["You have extensions (plugins)",Object(d.jsxs)("ul",{children:[Object(d.jsx)("li",{children:"Live Server"}),Object(d.jsx)("li",{children:"Prettier"}),Object(d.jsx)("li",{children:"So, so many others"})]})]}),Object(d.jsxs)("li",{children:["You have user settings",Object(d.jsx)("ul",{children:Object(d.jsx)("li",{children:"Color theme etc."})})]}),Object(d.jsxs)("li",{children:["You have workspace settings",Object(d.jsxs)("ul",{children:[Object(d.jsx)("li",{children:"Workspace is basically just a folder"}),Object(d.jsx)("li",{children:"Here you can define per-project color themes for example"}),Object(d.jsx)("li",{children:"Lets set the workspace color!"}),Object(d.jsx)("li",{children:"The workspace directory (.vscode) is almost always ignored in git (.gitignore)"})]})]}),Object(d.jsxs)("li",{children:["You have keyboard shortcuts",Object(d.jsxs)("ul",{children:[Object(d.jsx)("li",{children:"Ctrl + b -- Toggle (show or hide) the side bar"}),Object(d.jsx)("li",{children:"Ctrl + f -- Find stuff within a file"}),Object(d.jsx)("li",{children:"Ctrl + Shift + f -- Find in files"}),Object(d.jsx)("li",{children:"Ctrl + p -- Find files by name inside the current workspace"}),Object(d.jsxs)("li",{children:["Ctrl + Shift + p -- ",Object(d.jsx)("em",{children:"The Command Palette"})]}),Object(d.jsx)("li",{children:"Ctrl + Shift + ` -- Toggle VSCode integrated terminal"}),Object(d.jsx)("li",{children:"Ctrl + + -- Zoom in"}),Object(d.jsx)("li",{children:"Ctrl + - -- Zoom out"}),Object(d.jsx)("li",{children:"When working with code: Ctrl + Shift + 7"})]})]}),Object(d.jsxs)("li",{children:["Recommendation: Go through the settings of vscode at your own time sometimes!",Object(d.jsxs)("ul",{children:[Object(d.jsx)("li",{children:"Repeat this every now and then"}),Object(d.jsx)("li",{children:"Find out what works for you"})]})]}),Object(d.jsxs)("li",{children:["Introducing Emmet!",Object(d.jsxs)("ul",{children:[Object(d.jsx)("li",{children:"Built into vscode"}),Object(d.jsx)("li",{children:"Started life as a plugin (I think...)"}),Object(d.jsx)("li",{children:"Makes writing code (or markup like HTML) easier and faster"}),Object(d.jsxs)("li",{children:["Use ",Object(d.jsx)("code",{children:"p*5"})," to create 5 Paragraph elements quickly"]}),Object(d.jsx)("li",{children:"Cheat sheet: https://docs.emmet.io/cheat-sheet/"}),Object(d.jsxs)("li",{children:["For example, Create an empty html file and use the ",Object(d.jsx)("code",{children:"!"})," emmet abbreviation",Object(d.jsx)("ul",{children:Object(d.jsx)("li",{children:"This creates the common HTML 5 boilerplate"})})]})]})]})]})]})]}),Object(d.jsx)("h2",{children:"Examining the HTML 5 Boilerplate!"}),Object(d.jsx)("h2",{children:"Working with HTML"}),Object(d.jsxs)("ul",{children:[Object(d.jsxs)("li",{children:['files can be named anything, but they usually have the ".html" ending',Object(d.jsx)("ul",{children:Object(d.jsx)("li",{children:'"joel-file.html"'})})]}),Object(d.jsxs)("li",{children:["index.html is a special name",Object(d.jsxs)("ul",{children:[Object(d.jsx)("li",{children:'When an HTML file is called "index.html" the web server understands that it is the default html file to load from that folder'}),Object(d.jsx)("li",{children:'"index.html" might not be displayed in the URL (for convenience)'})]})]}),Object(d.jsx)("li",{children:"You might run into historical files that end in .htm OR .htmlx or .xhtml"}),Object(d.jsxs)("li",{children:["How to actually see a website you have done?",Object(d.jsxs)("ul",{children:[Object(d.jsx)("li",{children:"Locally opening the file on a browser"}),Object(d.jsxs)("li",{children:["Locally running a web server",Object(d.jsxs)("ul",{children:[Object(d.jsxs)("li",{children:["From within VSCode",Object(d.jsx)("ul",{children:Object(d.jsx)("li",{children:'use the "live reload" extension'})})]}),Object(d.jsxs)("li",{children:["From the command line",Object(d.jsx)("ul",{children:Object(d.jsxs)("li",{children:['Install the "live-server" program with NPM:',Object(d.jsx)("ul",{children:Object(d.jsx)("li",{children:"npm install --global live-server"})})]})})]})]})]})]})]}),Object(d.jsx)("li",{children:'"Lorem ipsum" placeholder text'}),Object(d.jsx)("li",{children:"Placeholder images, services such as placekitten work well"}),Object(d.jsxs)("li",{children:["Clean code is super important",Object(d.jsxs)("ul",{children:[Object(d.jsx)("li",{children:"Well indented"}),Object(d.jsx)("li",{children:"Much easier to understand"}),Object(d.jsx)("li",{children:"Much easier to maintain"}),Object(d.jsx)("li",{children:"It really helps with finding errors too"}),Object(d.jsx)("li",{children:"Helps with consistency and"}),Object(d.jsx)("li",{children:"Helps with working with others as well"})]})]})]}),Object(d.jsx)("h2",{children:"CSS - Cascading Style Sheets"}),Object(d.jsxs)("ul",{children:[Object(d.jsx)("li",{children:"Version 3 is the current one and CSS is being actively developed"}),Object(d.jsx)("li",{children:"CSS describes how HTML elements are to be displayed"}),Object(d.jsxs)("li",{children:["Three different ways of defining CSS",Object(d.jsxs)("ul",{children:[Object(d.jsxs)("li",{children:["External styles",Object(d.jsxs)("ul",{children:[Object(d.jsx)("li",{children:'A separate file for CSS, such as "main.css"'}),Object(d.jsxs)("li",{children:["Loaded into your webpage via the ",Object(d.jsx)("code",{children:"<link>"})," element"]}),Object(d.jsx)("li",{children:"The most common way in 2021"})]})]}),Object(d.jsxs)("li",{children:["Internal styles",Object(d.jsxs)("ul",{children:[Object(d.jsx)("li",{children:"Defined directly inside HTML files"}),Object(d.jsxs)("li",{children:["Inside ",Object(d.jsx)("code",{children:"<style>"})]})]})]}),Object(d.jsxs)("li",{children:["Inline styles",Object(d.jsx)("ul",{children:Object(d.jsx)("li",{children:"Written directly on the HTML element"})})]})]})]}),Object(d.jsx)("li",{children:Object(d.jsxs)("code",{children:["p ",String.fromCharCode(219)," color: crimson; ",String.fromCharCode(221)]})}),Object(d.jsx)("li",{children:'The "p" is a selector, it selects which elements are targeted by the rule'}),Object(d.jsxs)("li",{children:["The ",Object(d.jsxs)("code",{children:[String.fromCharCode(219)," color: crimson; ",String.fromCharCode(221)]})," is the declaration block - it contains one or more declarations separated by semicolons."]}),Object(d.jsx)("li",{children:"Each declaration includes a CSS property name and a value, separated by a colon"}),Object(d.jsx)("li",{children:"Multiple CSS declarations are separated with semicolons, and declaration blocks are surrounded by curly braces."})]})]})}var A=t(2),P=t(3);function I(){return Object(d.jsx)("div",{id:"content",children:Object(d.jsx)(A,{remarkPlugins:[P],children:B})})}var B='\n# UIB Content - part 1\n\n## Separation of concerns\n\n- It is a good idea to keep structure (HTML) and visuals (CSS) separate\n    - Separate people often work on these\n    - Better organization\n    - With external CSS; you only have to update one place\n    - It is also faster to load websites when the files are separate (cache; caching)\n    - It\'s clearer\n\n- ! CONTENT IS KING !\n    - With the exception of art websites, the content is what truly matters most\n    - Generally, it is better to have fantastic content than fantastic visuals\n    - However, visuals make the content better too!\n    - The structure of content is important for Search engines and humans\n    - HTML and CSS are *strongly* connected, and sometimes HTML needs to accommodate CSS\n\n- Semantics\n    - The art of using the right tag in the right place\n    - This can be difficult, depends on the situation\n    - Let us strive to do our best and select good elements!\n\n- This is where as a developer you develop your own skills with experience a lot!\n\n## HTML Continued\n- `title` HTML attribute, can be used in Many different tags (such as `p`)\n- `<br>` - Break row, mostly used inside paragraphs\n- `<hr>` - Horizontal rule, it draws a line! Useful for separating content\n- `<pre></pre>` - Preformatted text!\n    - By default, uses a Monospaced font\n    - Preserves whitespace\n    - Often used for text art for example\n- LISTS\n    - `<ul>` Unorganized list\n    - `<ol>` Organized list\n    - `<li>` List item\n    - Often nested within each other!\n- Often projects or companies have their own style guide\n    - For example https://google.github.io/styleguide/htmlcssguide.html\n    - Personally, I just use my own judgement\n    - HTML style varies a bit from developer to developer\n    - Old project? Follow the style that is already there\n- Indentation and nice code is important\n- Especially when looking at the original source\n\n## CSS - "Cascading Style Sheets"\n- Three types\n    - External (link tag)\n    - Internal (style tag)\n    - Inline (style attribute)\n- Example: `p { color: red; }`\n    - Here `p` is a selector\n    - Here `{ color: red; }` is the declaration\n    - Here `color` is the property\n    - Here `red` is the value\n- CSS can be applied in multiple different ways at the same time\n    - (internal, external and inline)\n    - example: dw.com has all three in use at the same time\n- New thing: commenting out CSS code!\n    - Use this style: /* CSS here */\n    - VSCode shortcut: Ctrl + Shift + 7\n- Reminder: "Cascading"\n    - Styles cascade down from parent element to descendants\n    - For example, the Body can have a red color\n    - And then all of its descendents will also be red',M=t(2),R=t(3);function E(){return Object(d.jsx)("div",{id:"content",children:Object(d.jsx)(M,{remarkPlugins:[R],children:D})})}var D='\n# UIB content 2\n\n## New CSS Stuff!\n- Elements with an "id" attribute\n    - New HTML attribute called `id`\n    - One element can only have one ID\n    - *Unique*: One ID *SHOULD* only be used by one element in an HTML file\n    - Values are alphanumeric (alphabet and numbers)\n    - Avoid \xfc \xf6 \xe4 etc, keep them from a to z (american alphabet...)\n    - Generally, these tend to be in english\n    - It\'s good to keep them descriptive, even if they are a bit long\n    - Getting more rare, still used but not super much\n    - ID is more powerful than the class when it comes to CSS\n    - ID CSS overrules class CSS\n- Elements with "class"\n    - New HTML attribute called `class`\n    - You can have multiple elements in the same HTML file with the same class\n    - You can have multiple classes in the same HTML element (tag)\n        - Different classes for one element are separated with a space\n            - For example: `class="important hilight"`\n    - Values are alphanumeric (alphabet and numbers)\n    - Avoid \xfc \xf6 \xe4 etc, keep them from a to z (american alphabet)\n    - Generally, these tend to be in english\n    - It\'s good to keep them descriptive, even if they are a bit long\n    - Much more popular\n- CSS Selectors\n    - ID: `id="title"` --\x3e `#title`\n    - Class: `class="important"` --\x3e `.important`\n\n## New css selector type\n- "Descendent combinator" CSS selector\n- Looks like this: `ol li { color: blue; }`\n    - Here "li" is descended from "ol"\n\n## NEW CSS!\n- `font-weight` -- defines the font weight\n    - Values are usually "bold" or "normal", but can be "bolder" for example\n- `background-color` -- defines the background color\n    - Used like "color"\n- `list-style-type` -- defines how the "bullet points" of a LIST look like\n    - Values like `circle` and `square`\n    - Also values like `"- "` work too!\n        - Any text characters\n        - Emojis are normal text characters! (Unicode)\n        - \ud83d\ude3a\n\n## HTML - (hyper)links\n- Anchor element: `<a>`\n    - "a" is the element\n    - "<a>" is the tag\n- The target of a link is defined in an attribute called `href`\n    - `<a href="staff.html">Staff</a>`\n- Originally used just for jumping around inside one file, kind of like bookmarks inside a PDF\n    - Still can be used in this way by referencing IDs!\n    - `<a href="top">Click to go up</a>`\n- Now, more commonly they link between files\n    - `<a href="staff.html">Staff</a>`\n- Can be used to link between different websites! (External sites)\n    - `<a href="https://wwww.google.de/">Googl</a>`\n- Can also be used to trigger different kinds of functionality, like sending an email\n    - `<a href="mailto:joel.peltonen@gmail.com">Email Joel</a>`\n        - mailto is a protocol!\n        - the href here is a URI (Universal Resource Identifier)\n        - Not a URL\n    - Other protocols (many!) exist as well, such as "tel"\n\n\n\n## Color in CSS\n- Colors can be defined in many ways\n    - Named colors / keywords: pink, blue, purple, silver, palegoldenrod...\n    - Hex colors / Hexadecimal colors: #FF   00     00\n                                       255   00     00\n                                       RED   GREEN  BLUE\n    - rgb(255, 0, 0);\n- Transparency\n    - CSS property\n        - `opacity` -- "How opaque something is"\n        - Ranges from 1.00 to 0.00, for example "0.50"\n    - CSS color\n        - rgba - Red,   Green,  Blue,   Alpha\n                 0-255, 0-255,  0-255,  0-1\n- Other color schemes\n    - Self study\n    - CMYK\n    - HSL\n    - HSLA\n\n## Important! \n    In CSS it matters in what order your declarations are in\n\n## CSS Pseudo classes\n- link states are a great example of these!\n    - visited link\n        - CSS with pseudoclass: `a:visited { color: black; }`\n    - active link\n        - CSS with pseudoclass: `a:active { color: black; }`\n    - hovered link#\n        - CSS with pseudoclass: `a:hover { color: red; }`+\n- Try out link pseudoclass styles in different orders\n    - visited after active\n    - active after visited\n    - hover before either\n    - hover after either \n    - etc\n    - the order matters!\n',N=t(2),L=t(3);function U(){return Object(d.jsx)("div",{id:"content",children:Object(d.jsx)(N,{remarkPlugins:[L],children:F})})}var F='\n# UIB day 4\n\n## Updating a forked repository from the original\n - Automatic\n    - Create a new Pull Request in GitHub\n    - Click on "Switch base", if it is available to you#\n    - After merging the Pull Request, update your local repository using git pull\n - Manual\n    - Copy the changes manually\n    - use git commands (Search Google for assistance here)\n\n## CSS Units\n - CSS has a lot of units to use\n - We will be looking at "px", "%", "em", "rem", "vw", "vh"\n - New CSS: `width`, `height`, `font-size`\n - New HTML: `<div>`\n    - No semantic meaning\n    - Container element, wrapper\n    - Often deeply nested\n    - Very very common in the real world\n- Pixels or `px`\n    - Static length or static size\n    - Basically, these are the unit of the web\n    - Reference pixels, Not Device pixels\n        - Mobile phone with 4k\n        - https://developer.mozilla.org/en-US/docs/Glossary/CSS_pixel\n        - Affected by zoom!\n    - Values smaller than one pixel can exist and are fairly common\n        - For example `font-size: 15.2px;`\n- Percentages or `%`\n    - Dependant on the parent\n    - Dynamic length or dynamic size\n    - Affected by zoom levels\n    - You can be more accurate than 1%, so "50.04%" is valid\n- For most users, the default font size of a browser is "16px"\n    - The root font size of a page is defined by the `<html>` element\n    - You can define this yourself with CSS\n    - The font settings _cascade_ down from the `<html>` element\n- Font size with percentages\n    - Like widths, these are dependent on the parent!\n    - Gets complicated with nesting!\n\n- `em` and the `rem` units\n    - Typography units\n    - Often used in font sizing, very useful there\n    - Not common for defining layouts\n        - Except for a few exceptions\n    - Units that come from typesetting originally\n    - rem - "root em" units\n        - Relative to root font size\n        - Can be tricky to design around if you don\'t have a set root font size\n            - Users might have different default font sizes\n        - A size that is relevant to the ROOT font size\n        - Can be thought of as percentages relevant to the root font size\n            - `1.2rem` is 120% of the root font size\n            - `0.5rem` is 50% of the root font size\n            - `.5rem`  is 50% of the root font size\n            - `1.337rem` is 133.7% of the root font size\n        - Common for especially font sites\n        - Sometimes used for icon sizes as well\n    - em - "em" units\n        - Relative to parent font size\n        - If the parent font size is "20px"\n            - 0.1em == 2px (10% of 20px)\n            - 1em == 20px (100% of 20px)\n            - 2em == 40px (200% of 20px)\n        - Pretty much the same as percentages when it comes to font size\n            - 1em works exactly like 100% *for text*\n        - Originally from how wide the "M" character is for a font\n        - Now in CSS it is just the font size\n        - Good use case: Icon images inside text elements\n            - Relevant to the text size of the parent\n\n- `vw` -  `vh`\n    - percentages of the viewport height and width in pixels\n    - values from 0 to 100\n    - viewport width\n        - sizing relative to the viewport width\n        - the parent size does not matter\n    - viewport height\n        - sizing relative to the viewport height\n        - the parent size does not matter\n    - Commonly used in creating full screen landing pages\n    - Also commonly used in full screen elements, such as\n        - cookie warnings\n        - overlay images\n        - overlay dialogs\n    - Also commonly used in positioning\n\n## Developer Tools! Devtools! Browser tools! Developer console!\n- Right click an element on the page and select "Inspect element" from the context menu\n- Alternatively, press F12 on your keyboard\n- Can be positioned in the bottom or the right of your browser\n- Can be detached and exist in a separate window from your browser\n- INSPECTOR tab\n    - HTML and CSS\n    - Edit CSS values\n    - Add new CSS rules and values\n    - Add new CSS blocks\n    - View the computed CSS values for an element\n    - View the Font of an element\n    - Edit HTML\n- NETWORK tab - shows you what is being loaded\n\n*Task time here*\n\n- Let us have a look at the CNN and the Immoscout24 websites',W=t(2),H=t(3);function J(){return Object(d.jsx)("div",{id:"content",children:Object(d.jsx)(W,{remarkPlugins:[H],children:Y})})}var Y='\n# UIB - Images\n\n## Basic HTML, CSS with images\n- Downloading images\n    - Context menu depends on what thing you rightclicked\n    - Normal images have a "Save image as" option\n- Normal HTML images: `<img src="image.jpg2" alt="Here!">`\n    - The ALT attribute is important\n        - Provides a text alternative if the image doesn\'t work\n        - Especially needed if the user has a screen reader\n        - If the image is broken or loads very very slowly, this can provide context too\n- Width and height\n    - You can add width and height as attributes\n        - `<img src="image.jpg" alt="Here!" width="200" height="100">`\n            - No units!\n        - Width/height when give as attributes (inline) they generally should be the real sizes of the image\n            - Often used when images are part of the content\n        - The space for the image is reserved\n    - You can also use CSS to size images\n        - Even when they have an inline size definition!\n        - CSS overrules HTML width/height\n    - In the real world, in perfect examples, you have both defined\n        - This is optimal for making the site work in all cases\n    - Avoid having huge images squeezed into small spaces\n        - This makes websites load very slowly\n        - Depending on the situation, you can have different sizes for the same images\n- Absolute and relative paths\n    - Absolute: Works from anywhere (on your own website)\n        - Full URL\n        - `<img src="https://www.example.org/image.jpg" alt="Example images!" width="200" height="100">`\n    - Relative:\n        - Relative to the current URL\n        - Local URL\n        - `<img src="./../pics/image.jpg" alt="Example images!" width="200" height="100">`\n\n\n## New CSS!\n- Borders!\n    - Rule: `border`\n    - Value: `[width] [style] [color]`\n    - Width can be defined with `px`, `rem`, `em` etc CSS units\n    - Style is mandatory\n        - solid\n        - dashed\n        - dotted\n        - double\n        - groove\n        - etc\n    - Color is optional, defaults to current font color\n        - Use the usual CSS color rules (named, hex, rgb, etc...)\n    - Can be defined separately as well\n        - `border-color`\n        - `border-width`\n        - etc\n- Border radius!\n    - `border-radius: 15px;`\n    - most commonly done with pixels or with percentages\n        - `border-radius: 50%` - very common with profile pictures\n    - Value can be defined separately for the corners\n    - `border-radius: 15px 5px 15px 5px;`\n    - `border-radius: 40% 15%;`\n- Object-fit and Width AND height\n    - for example, an image within a parent div\n    - makes the image fit in the specified way\n    - `object-fit`, `width` and `height` are used together\n    - https://developer.mozilla.org/en-US/docs/Web/CSS/object-fit\n\n        ```\n        <div style="border: 1px solid red; width: 90vw; height: 200px;">\n            <img\n                src="https://placekitten.com/500/200"\n                alt="Kitten"\n                style="object-fit: cover; width: 100%; height: 100%;"\n            >\n        </div>\n        ```\n    - Can be used for other things than images too (videos)\n- Image links\n    - Just wrap an image with an `a` link tag\n- Using float\n    - CSS `float`\n    - "float" is a thing that was designed to wrap text around an image\n    - Mostly to be used when you control the image and the text\n    - Avoid using float for _anything_ else (design)\n\n## Image formats\n\nMost common and important formats used in the web\n\n    - JPG\n        - Raster\n        - Binary files\n        - This compression works best for photos\n    - PNG\n        - Raster\n        - Binary files\n        - This compression works best for logos/cartoons/screenshots/gradients etc (not photos)\n        - Can be transparent\n        - Can be animated (rare, sometimes .apng or .mpng etc)\n    - GIF\n        - Raster\n        - Binary files\n        - Can be transparent\n        - Can be animated\n    - SVG\n        - Inline or Normally\n        - Just text files (XML)\n        - Vector\n        - Can be transparent\n        - Can be animated (with CSS or JavaScript)\n\n\n\n\n\n## Quick into to GIMP\n- Basic image manipulation\n    - Crop\n    - Draw\n    - Export\n    - Color picker\n    - Add text\n    - Work with layers\n    - Resizing an image to create a thumbnail (scaling)\n- Raster files!\n- No animation\n- In Ubuntu; the screenshot tool is nice!\n\n\n\n## Core CSS Basic awesome greatness\n- More specific selectors\n- Descendant selector example: `#mainpage p { color: red; }`\n    - All paragraphs descended from the #mainpage element\n- Comma separated selectors: `.fool, p { color: blue; }`\n    - All elements with the class "fool" and all paragraphs\n- To change the mouse cursor: `cursor: pointer;`\n- To change the text style: `text-decoration: underline;` (or none)\n\n\n\n\n\n\n',z=t(2),q=t(3);function G(){return Object(d.jsx)("div",{id:"content",children:Object(d.jsx)(z,{remarkPlugins:[q],children:V})})}var V='\n# UIB Content - a11y\n\n## Accessibility\n- Goal: provide equal access and opportunity to people with disabilities\n- Goal: make the web accessible\n- Often shortened to a11y in text (A, 11 characters, Y)\n- Semantic elements have good a11y support already\n\t- Content elements with a meaning\n\t- "h1" instead of "div"\n\t- "p" instead of "div"\n\t- "button" instead "div"\n\t- real inline elements instead of "span"\n- Semantically important attributes\n\t- "alt" for images\n\t- Good for screen readers\n\t- Also good for SEO!\n- Screen reader example: ChromeVox extensions\n\t- Operating systems have their own screen readers too\n\t- NVDA (windows)\n\t- Orca (linux)\n\t- Voiceover (osx)\n\t- WebAnywhere\n- Websites should be usable with just the keyboard too!\n- Use ARIA attributes to help create an accessible webnsite\n\n\n\n\n\n\n\n',$=t(2),X=t(3);function K(){return Object(d.jsx)("div",{id:"content",children:Object(d.jsx)($,{remarkPlugins:[X],children:_})})}var _='\n# UIB - Fonts and boxes\n\n## Quick tip\n\n- Google Fonts for custom fonts\n\n## Everything is a box!\n\n- Easy to see with inspecting and setting Dev tools CSS\n  - `* { border: 1px solid red !important; }`\n  - `div { border: 1px solid blue !important; }`\n  - `span { border: 1px solid green !important; }`\n\n## Containing content\n\n- Semantic elements, let\'s learn a few\n- `<main>`\n  - represents the main content of a page\n  - often combined with "skipnav" technique\n  - nav = your navigation menu\n    - `<nav>` - semantic element used for wrapping your navigation section\n  - used for wrapping your main content\n  - "shrink wrapping" / wrapping\n    - put all of your content inside the main\n  - often you can have classes and/or ids for your main element\n    - <main class="container"></main>\n  - One (visible) main per page\n\n## Stop content busting out of its box!\n\n    width: 40vw;       /* Set box width */\n    height: 40vh;      /* Set box height */\n    margin: auto;      /* Center this box inside its parent box */\n    overflow: hidden;  /* Prevent content from overflowing out of the box! */\n\n## Elements\n\n- Two types of elements\n  - Block\n    - Always start (on) a new line\n    - Take up the full width available\n      - stretch out to the left and to the right as much as they can\n      - meaning it has a width of 100% by default\n      - the height is defined by the content automatically OR by the developer\n  - Inline\n    - Start within an existing block-level element (they don\'t start a new line)\n\n### BLOCKS\n\n- main, nav, div, p, hr, lists(ul, ol, li), h1-h6, pre\n- <section>\n    - a section of the page which doesn\'t have a more specific semantic element to use\n    - often these would have a heading\n- <article>\n    - a self-contained composition in a page, which is intended to be independently redistributable or reusable\n- <aside>\n    - a part of a document where the content is only indirectly related to the main content\n- <header>\n    - defines the top part of a page\n    - often repeated in many pages\n- <footer>\n    - defines the bottom part of a page\n    - often repeated in many pages\n\n- SO SO SO MANY MORE!\n\n### INLINE\n\n- span, a, em, br, img\n- strong, b\n- sup and sub\n- input\n\n**You do not need to know all of these**\n\n**Self-learning** Have a look at MDN to see what Block and Inline elements exist\n',Q=t(2),Z=t(3);function ee(){return Object(d.jsx)("div",{id:"content",children:Object(d.jsx)(Q,{remarkPlugins:[Z],children:ne})})}var ne='\n# UIB - The Box Model\n\n## Modeling boxes - the box model\n\n- What is the box model?\n        - Everything is a box\n        - Box model = how to calculate the size of a box\n        - Calculated from\n                - The content & CSS\n                - Padding\n                - Border\n                - Margin\n- Measuring box sizes is hard\n- Having a fluid / dynamic content area is better for the user\n- Two ways of calulating box sizes\n        - box-sizing: content-box\n                - width = content\n        - box-sizing: border box\n                - width = content + padding + border\n        \n    <main\n      id="main"\n      style="\n            background-color: lightblue;\n            width: 50%;\n            padding: 10px;\n            border: 10px solid;\n            margin: 10px;\n            box-sizing: border-box;\n      "\n    >\n              Lorem ipsum dolor sit amet consectetur adipisicing elit. Quibusdam minus\n              unde in sit ullam ut magnam dicta iusto, deleniti asperiores qui? Velit\n              nam iure similique ab alias praesentium! Molestias, asperiores! Lorem\n              ipsum dolor sit amet consectetur, adipisicing elit. Saepe perferendis, ad\n              explicabo maiores magnam amet itaque quos, non ex iusto molestiae\n              architecto nobis aliquam sunt incidunt at! Voluptatibus, quam porro.\n    </main>\n\n## Reset CSS\n        - A bit of CSS to reset browser defaults\n        - One example:\n        - `* { margin: 0; padding; 0; box-sizing: border-box; }`\n        - More complex reset CSS definitions help with browser inconsistency\n        \n## CSS shorthand\n        - example: `margin: 10px`\n                - margin-top: 10px\n                - margin-right: 10px\n                - margin-bottom: 10px\n                - margin-left: 10px\n        - example2: `margin: 10px 5px 0 50%;` - remember: TRouBLe / clockwise\n                - margin-top: 10px\n                - margin-right: 5px\n                - margin-bottom: 0\n                - margin-left: 15%\n        - example3: `padding: 10px 50px;` - Vertical - Horizontal\n                - padding-top: 10px\n                - padding-right: 50px\n                - padding-bottom: 10px\n                - padding-left: 50px\n        - border: `border: 1px solid red`\n                - border-width: 1px;\n                - border-style: solid;\n                - border-color: red;\n        - other shorthands, such as font amd backgound exist as well\n\n## Inline vs Block box model\n- The box model applies to inline elements too! Just a bit differently\n- Inline elements\n        - don\'t respond to margin-top, margin-bottom, width or height\n        - Top and bottom values do not push other elements or rows of text\n        - Inline elements are contained vertically in a line of text\n- Inline vs Block\n        - It\'s just the value of `display`\n        - Inline elements are elements with a "display" value of "inline"\n        - Block elements are just elements with a default "display" of "block"\n        - You can control this!\n        - `display: block;`\n        - `display: inline;`\n        - `display: none;`\n        - `display: inline-block;`\n                - Hybrid between the block and the inline elements\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n',te=t(2),oe=t(3);function se(){return Object(d.jsx)("div",{id:"content",children:Object(d.jsx)(te,{remarkPlugins:[oe],children:ie})})}var ie='\n# UIB - More backgrounds!\n\n## Backgrounds yeah!\n\n- `background-image` - for decoration, not content\n        - You can have multiple background images and a background color!\n        - background-color: lightcyan;\n        - background-image: url("bg.png"), url("bg2.png");\n- `background-repeat` - controls how our background image is repeated\n        - background-repeat: no-repeat; - does not repeat\n        - background-repeat: repeat-x; - repeats horizontally\n        - background-repeat: repeat-y; - repeats vertically\n        - background-repeat: round; - repeats, but rounds the image sizes\n        - background-repeat: space; - repeats, images get spaced according to the available space\n- `background-size`\n        - background-size: 100px; - defines a width of 100px, height gets automatically calculated\n                - maintains aspect ratio\n        - background-size: 100px 100px; - width 100px, height 100px\n                - does not maintain aspect ratio\n        - background-size: cover - the background attempts to cover the containing box\n        - background-size: contain - the background attempts to be shown completely in the containing box\n- background-position\n        - background-position: top; - centered, at the top of the containing box\n        - background-position: center; - centered horizontally and vertically\n        - background-position: left; - centerd vertically, to the left of the box\n        - background-position: right; - centerd vertically, to the right of the box\n        - background-position: 10px 100px; - 10 px from the left, 100px from the top        \n- setting multiple attributes with the `background` shorthand\n        - `background: no-repeat center url("bg.png"), \n                       no-repeat center url("bg2.png");`\n        - background: green;\n        - Check MDN when and if you want to use this\n\n## Gradients!\n\n- Remember, transparency works here too!\n\n- linear gradient\n        - background: linear-gradient(#000, #F00);\n        - background: linear-gradient(#000, #F00, yellow);\n- radial gradient\n        - background: radial-gradient(red, #000, rgba(0,0,0,0));\n- conic gradient\n        - background: conic-gradient(#000, #f00, #00f, #000);\n- When creating gradients, a CSS Gradient tool is really helpful!\n        \n        \n## Positioning\n\n- Coordinate positioning\n        - Usually set with either "top" and "left" OR "bottom" and "right"\n- CSS `position`\n        - Often combined with coordinates\n        - `position: static;` - default value, element follows normal document flow\n        - `position: absolute;` - element is removed compltely from the normal flow \n                - is positioned with coordinates\n                - the element takes no space in normal document flow\n        - `position: relative;` - element is positioned relative to itself\n                - the space taken up by the element is taken normally\n        - `position: fixed;` - removed from normal document flow, relative to the viewport\n                - is positioned with coordinates\n                - ignores parent/ancestor scrolling\n        - `position: sticky;`\n                - not supported by *everything*\n                - is positioned with coordinates\n                - ignores parent/ancestor scrolling until it hits the viewport edge, then it kind of becomes fixed\n        \n## Z-index -- CSS layering\n \n- Z-axis coordinates, higher is closer to the user, ontop of lower\n- Numbered values starting from 0\n- Default is actually (auto)\n- Values can be negative\n- Like layering\n- For big sites, it\'s best to have a System:\n        - auto for basic content\n        - 100-999 for the overlays (backgrounds)\n        - 1000-9999 for dialogs (cookie accept)\n        - 10000-99999 for modals (alert, such as "you have signed out automatically")\n\n## Positioning- Coordinate positioning\n        - Usually set with either "top" and "left" OR "bottom" and "right"\n- CSS `position`\n        - Often combined with coordinates\n        - `position: static;` - default value, element follows normal document flow\n        - `position: absolute;` - element is removed compltely from the normal flow \n                - is positioned with coordinates\n                - the element takes no space in normal document flow\n        - `position: relative;` - element is positioned relative to itself\n                - the space taken up by the element is taken normally\n        - `position: fixed;` - removed from normal document flow, relative to the viewport\n                - is positioned with coordinates\n                - ignores parent/ancestor scrolling\n        - `position: sticky;`\n                - not supported by *everything*\n                - is positioned with coordinates\n                - ignores parent/ancestor scrolling until it hits the viewport edge, then it kind of becomes fixed',ae=t(2),re=t(3);function le(){return Object(d.jsx)("div",{id:"content",children:Object(d.jsx)(ae,{remarkPlugins:[re],children:ce})})}var ce='\n# UIB10 - UI/UX - Intro to UI / UX Again!\n\n## *Interface*\n\n- Boundary between two separate concepts / components\n    - Person / Information about a company\n    - Person / Computer \u2014> Mouse, Keyboard (Human Interface Device)\n    \n## User Interface (UI)- Human - Computer interaction\n\n- Human and a website\n    - Visual (to see, a Graphical User Interface [*GUI*])\n    - Tactile (to touch, Phone tactile feedback and Braille displays)\n    - Auditory (to hear)\n- Websites are interfaces between people and information\n\n## User eXperience (UX)\n\nSee link at [https://userinyerface.com/game.html](https://userinyerface.com/game.html)\n\n## Fonts (continued)\n\nDifferent faces for different meanings, font styles:\n\n- Serif\n    - Has serifs\n    - "look authoritative, professional, suggest the weight of history or experience" - Adobe\n    - Often used in the body of newspapers and articles\n    - Can be more readable when there is very little room or the font is small\n- Sans Serif\n    - Does not have serifs\n    - Hard, minimalistic, modern feeling\n    - "Maybe a bit overused" - Joel\n    - Take up less space (narrower than serif)\n- Monospace\n    - Code\n    - ASCII art\n    - Data tables and lists\n- Cursive\n    - Real pretty\n    - Soft\n    - Modern or old looking\n    - Visual selection\n- Symbol\n    - Icons for example or emojis (windings for example)\n    - Pictures or pictographs instead of letters\n        - Meaning that letters are rendered as little text-images\n- Emoticons / Emoji are just unicode symbols similar to "A" or "7"\n    - Some fonts support these, some dont\n    - When a symbol is not supported by a font your browser tries to use some other font\n        - (Or fails miserably) - in the olden days Heikki T\xe4k\xe4l\xe4inen \u2014> Heikki T?k?l?inen\n- Choosing a font is a part of your UX / UI Design\n    - Mixing fonts is OK!\n        - For example: Sans-serif for headings, Serif for paragraphs\n- `font-family`\n    - Pre-installed system fonts: May not work for everybody, so use generics or fallbacks\n        - Fallback fonts; "font1", "banana revolution", "Arial"\n        - Generics: sans-serif, serif, monospace\n    - Using your own fonts injected via link or @import - they will just work\n- CSS `:root` pseudo-class\n    - Targets whatever the root element is\n    - Often used to define the default font\n- Getting more fonts: use @import or <link>\n    - the @import(s) needs to be before anything else in your CSS\n    - `@import "common.css" screen;`\n    - `@import "print.css" print;`\n\n## Icon font example - Fontawesome    \n\n    *NOTE* We are looking at *version 4* of Fontawesome.\n    Icon font, often used in websites\n    Icon fonts are popular because they load quickly, they are vectors (scalable)',de=t(2),he=t(3);function ue(){return Object(d.jsx)("div",{id:"content",children:Object(d.jsx)(de,{remarkPlugins:[he],children:me})})}var me='\n# Lessons - UI UX - Direction and stylish\n\n## Text Direction\n\n- Writing text from Left to Right and Right to Left\n    - Hebrew or Arabic\n    - HTML `dir="rtl"`\n        - Inherited from parent to children!\n    - CSS `direction: rtl;`\n    - Default is `ltr`\n    \n## Text Alignment\n\n- Align text with\n    - `text-align: center;`\n    - `text-align: justify;`\n    - `text-align: right;`\n    \n## Stylish text\n\n- `font-weight`\n    - normal, bold\n        - 100\n        - 200\n        - 300\n        - 400 \u2014 "normal"\n        - 500\n        - 600\n        - 700 \u2014 "bold"\n        - 800\n        - 900\n    - Which ones work, depends on the font **family**\n        - "Arial"\n- `font-style`\n    - italic, normal are the usual values\n    - ~~"oblique" exists, rarely used~~\n- `text-decoration`\n    - `text-decoration: underline;` is a shorthand\n        - `text-decoration-line`\n        - `text-decoration-color`\n        - `text-decoration-style`\n    - `green wavy underline`\n    - `underline overline blue`\n    - `line-through`\n- `text-transform`\n    - uppercase, lowercase, capitalize\n- `text-shadow`\n    - `1px 2px 26px #ff0000`\n        - 1px offset to the right\n        - 2px offset to the bottom\n        - 26px blur amount\n        - #ff0000 color\n- `::before` , `::after`, `content`\n    - before and after are pseudo-elements\n        - two colons for pseudo-elements\n        - one colon for pseudo-classes\n    - content defines some kind of content in relation to the selector',pe=t(2),be=t(3);function ge(){return Object(d.jsx)("div",{id:"content",children:Object(d.jsx)(pe,{remarkPlugins:[be],children:fe})})}var fe='\n# UIB - FontAwesome & Boxes revisited\n\n## Fontawesome revisited\n\n- Conveys meaning without text using icons\n- Register and sign in to use the easy method of injecting a script and FA "just works"\n    - OR: Download FA locally and use (link) it like any other CSS file (the fonts will be included automatically then too)\n- Note! You have to use the correct code (like Joel did not, thanks Rudesh!)\n- FontAwesome is a Font icon library - fonts are vectors!\n- Not the only Icon Font Library\n    - Self-study: alternatives to FA; flaticon, thenounproject.com\n    \n## Everything is a Box!\n\n- The Box Model\n- Boxes are made up of a few different parts inside out:\n    - Content / Content area\n    - Padding\n    - Border\n    - Margin\n- When we define a CSS box width, it targets the content area (padding, border, margin are not counted as the width)\n- IF we use `box-sizing: border-box` - the padding and border are included in the width\n- Different types of boxes\n    - Block (Block-level elements)\n        - div, p, section, h1...\n    - Inline (elements)\n        - b, i, span, a, strong, em...\n        - In line with text, like a part of text\n        - Cannot have height, width\n        - Padding and margin work, but top and bottom don\'t move other content away\n    - Inline blocks\n        - Mostly done ourselves with CSS\n        - Can have height, width\n        - Padding, margin work\n        - `vertical-align: middle`\n            - Aligns the inline-block  element within its current line of text (often moves the line of text a bit too!)\n    - (((( Some blocks behave like in between inline amd inline-blocks, like images ))))',je=t(2),we=t(3);function ye(){return Object(d.jsx)("div",{id:"content",children:Object(d.jsx)(je,{remarkPlugins:[we],children:xe})})}var xe='\n# UIB - UIUX - Design\n\n## Basic principles of UI design\n\n- Structure (Overall UI architecture)\n        - Organize the UI meaningully and usefully\n        - Use clear & consistent models that are recognizable\n        - Put related things together, separate unrelated things\n                - Company metadata section\n                        - About us, Jobs, Media, History, Campuses\n                - Products section\n                        - Search, Promotions, Lookbooks, etc..\n        - Differentiate dissimilar things, make similar things resemble each other\n- Simplicity\n        - Design should make simple, common tasks easy\n        - Communicate clearly and simply in the users own language\n        - Provide good shortcuts that are meaningully related to longer procedures\n- Visibility\n        - Make all needed options and materials visible\n        - Don\'t distract the user with extra or redundant information\n        - Don\'t overwhelm the user with alternatives or confuse with unneeded information\n- Feedback\n        - Keep the user informed of\n                - Actions or interpretations\n                - Changes of state\n                - Errors or exceptions that are relevat to the user\n        - Feedback should clear, concise and unambiguous (an in a language familiar to the user)\n- Tolerance\n        - Design should be flexible and tolerant\n        - Reduce the cost of mistakes and misuse by allowing undo / redo\n        - Prevent errors when possible by tolerating varied inputs and sequences\n        - Interpret all reasonable actions\n- Reuse\n        - The design should reuse internal and external componets and behaviours\n        - Maintain consistency with purpose rather than arbitrary consistency\n        - Reduce teh need for users to rethink and remember\n        \nhttps://en.wikipedia.org/wiki/Principles_of_user_interface_design\n\n- Additionally, focus on design consistency and components\n        - Elements look the same everywhere\n        - Space between elements is consistent\n        - Buttons look similar etc\n\n## Designing with Colors!\n\n- Branding is important here!\n        - Tiffany.de -- The "Tiffany" blue\n        - Fiskars.com -- The "Fiskars" orange\n        - Fazer.com -- The "Fazer" blue\n- You often have one primary or main color\n        - That doesn\'t mean to make _everything_ that color\n        - Primary color does not mean background color\n        - You can have a dark AND a light version using the same color palette!\n        - "A tamer primary color and a brighter accent color gives apps a bold, colorful look without overwhelming the content"\n- In addition to the primary color, you\'ll most likely have a set of others too!\n        - Secondary or Accent color\n        - Plus others, I\'d advise to have at least three colors\n        - Accent colors, like the The "Fiskars" orange *could* be used in\n                - Buttons\n                - Hover action hilights\n                - Controls (sliders, switches, inputs...)\n                - Hilighted text, Progress bars\n                - Links and Headlines\n- Selecting colors\n        - It\'s easiet to start with one main color / starting point\n        - It\'s easiest and simplest to use a generator\n                - coolors.co\n                - https://color.adobe.com/create/color-wheel\n                - *Self study hint* https://material.io/design/color/the-color-system.html#color-usage-and-palettes\n\n- Design guidelines document example\n        - Color palette\n        - Content examples\n        - Component examples\n        - A mature version of of this would be Material UI\n\n## More on color!\n        \n- Hue\n        - Color in its pure form\n- Saturation\n        - The intensity or purity of a hue -- vivid, bright\n        - A very saturated website: neopets.com\n- Lightness - the relative degree of black / white mixed with a give hue\n        - A lot of black - a duller color\n- Tempretarure\n        - To make a color warmer, add orange or yellow\n        - To make a color colder, add blue\n\n*notes on color*\n- Color meaning might vary from culture to culture\n- Accessibility is relevant when choosing a color palette\n- When learning, it\'s a good idea try to implement nice looking designs from other websites\n- Experiment with textures too!\n        - https://wesbos.com/\n        - Footer at fazer.com\n\n## An example on color usage - light and shadows\n\n- Shadows convey elevation\n- You can use text and box shadows to emulate a light source\n\n## Further research suggestions\n\n-  (Podcast) https://syntax.fm/show/196/design-foundations-for-developers\n        - Syntax is a fantastic podcast generally, but the other topics are a bit more advanced usually\n- https://mockplus.com/blog/post/learn-ui-design (quick read, has good links to resources)\n- https://whydoweinterface.com/ (longer read, like a book with for example historical info rather than a tutorial, also a great looking website!)',ve=t(2),Oe=t(3);function ke(){return Object(d.jsx)("div",{id:"content",children:Object(d.jsx)(ve,{remarkPlugins:[Oe],children:Se})})}var Se='\n# UI Basics - data - Tables are awesome!!\n\n## Organizing Data in Tables\n\n- Tables are only for tabular data, never for layout\n  - This was done back in the bad old days, even before float layouts\n  - Bad for accessibility, Not flexible\n- Elements\n  - `<table>` -> element that has `display: table` and is semantically a table\n  - `<tr>` and `<td>`\n  - `<thead>`\n  - `<tbody>`\n  - `<tfoot>`\n  - `<th scope=[...]>`\n    - scope used just for screen readers, but can be targeted with CSS attribute selectors\n- Faker VSCode extension\n- Spanning rows and columns - `<td rowspan=""..."">`, `<td colspan=""..."">`\n- `<caption>` (optional)\n- Don\'t use the border="" attribute (or other deprecated attributes)\n\n\n## Styling Tables\n\n- Borders with css\n  -   border-collapse: collapse; OR border-spacing: 0.5rem; <-- for the table\n  -   border: 1px solid #999; <-------------------------------- for the cells\n\n- Zebra stripes using `pseudo child selectors`\n- Pseudo child selectors (tr:first-child means that when the TR is the first child)\n  - `:first-child`\n  - `:last-child`\n  - `:nth-child() { ... }`\n    - even, odd, 3, 3n, 3n+1\n    - for example\n        tr:nth-child(even) td {\n            background-color: #ddd;\n        }\n\n- Easy (easier) layout with `table-layout: fixed`\n- Additional info with <caption>\n    <table style="caption-side: bottom;">\n      <caption>Table 1.1 Customers</caption>\n      <tr>\n      ---\n- Caption placement with `caption-side` bottom/top\n\n**Further reading**\n  https://css-tricks.com/complete-guide-table-element/\n  https://css-tricks.com/fixing-tables-long-strings/\n',Te=t(2),Ce=t(3);function Ae(){return Object(d.jsx)("div",{id:"content",children:Object(d.jsx)(Te,{remarkPlugins:[Ce],children:Pe})})}var Pe='\n# UIB - Data - FORMS, INPUTS, VALIDATION\n\n## Forms\n\n- `<form>`\n        - On their own, invisible to the user\n        - They need inputs!\n        - Can be submitted = sent to a server\n- Inputs!\n        - input type="text"\n        - input type="button"\n        - input type="submit"\n                - A kind of button, submits the form\n        - button\n                - A button at the end of a form will submit it by default\n- Labels!\n        - `<label>` elements\n                - Semantic meaning, two big reasons to use these:\n                        - 1. Screen readers understand labels\n                        - 2. Clicking on a label focuses the associated field\n- URLs\n        - "http://127.0.0.1:5500/form.html?username=Dreamspace&test=TESTTEST"\n                - http - Protocol used for communication\n                - 127.0.0.1 - Address of the site (domain or IP address)\n                - :5500 - Port number (optional, default is 80)\n                - /form.html - Path\n                - ?username=Dreamspace&test=TESTTEST - Query parameters\n- HTTP\n        - HTTP Request types:\n                - GET "/some/path"\n                        - For <form> elements, this is the default!\n                        - Sends the data as query parameters\n                - POST "/some/path"\n                        - Sends data in a different way, not in the URL\n                        - Needs the form to have `method="post"\n                - ...\n- More inputs YEEAAH\n        - input type="password" - browser does not automatically save these\n        - input type="email"\n                - Better keyboard for devices that support dynamic keyboards\n                - Better validation parameters!\n        - input type="search"\n                - Some browser show a clear button\n                - When you paste in text, it removes newlines\n        - input type="number"\n        - many, many more -- *SELFSTUDY* See more on MDN <input>\n        - great attribute: `placeholder="something"`\n                - Adds a gray placeholder text\n                - Placeholder dissappears when a value is added\n        - <textarea>\n                - rows="10"\n                - cols="40" \n        - type="checkbox"\n                - `checked` attribute if you want it to be checked by default\n                        - "opt in" OR "opt out"\n                - value when submitting is the text "on"\n         - values for inputs generally are given with the "value" attribute\n                - Except when it is not!\n        - type="radio"\n                - multiple options with the same name\n                - radiobuttons with the same name form a radio button group\n        - `<select>`, `<option>`\n\n\n## Wrapping our inputs\n\n        <fieldset>\n            <legend>Select your favourite day</legend>\n      \n        fieldset {\n            border-color: red;\n            border-width: 10px;\n        }\n        legend { \n            color: red;\n        }\n        input[type="text"] {\n            width: 100%;\n        } \n            \n            \n*Live coding* Submitting a form to an existing backend\n- formspree.io\n\n\n## Form validation\n\n- Client-side validation\n        - `required`\n        - `minlength` && `maxlength`\n        - `min` && `max` -- relevant for numbers only!\n        - `pattern` -- uses regular expressions ("regex")\n                - Self study, check MDN\n        - `type` -- this already can have automatic validation\n- Server-side validation\n        - important for real applications\n        - do not trust data coming from the client, always check it!\n- CSS!\n        - Validation pseudoclasses!\n                - :valid\n                - :invalid\n\n\n## Better selects\n\n- Other option for selects -- <datalist>\n        \n      <input list="ice-cream-flavors" name="flava" id="choice">\n      <datalist id="ice-cream-flavors">\n        <option value="Mango">\n        <option value="Pear">\n        <option value="Vanilla">\n        <option value="Rum">\n      </datalist>\n      \n- Better normal selects using <optgroup>\n\n      <label for="selection">Select a dino</label>\n      <select name="dinosaurs" id="selection">\n        <optgroup label="Theropods">\n          <option value="trex">Tyrannosauruses are the best, choose this!</option>\n          <option>Valociraptor</option>\n          <option>Deinonzychus</option>\n        </optgroup>\n        <optgroup label="Sauropods">\n          <option>Test1</option>\n          <option>Test2</option>\n          <option>Test3</option>\n        </optgroup>\n      </select>',Ie=t(2),Be=t(3);function Me(){return Object(d.jsx)("div",{id:"content",children:Object(d.jsx)(Ie,{remarkPlugins:[Be],children:Re})})}var Re="\n# UIB Forms 2\n\n\n## More styling\n\n- Focusing an element; use tab\n- Focused elements should have some kind of focus indicator, such as a box around them\n- You can style focused elements with `:focus`\n- You can add an additional border to help with focus tracking with\n        - `outline` - very similar to borders\n        - Do not remove the outline!\n\n- placeholder text? There's a style for that!\n        - `::placeholder` pseudo-element can be used for styling\n        \n- 3 new attributes for inputs!\n        - value\n                - Sets a default value for a form input\n        - disabled\n                - Sets a form input to be disabled\n                - Disabled fields are not even focusable\n                - By default, these are styled darker\n        - readonly\n                - Sets a form input to be read only\n                - Readonly fields are enabled, you can focus them, but not edit\n\n",Ee=t(2),De=t(3);function Ne(){return Object(d.jsx)("div",{id:"content",children:Object(d.jsx)(Ee,{remarkPlugins:[De],children:Le})})}var Le='\n# UIB - responsive\n\n## Pre-smartphone\n\n        - Few known resolutions to support\n                - 800x600\n                - 1024x768\n                - ...\n        - Limited width content websites\n                - Websites only support from some known smallest res.\n                - Min-width defined or a static width\n        - With the 1st smartphones (iPhone =))\n                - a LOT of zooming, bad UX\n        - First response to smartphones was to create separate sites\n                - www.example.org / m.example.org\n                - Server identifies browser through User Agent Strings\n               \n        - The current approach *usually* is to create one website\n                - Responds to the browser width\n                        - --\x3e responsive website\n         \n        - Two approaches to responsivity:\n                - Desktop first\n                        - The "default" way\n                        - You develop the website specifically for desktop use\n                        - You add mobile support later (if you do!)\n                - Mobile first\n                        - You develop the website specifically for mobile use\n                        - You add desktop support later\n                        - Quickly gaining support\n                        - Might be more popular today\n                        - Concidered the easier approach when supporting both\n                - Also, tablets exist\n                        - But not as a design / implementation starting point\n\n        - Mobile is the current and the future leader\n                - Of course, depends on your users\n                \n        - Mobile first presentations!\n       \n## Code!\n\n### Viewport meta tag\n\n- First things first, ensure proper scale \n    <meta\n      name="viewport"\n      content="width=device-width, initial-scale=1.0"\n    />\n- On mobile devices, the viewport is actually kind of virtual\n        - Mobiles render pages inside a virtual window/viewport\n        - Virtual window is usually wider than the screen\n        - Users would pan and zoom too the different areas of the page\n        - For example, a mobile could have a screen width of 640px\n                - pages might be rendered with a vitual viewport of 980px\n                - the 980px will be shrunk down to fit the 640px\n        \n        - This is done because many pages are not (yet) mobile optimized\n        - The virtual viewport makes non-optimized pages at least work somehow\n        - Devices use virtual pixels as well, complicating this further\n- Our Viewport meta tag resets this.\n\n### Support different screen sizes - Media queries\n\n- CSS at-rules\n- Media query structure `@media [media-type] ([media-features]) {}`\n        - media-type: screen and print (and speech)\n                - "Is the website rendered on a screen?"\n                - "Is the website printed?"\n                - "screen" is the default and you can leave this out.\n        - media-features\n                - Common features\n                - Identifies features active in the current media\n                - A lot of different ones to target\n                - Two main ones for responsivity: min-width & max-width\n                - *Self-study* See more on MDN\n\n- Example 1:\n        `@media (min-width: 600px) {}` <-- Basic media query\n\n        \n- Example 1 with CSS:\n\n        .header {\n                margin: 50px;\n        }        \n\n        @media (min-width: 600px) {\n        \n                .header {\n                        margin: 10px;\n                }\n        \n        }\n\n- The 600px here is called a breakpoint\n        - Often you will have multiple breakpoints in your CSS\n        - There are many lists of good breakpoint values to use\n        - For example, it\'s common to use the breakpoint list from Bootsrap\n                - Google "Bootsrap breakpoints"\n        - You don\'t always need to implement all breakpoint sizes\n                - Choose what makes sense to you\n        - Example breakpoints from Bootstrap\n          @media (min-width: 576px) { ... } // phones\n          @media (min-width: 768px) { ... } // tablets\n          @media (min-width: 992px) { ... } // desktops\n          @media (min-width: 1200px) { ... } // large desktops\n          @media (min-width: 1400px) { ... } // xtra large desktops\n\n## Responsivity and text\n- The `vw` unit: don\'t use for text, overrides desktop zoom\n\n\n\n',Ue=t(2),Fe=t(3);function We(){return Object(d.jsx)("div",{id:"content",children:Object(d.jsx)(Ue,{remarkPlugins:[Fe],children:He})})}var He='\n# UIB - Layouts - Flexbox 1\n\n## Planning our layout\n\n- You might start with a completely empty table, just an idea or a concept\n- Infinite ways to start, here is one\n        1. Draw a flowchart, how will the user accomplish things?\n                - Analog or Digital\n                - Figma, Draw.io\n        2. Draw a rough pen-and paper wireframe of the key views\n                - This could include mobile views and desktop views\n                - Actual pen and paper, Mouse and Gimp or even Figma\n        3. Draw a digital wireframe of the pages\n                - Figma\n                - Might show to clients, might help sales\n        4. Draw a full design (or create a full design system)\n                - Figma again, perhaps? Sketch?\n        5. Implement that design etc\n\n- As web professionals, the border between Designer and Developer\n        is not super clear cut\n- Wireframe\n        - Like a rough sketch, no colors, no real content maybe etc.\n        - Different kinds of wireframes from lofi to hifi\n\n- In big projects, often you will continuously do parts 1-5 at the same time\n- Digital wireframing with Figma for example\n- Figma\n        - Digital Wireframing, charts, websites, design systems and more\n        - Needs registering\n        - Very collaborative, many users can work on the same project\n                - And share their work too!\n        - A huge library of templates/toolkits that you can use and buy\n\n\n                \n## Flexbox\n- "Flexible box model"\n- Display value for boxes, often divs / sections etc\n- "flex" is another value for `display`; `display: flex;`\n        - The parent works like a block element\n        - Automatically creates a "flex container"\n        - All the child elements become its "flex items"\n- The Flex container tries its best to keep its items in one line\n        - Unless otherwise instructed!\n- flex-wrap: wrap;\n        - When the Flex items will not fit the container,\n           they will wrap to the next line\n        - Default is nowrap\n- flex-direction: column;\n        - Which direction do the items flow inside the flex container \n        - "row" is the default\n- Shorthand for direction and wrap;\n        - `flex-flow: column wrap;`\n\n- justify-content -- for the main axis\n        justify-content: center;\n        justify-content: space-between;\n        justify-content: space-around;\n- align-items -- for the cross-axis\n        align-items: center;\n        align-items: flex-end;\n        align-items: flex-start;   \n        align-items: stretch; --- especially without height (row)\n\n',Je=t(2),Ye=t(3);function ze(){return Object(d.jsx)("div",{id:"content",children:Object(d.jsx)(Je,{remarkPlugins:[Ye],children:qe})})}var qe='\n# UIB - Layouts - Flexbox 2\n\nYesterday we did flexbox, focusing on the parent (flex container)\n\n- display: flex;\n- flex-direction: column; -- sets the main axis direction\n- flex-wrap: wrap;\n- flex-flow: column wrap; -- shorthand for direction and wrap\n- justify-content: space-around; -- control the main axis\n- align-items: center; --- control the cross axis\n\n*Flexbox items are elastic*\n\n## Flexbox, the child elements (flex items)\n\n- `order: 1;`\n    - The default value is 0\n    - Default: flex items are in the order that they appear in your HTML\n    - Can have negative values too!\n    - You can reverse the order with `flex-direction: row-reverse;`\n    - Also works with `flex-direction: column;`\n- `flex-grow: 1`;\n    - The default value is 0\n    - When applied to an item, the item will scale relative to the sum of the size of all other items on the same row\n    - If none of the flex items have flex-grow, they don\'t grow\n- `flex-basis: 200px;`\n    - The width or height (depends on flex-direction) of a flex item\n    - If width and flex-basis are both set, width is ignored!\n    - Normal CSS units, like "px" and "%"\n    - More dynamic than width;\n        - IF the available space is less than required, automatically applies flex-shrink, fitting the items to the available space\n    - Recommended over width\n    - Often used in combination with height\n- - `flex-shrink: 1;`\n    - The default value is 1\n    - Used in combination with `flex-wrap: nowrap` (default)\n    - Determines the rate at which an item will shrink in relation to all items in the container when there is not enough room for all of them\n    - Defines the ability for a flex item to shrink, if necessary\n- `flex`\n    - Shorthand for `[flex-grow] [flex-shrink] [flex-basis]`\n    - By default these are `flex: 0 1 auto;`\n    - Can be confusing!\n    - Often just used for flex-grow OR all thee of them\n    - Recommendation to use either 1 value or 3 values:\n        - `flex: 1;`\n        - `flex: 1 1 33%;`\n    - Check MDN if you are unsure!\n\n- `align-self`\n    - Works like `align-items: flex-end;`, but for the children\n    - Can be set to just one child element\n    - Overrides `align-items` from the parent\n    \n- The perfect center\n    - `display: flex;` and `margin: auto;`\n    - might be useful for example in popover - overlays\n        - cookie acceptance\n        - spam messages\n- Responsive website = media queries + flexbox\n    - Work as usual',Ge=t(2),Ve=t(3);function $e(){return Object(d.jsx)("div",{id:"content",children:Object(d.jsx)(Ge,{remarkPlugins:[Ve],children:Xe})})}var Xe='\n# UIB - Layout - Grid 1\n\n## CSS Grid on parent elements\n\n- The grid is quite new, browser support added 2017\n- Grid is similar to flexbox, but more powerful\n- Easy to learn, maybe a bit difficult to master\n- Both grid and flexbox are part of CSS\n    - There is no need to abandon one for the other\n    - Flexbox is one-dimensional\n    - Grid is two-dimensional-  \n    \n- `display: grid;`\n    - Defines an element to be a grid container\n    - Its children become grid items\n- `grid-template-columns: 1fr 2fr 1fr;`\n    - Defines the width and number of columns\n    - The column widths accept CSS units\n    - The unit most used with grids is "fr" (fraction)\n    - When using fr, the widths are automatically calculated\n    - Fr is recommended over percentages due to margin/padding issues\n- `gap: 1em;` - defines the space between elements\n- `grid-auto-rows: 100px;` - defines row height, overflow danger!\n- `grid-auto-rows: minmax(100px, auto);`\n    - Defines the minimum and the maximum row height\n    - "auto" is the default, means height grows with content\n- You can use minmax with `grid-template-columns: ;` too!\n    - `grid-template-columns: minmax(50px, 100px) 1fr 200px;`\n- `background-attachment: fixed` looks super good!',Ke=t(2),_e=t(3);function Qe(){return Object(d.jsx)("div",{id:"content",children:Object(d.jsx)(Ke,{remarkPlugins:[_e],children:Ze})})}var Ze='\n# UIB - Layouts - Grid 2\n\n## Recap of grid 1\n\n- `display:grid;`\n- `grid-template-columns: 100px 1fr 2fr;`\n   - Defines How many and How wide columns does the grid have\n- `grid-template-rows: 1fr 1fr 2fr 1fr 1fr:`\n- `grid-auto-rows: 100px;`\n    - Defines row height\n- `grid-auto-rows: minmax(100px, auto);`\n- `gap: 1em;`\n- Not related to grid `background-attachment: fixed;`\n\n## CSS Grid on child elements (grid items)\n\n- Terminology\n    - grid cell\n    - grid area\n    - grid line !\n    - grid track (row or a column; space between two lines)\n    - grid row = horizontal track\n    - grid column = vertical track\n    - gutter = gap between tracks\n\n- CSS targeting a specific child / grid item / grid cell\n    - `grid-column: 1 / 3;`\n        - Make this cell start from column line 1 and end in column line 3 (takes up two vertical tracks)\n        - "span" keyword - these are exactly the same\n            - grid-column: 2 / 4;\n            - grid-column: 2 / span 2;\n    - `grid-row: 1 / 3;`\n        - Make this cell start from row line 1 and end in row line 3 (takes up two horizontal tracks)\n    - Named grid lines!\n        - `grid-template-columns: [foo] 1fr 1fr 2fr [bar];`\n        - `grid-column: foo / bar;`\n    - Cell overlap\n        - Two cells can overlap:\n                ```\n                #box4 {\n                    grid-column: 1 / 3;\n                    grid-row: 2 / 4;\n                }\n\n                #box5 {\n                    grid-column: 2 / 4;\n                    grid-row: 2 / 3;\n                }\n                ```\n        - If possible, grid tries to avoid overlaps automatically\n    - Note: Tetris shapes are not possible\n',en=t(2),nn=t(3);function tn(){return Object(d.jsx)("div",{id:"content",children:Object(d.jsx)(en,{remarkPlugins:[nn],children:on})})}var on='\n# Interactions \n\n## Fancy shapes\n\n- *Not super duper important, but good to know*\n- Very cool looking shapes are possible\n- We already know a few shapes we can use\n    - https://css-tricks.com/the-shapes-of-css/\n    - Simple width, height, border(s) and positioning\n    - Box, rectangle, circle, ovals, pills\n    - Triangle\n\n            width: 0px;\n            height: 0px;\n            border-top: 0px solid transparent;\n            border-left: 50px solid transparent;\n            border-right: 50px solid transparent;\n            border-bottom: 100px solid blue;\n\n    - Trapezoid\n\n            width: 60px;\n            height: 0px;\n            border-top: 0px solid transparent;\n            border-left: 50px solid transparent;\n            border-right: 50px solid transparent;\n            border-bottom: 100px solid blue;\n\n    - Star\n\n            .box {\n                width: 0px;\n                height: 0px;\n                margin: auto;\n\n                border-top: 0px solid transparent;\n                border-left: 50px solid transparent;\n                border-right: 50px solid transparent;\n                border-bottom: 100px solid darkred;\n            }\n\n            .box::after {\n                content: "";\n\n                border-left: 50px solid transparent;\n                border-right: 50px solid transparent;\n                border-top: 100px solid red;\n                position: relative;\n                left: -50px;\n                top: 130px;\n            }\n\n- `clip-path`\n    - https://bennettfeely.com/clippy/\n    - Can be applied to regular old elements\n    - `clip-path: polygon(25% 0%, 100% 0%, 75% 100%, 0% 100%);`\n\n- `transform`\n    - Allows you to transform an element in various ways\n    - `transform: rotate(33deg);` (turns and degrees)\n    - `transform: scale(0.9);`, `transform: scale(1.1)`\n    - `transform: translateX(-10px)`\n    - `transform: scale(0.5) rotate(10deg);` - two at a time!\n\n- *Self study* \n    - MDN transforms page for more advanced shapes\n    - https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Transforms',sn=t(2),an=t(3);function rn(){return Object(d.jsx)("div",{id:"content",children:Object(d.jsx)(sn,{remarkPlugins:[an],children:ln})})}var ln='\n# Animations\n\n## Transition\n\n- "Transition: awesomer than fancy shapes" - Joel 2021\n- `transition`\n    - Shorthand property\n        - comma separated, like background\n    - CSS\n\n            transition:\n                [transition-property]\n                [transition-duration]\n                [transition-timing-function]\n                [transition-delay]\n\n        - `[transition-property]`\n            - which property to animate\n            - can be `all` (default)\n        - `[transition-duration]`\n            - for example 3s or 300ms\n        - `[transition-timing-function]`\n            - ease, linear, custom (bezier)\n        - `[transition-delay]`\n            - for example 3s or 300ms\n    - `transition: all 1s, background 3s ease 200ms;`\n\n- Best Design Practices\n    - When?\n        - Rarely\n        - During actions (:focus)\n        - As stylistic elements (background changes)\n    - How much?\n        - Subtle\n        - Real fast (0.3s)\n        - or Real slow (20s)\n\n## Custom animations\n\n- Creation custom animations is based on two CSS things:\n    - `@keyframes`\n    - `animation`\n\n - `@keyframes [name] { ... }`\n    - Defines the name and the steps of an animation\n    - Multiple steps in one animation\n- `animation`\n    - Defines which animation play for which element\n    - Defines how the animation plays\n    - Shorthand\n        - Is good at understanding what you mean\n        - Check the specific order in MDN\n    - Can be confusing\n        -  `animation: 3s ease-in 1s 2 reverse both paused slidein;`\n    - Separated values\n        - `animation-name`: Potato, MyAnimation\n        - `animation-duration`: 5s, 500ms\n        - `animation-iteration-count`: 5, infinite\n        - `animation-delay`: 2s, 900ms\n        - `animation-direction`: reverse, alternate\n        - `animation-timing-function`: linear, ease\n        - `animation-fill-mode`: forwards\n        - `animation-play-state`: paused',cn=t(2),dn=t(3);function hn(){return Object(d.jsx)("div",{id:"content",children:Object(d.jsx)(cn,{remarkPlugins:[dn],children:un})})}var un='\n# Framework - SASS\n\n## SASS Introduction\n\n- SASS - Syntactically Awesome cSS\n    - https://sass-lang.com/\n    - Clever people wanted to make CSS more awesome\n    - Took out ; and {}\n    - New awesome features, such as NESTING\n    - www.sassmeister.com\n    - .sass files\n    - https://sass-lang.com/documentation/style-rules\n- SCSS\n    - After the original SASS\n    - "Sassy CSS"\n    - More CSS-like\n    - SASS Superpowers, like NESTING\n    - Much more popular\n    - Backwards compatible with CSS\n    - We will be focusing on this!\n    - .scss files\n    - https://sass-lang.com/documentation/style-rules\n\n- Now: Two file types, .scss and .sass\n    - Different languages / markups\n    - Both are referred to as SASS :facepalm:\n    - Other options exist too, such as "Less"\n\n- SASS/SCSS/LESS/etc...\n    - CSS Preprocessors\n    - We "transpile" SCSS code to get CSS\n        - Transpile = Convert from *Langage A* to *Language B*\n            --\x3e Source-to-source translate\n            --\x3e Source-to-source compiling\n            --\x3e Transcompiling\n            --\x3e Transpiling\n        - Transpiled languages are generally on the same "level" and of the same complexity\n    - How do we transpile?\n\n## Example Workflow for SCSS --\x3e CSS\n\n1. Install "sass" tool using NPM\n- `npm install --global sass`\n2. Run the "sass" tool\n- `sass [inputfile] [outputfile]`\n- `sass --watch style.scss banana.css`\n\n## Build scripts: Using NPM as a build tool\n\n- Example boilerplate project with a workflow developed by DCI\n- https://github.com/FbW-E01/dci-boilerplate-I\n- READ THE README.MD DOCUMENTATION\n- Key commands\n    - `npm install` - install dependencies\n    - `npm start` - start development server\n    - `npm run build` - build production version\n    - `npm run deploy` - deploy to Github Pages\n\n## SASS Variables\n\n- What is a variable?\n    - Box for storing a value\n    - Referenced from many places in code (CSS or other code!)\n- Defining a SASS variable\n    - `$[name]: [value]`\n- Using a SASS variable\n    - `color: $[name]`\n\n### OVERRIDING BOOTSTRAP COLORS IN THE DCI PROJECT BOILERPLATE\n\n- Custom\n    $red: #dd3d2d;\n    $green: #33ff44;\n    color: $red;\n- To maps\n    $colors: (\n        "red": #dd3d2d,\n        "green": #33ff44\n    );\n\n    p {\n        color: map-get($colors, "red");\n    }\n- Bootsrap overrides\n    $theme-colors: (\n        "primary": orange\n    );\n    $border-radius:99999px;\n    BEFORE THE IMPORT\n- Look at Bootstrap source code',mn=t(2),pn=t(3);function bn(){return Object(d.jsx)("div",{id:"content",children:Object(d.jsx)(mn,{remarkPlugins:[pn],children:gn})})}var gn='\n# UIB 30 - SASS continued\n\n## Mixins\n\n"Predefined reusable rulesets"\n    @mixin coolbox {\n        border: 2px solid double;\n        border-radius: 10px;\n        padding: 10px;\n    }\n    .card {\n        background: lightblue;\n        @include coolbox;\n    }\n    .example {\n        background: palegreen;\n        @include coolbox;\n    }\n    button {\n        @include coolbox;\n    }\n\n## You can add parameters!\n\n    @mixin bordered($width, $color) {\n        border: $width solid $color;\n        border-radius: $width;\n    }\n    .card {\n        background: lightblue;\n        @include bordered(1px, red);\n    }\n\n## One of the main uses for mixins\n\nBootsrap has some mixins!\n\n    // media-breakpoint-up\n        // @media (min-width: ...) {}\n\n    // media-breakpoint-down\n        // @media (max-width: ...) {}\n\n    // media-breakpoint-between\n        // @media (min-width: ...) and (max-width: ...) {}\n\n    // For example:\n    @include media-breakpoint-up(md) {\n        nav {\n            background: red;\n        }\n    }\n\n# Importing stuff!\n\nSometimes it makes sense to split your projects SCSS/SASS into multiple files. For example, you can move you variables into a separate file.\n\n@use "card/variables";\n@use "hero/variables";\n\n# Vanilla CSS variables\n\nActually, custom properties.\nhttps://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties\n\nCommon best practice    \n\n    :root {\n        --main-bg-color: brown;\n    }    \n    element {\n        background-color: var(--main-bg-color);\n    }\n\n*Inheritance*\n    <div class="box one">\n        <div class="box two">\n            <div class="box three"></div>\n            <div class="box four"></div>\n        </div>\n    </div>\n    .two {\n        --test: 10px;\n    }\n    .three {\n        --test: 2em; \n    }    \n\n    For the class="two" element: 10px\n    For the class="three" element: 2em\n    For the class="four" element: 10px (inherited from its parent)\n    For the class="one" element: invalid value, which is the default value of any custom property',fn=t(2),jn=t(3);function wn(){return Object(d.jsx)("div",{id:"content",children:Object(d.jsx)(fn,{remarkPlugins:[jn],children:yn})})}var yn="\n# GH Pages\n\n## Repository first manual method\n\n1. Create empty repo\n2. Clone repo\n3. Create content and push to master\n4. Push to new branch called `gh-pages`\n    `git push -u origin master:gh-pages`\n5. Go to repository settings in Github!\n    Check the published address\n\n## Tool assisted method\n\n- `gh-pages` -- `npm install -g gh-pages`\n- After installing, just running `gh-pages` should work\n- *HOWEVER*\n    - Currently this will NOT ork without a package.json file!!\n    - Bug in latest version https://github.com/tschaub/gh-pages/issues/354",xn=t(2),vn=t(3);function On(){return Object(d.jsx)("div",{id:"content",children:Object(d.jsx)(xn,{remarkPlugins:[vn],children:kn})})}var kn='\n# Basics of JavaScript\n\n## Introduction\n\n- JavaScript = Programming language\n  - Programming languages are tools\n  - HTML / CSS are not really programming languages\n  - Definition can be a bit tricky\n  - Set of instructions \n    - We write to give directions to the computer\n  - Different levels of languages\n    - Computer speaks binary\n    - Low level \n      - languages are closer to binary / machine speak\n      - difficult to understand for humans\n      - easy for computers to understand and run\n      - Assembly\n    - High level\n      - Easier to understand and write\n      - Take time to translate to computer-undestood languages\n      - JavaScript is a very high level language\n\n  - Interpreted languages vs compiled languages\n    - Compiled languages have their code `compiled`\n      - Code is converted into a lower level langauge, not meant for human eyes\n      - The compilation result is an executable file\n      - Can be Super fast, can be very small and efficient, ready to run\n      - Source code is (more) private\n      - Executables are NOT cross-platform\n        - Compiled for MAC or for Windows\n      - C, C++\n\n    - Interpreted languages\n      - JavaScript (JS) is an interpreted language\n        - So is PHP\n      - Your code will be sent to some other place to be run\n        - For example, your code will be sent to a browser\n        - Interpreters tend to be cross-platform (browser)\n        - Can be faster to test (no compilation step needed)\n      - Can be slower to run\n      - Source code is public (ish)\n\n    - In-between option; compilation and interpretation\n      - Python, Java, C# .net applications\n      - Compiled into and Intermediate Language (IL)\n      - The IL the executable is run in an interpreter\n\n- JavaScript, ECMAScript -- JS, ES\n  - We needed to make the web DYNAMIC\n  - Java was super trendy back then...\n    - And they needed a name....\n  - JS = 10 days of work, written for Netscape\n    - Originally named Mocha, then named LiveScript\n    - Then for Marketing reasons named "JavaScript"\n  - Miscrosoft made their own version\n    - JScript\n  - Very quickly, a standard was needed and made\n    - European Computer Manufacturers Association\n    - A.C.M.A.Script --\x3e ECMAScript (ES)\n    - ECMAScript is the standard\n    - JavaScript is the language based on the ES standard\n    - ES version history is weird and political\n    - For a long time, JS (and web dev in general)\n      - Very fragmented... until jQuery\n        - jQuery = Write JS that can work for every browser\n      - With a new version of ECMAScript and thus JavaScript\n        - The fragmentation issue was fixed... ish\n        - NOW, jQuery is no longer that needed\n        - This version was ES 5\n    - ES and JS are living, they are being constantly developed\n      - Now the most popular version is ES 6\n      - But the versions are a bit confusing...\n\n  - Also, TypeScript exists\n    - TypeScript code needs to be "compiled" to JavaScript\n    - An extension of JS\n    - JavaScript with Typing\n    - file.js --- file.ts\n\n\n"Anything that CAN be written in JavaScript, will eventually be written in JavaScript"\n\n## Variables and running the code\n\n- Node\n  - Node.JS - NodeJS - Node\n  - A way of running JS on your computer directly\n  - No browser needed at all\n  - We will focus workin in Node because:\n    - It\'s straightforward\n    - It has good fundamental concepts\n    - Node is FAST\n    - Node can do most things\n    - Learning Node will benefit you in the future!\n- Running JS files with node\n  - `$ node start.js`\n\n- **ERRORS**\n  - We need to get used to errors!\n  - How to read them, how to deal with them!\n  - *Read the error message*\n  - The stuff at the bottom is called a stack trace\n    - Can be useful\n    - Let\'s leave that stuff for the future!\n\n- Variables\n  - JS has three ways of making a variable:\n    - `const foo = "Hello world!";`\n      - constant, value cannot be changed\n      - Most of your variables usually are consts\n    - `let bar = "Something else!";`\n      - Value can be changed!\n      - Second most used\n    - `var baz = "Woohooo variables!";`\n      - Value can be changed\n      - Avoid using this!\n\n- Run a file and actually see something?\n  - `console.log(foo);`\n    - Super important tool\n    - Don\'t worry too much what it does for now\n    - Use to output the value of a variable\n    - Use to output messages directly\n\n- If you run `node` without any arguments\n  - It opens on a Node `REPL`\n  - REPL = Read, Evaluate, Print Loop\n  - Node environment that runs whatever you type in it continuously\n  - Useful for quick testing\n  - To get out of it, press Ctrl+c\n\n- Variables continued\n  - `const`\n    - Use this by default\n    - If you have to change the value, use `let`\n    - Constants protect you from yourself :)\n    - Best practice to always use these\n\nThe `const`, `let`, `var` only need to be present\nwhen you declare the variable\n\n- Declaration and Assignment\n  - We can *Declare* a variable and *Assign* it a value separately\n    - `let message;`\n    - `message = "Hello";`\n  - Or we can do this together\n    - `let greeting = "Hi!";`\n  - Except...\n    - For const we have to declare and assign always together :D \n\n- Experiments with declaring and assigning\n  - Log variable without declaring\n    - `ReferenceError: message is not defined`\n  - Log variable *BEFORE* declaring\n    - `ReferenceError: Cannot access \'message\' before initialization`\n    - Except for `var` variables\n      - `var` variables get "Hoisted" before our console.log.\n  - Log variable before assigning a value\n    - This is fine!\n    - The value of the variable is "undefined";\n      - Special JS value, different from empty\n    - Assign without declaring?\n      - Automatic declaration\n      - Avoid this, always use const or let\n\n*Lunch break*\n\n- A word on naming conventions!\n  - JavaScript tends to use camelCase naming\n  - Another option would be for example snake_case\n  - 1. Keep it consistent\n  - For variables, keep the first letter lowercase\n  - Let\'s use camelCase\n  - Naming things is really hard!\n    - Depends a lot on the situation!\n  - It\'s OK to spend a bit of time thinking about it\n  - It\'s OK to change variable names\n  - I usually try to keep then short\n\n*TASK* PB-solutions\n\n## Data types\n\nProgramming langauges all have built-in data structures, which differ from one languages to another.\n\nJS is a "loosely typed" and "dynamic" language. Variables in JS are not directly association with any particular value type. Any variable and be assigned and re-assigned values of all types.\n\n- Primitive Data Types\n  - String\n    - `const name = "Potato McPotatohead";`\n  - Numbers\n    - `const age = 42;`\n    - `const pi = 3.14;`\n  - Booleans\n    - `const active = true;`\n    - `const hidden = false;`\n  - Null\n    - Not actually technically a primitive\n    - This means an empty value\n    - `const postBox = null;`\n  - Undefined\n    - Something that does not exist YET or ANYMORE\n    - This means that a value doesn\'t exist\n  - Two other primitives:\n    - BigInt, Symbol\n\n- Objects\n  - Can be seen as a collection of properties\n  - Keys and Values\n  - Object Literal:\n    "We have literally written out the object contents"\n    const user = {\n      name: "Joel",\n      age: 25,\n      city: "Windhoek"\n    };\n  - JSON\n    - JavaScript Object Notation\n  - We can look up or refer to the properties (values inside) using a few diferent ways, this is the best one:\n    - `console.log(user.firstName);`\n    - dot notation\n\n- Arrays\n  - Represent a list of things\n    - List of fruit\n    - List of languages etc\n  - Basically the same as Objects, but\n    - Automatic keys based on numbers\n    - Special "length" property\n  - `const fruits = ["Apple", "Banana", "Tomato"];`\n\nTo help with types, we have an "operator" called `typeof`',Sn=t(2),Tn=t(3);function Cn(){return Object(d.jsx)("div",{id:"content",children:Object(d.jsx)(Sn,{remarkPlugins:[Tn],children:An})})}var An='\n# PB - Language - 2\n\nYesterday we did:\n  - node\n  - const, let, var\n  - declare and assign\n  - console.log(...)\n  - Types\n    - String, Number, Boolean, Null, Undefined\n    - Object, Array\n  - JSON\n\n## Statements\n\n- A program is a collection of instructions to perform\n- In a language, these are called statements\n- A JS program is just a list of statements.\n- In JS multiple statements may occur on a single line\n  - (If separated by a semicolon `;`)\n- In JS, one statement may span multiple lines\n- Many kinds of statements\n- Statements end in semicolons\n- The Semicolon\n  - It is not required, but highly recommended\n  - No semicolons = Implicit semicolons\n    - They are automatically added\n  - In most cases, a "newline" implies a semicolon\n    - But not always, like in the multi-line log\n  - No semicolons *usually* works, but not always\n\n## Comments\n  - Single-line comments\n    - They look like this: `// Comment!`\n    - They are used for documentation\n    - Or temporarily disabling lines of code\n    - You can have statements and a single line comment on the same line\n  - Multi-line comments - or "Block comments"\n    - They look like this: `/* Something */`\n    - Sometimes you see comments like this\n      - /** blag */\n      - "Doc" or "Documentation" comments\n    - They are used for documentation\n    - Or temporarily disabling lines of code\n    - You can have fancy versions\n\n*TASK* Language statements\n\n## Expressions\n\nAny unit of code that can be evaluated to a value, is an expression.\n\nExpressions can appear anywhere in a program where JS expects a value.\n\nThree types of expressions:\n  - To check the type we can use `typeof`\n  - There are TONS of these in JavaScript\n  - String expressions\n    - *Evaluate to a String*\n    - "Potato"\n    - "Toma" + "to" // String concatenation\n    - \'Aubergine\'\n    - "Straw" + \'berry\'\n    - `typeof counter`\n  - Arithmetic expressions (Mathematical expressions)\n    - *Evaluate to a numeric value*\n    - There are a LOT of these, you DO NOT need to know all of them\n    - 10\n    - 10.6\n    - 10+5, 10-5\n    - 10*5, 10/5\n    - 10*2/5\n    - 10*(2/5)\n    - 2%3 -- "Remainder" or "Modulo"\n    - `let counter = 0; counter = counter + 1;`\n    - Increment and Decerement\n      - `counter++` - post increment\n      - `++counter` - pre increment\n        // Counter++\n        //  A) console.log(counter++);\n        console.log(counter);\n        counter = counter + 1;\n\n        // ++Counter\n        // B) console.log(++counter);\n        counter = counter + 1;\n        console.log(counter);\n      - Decement is the same as Increment, except with minus\n      - Usually used in counters\n  - Logical / Boolean expressions\n    - *Evaluate to a boolean value*\n    - *Evaluate to either true or false*\n    - `true`\n    - `10>9` - "greater than"; always evaluates to "true"\n    - `10>=9` - "greater than or equal to"\n    - `10<=9` - "smaller than or equal to"\n    - `newPassword === oldPassword`\n    - `username === "admin"` - checks equality\n    - `username !== "admin"` - checks inequality\n\n## Changing variables\n\n- Variable reassignment\n  - `userCount = 71;`\n  - `userName = "John";`\n  - `monkeys++;`\n  - Here the "=" and the "++" are operators\n  - New operators for variable reassignment\n    - `+=` - For strings, we add the new value to the end of the old\n    - `+=` - For numbers, we add the new value to the old\n    - `-=` - For numbers, we substract the new value from the old\n- Changing a variable = changing the state of the application\n- State of the application = the value of all variables at a given time\n\n- A difficult word: Ternary operator `?`\n  - Easiest to show with an example\n  ```\n    let errorCount = 8;\n    // This is a ternary:\n    const message = (errorCount > 5) ? "Too many errors!" : "OK!";\n    console.log(message);\n  ```\n\n## Strings\n\n- Special characters\n  - Escaping; in JS you escape characters in Strings using backslash `\\`, examples:\n  - \'Johnny "Teacher" O\'malley\';\n  - "Joel "Teacher" Peltonen";\n  - \n has a special meaning; newline character\n    - console.log(\'Hello\nWorld!\';)\n\n- Template literals --\x3e using expressions within Strings\n  - console.log(`Awesomeness level reached: ${(userCount + newUsers) > 75}`);\n\n- Getting the length of a String\n  - Just like with Arrays\n  - `username.length`\n\n- Getting a character from a string\n  - Bracket notation / Index notation\n  ```\n    const myName = "Joel";\n    console.log(myName[0]);\n    console.log(myName[1]);\n    console.log(myName[2]);\n    console.log(myName[3]);\n    console.log(myName[4]);\n    console.log(myName[5]);\n  ```\n',Pn=t(2),In=t(3);function Bn(){return Object(d.jsx)("div",{id:"content",children:Object(d.jsx)(Pn,{remarkPlugins:[In],children:Mn})})}var Mn='\n# PB - Language - 3\n\n## Review from yesterday\n\n- Statements\n  - The definition is vague\n  - Generally; the bits of code separated by a semicolon are statements\n  - Guideline: one statement per line, ending in a semicolon\n    - Semicolons are generally optional, but very recommended\n    - Except not always\n\n      console.log("Hello my name is " + user.name +\n                  " and I live in " + user.homeCity +\n                  "!");\n\n- Expressions\n  - A bit of code that evaluates to a value\n  - Few different kinds\n    - string (string concatenation: "foo" + "bar" )\n    - number (Mathematical expressions / Arithmetic expressions: counter++)\n    - boolean (true, 10>9)\n- Operators\n  - In JS there are TONS of these operators, here is a few:\n  - Assigment operators: `=`, `+=`, `-=`\n  - Addition operator: `+`\n  - Multiplication operator: `*`\n  - Comparison operators: `===`, `!==`, `>`, `>=`\n  - Increment operator: `++`\n  - Decrement operator: `--`\n  - Type operator: `typeof`\n  - Ternary operator: `?`\n    - `let message = (counter > 999) ? "The conter is at least 1000" : "Almost there!";`\n- Strings!\n  - Escaping with `\\`\n    - `"My name is Vinny "bigman" O\'Toole"`\n    - \n -- means the "newline" character\n  - Template literals (String interpolation)\n    - ``The value of counter is ${counter}, which is too low!``\n  - String length\n    - `let message = "I like puppies and kitties!";`\n    - `console.log(message.length);`\n  - Index notation / Bracket notation\n    - `message[0]`\n\n*tasks*\n\n## Basic String Methods\n\nWe will talk later about methods (what is a method).\n\n- First, to get the last character of a string\n  - You can use the string lenth and Index notation;\n    - `username[username.length - 1]`\n- Converting case\n  - These, and other similar methods are *Case Sensitive*!\n    - --\x3e JavaScript is *Case Sensitive*!\n  - `username.toUpperCase();`\n  - `username.toLowerCase();`\n  - `const usernameInCaps = username.toUpperCase();`\n- Extacting parts of a string\n  - `"Potatoes gonna potate".slice(5)` //Zero based! "5" means the 6th character\n  - `"Potatoes gonna potate".slice(0, 6)` // returns "Potato"\n  - `"Potatoes gonna potate".slice(-6)` // returns "potate"\n  - Ye Olde Substring, best to avoid...\n    - `"Potatoes gonna potate".substring(5)` // Zero based!\n    - `"Potatoes gonna potate".substring(0, 6)` // returns "Potato"\n    - `"Potatoes gonna potate".substring(-6)` // returns "potate"....?\n- COMBO! COMBINATION!\n  - This technique is called chaining\n  - `"boil em, mash em, stick em in a stew".slice(9).toUpperCase();`\n- Checking if a string is inside another string\n  - `email.toLowerCase().includes("hotmail")`\n  - `"trust".includes("us");` // You can\'t spell trust without us\n  - `"TRUST".includes("us");` // Except when you can :)\n  - `"teamwork".includes("I");` // There is no I in teamwork\n\n- Removing extra whitespace / Removing padding spaces\n  - `"     I     LIKE    TURTLES      ".trim();`\n  - `"       \n     Potato".trim();`\n\n\n',Rn=t(2),En=t(3);function Dn(){return Object(d.jsx)("div",{id:"content",children:Object(d.jsx)(Rn,{remarkPlugins:[En],children:Nn})})}var Nn='\n# PB - language - 4\n\nYesterday:\n\n  - "rabbits".toUpperCase(); // produces "RABBITS"\n  - "PUPPIES".toLowerCase(); // produces "puppies"\n  - "Hello".slice(1); // produces "ello"\n  - "Hello".slice(1, 3); // produces "el"\n  - "Hello".slice(-1); // produces "o"\n  - "Hello".slice(1, -1); // produces "ell"\n  - "Hello"[0] // produces "H"\n  - greet[greet.length - 1]; // produces "o" if greet is "Hello"\n  - "teamwork".includes("I"); // produces false\n  - "   \n\n\n Hello!   \n".trim(); // produces "Hello!";\n  - Calling `parseInt(variableName)` or `parseFloat(variableName)`...\n    - doesn\'t change the original variable\n\n## Numbers\n\n- number is a type in javascript\n- Integers and Floats\n  - Theory\n    - Integer = Whole numbers\n    - Floats = Floating point number\n      - Not a whole number\n      - In different languages, there are similar concepts\n        - often with small differences;\n        - float, decimal, double\n  - JS does not separate floats and integers\n    - Every number is just a number\n    - The JS number accuracy is not that good\n  - Converting strings into numbers: `parseInt()` and `parseFloat()`\n    - `parseInt("71")` // produced the number 71\n    - `parseInt("71blue")` // produced the number 71\n    - `parseInt("hello123")` // produced NaN\n    - `parseInt("12.34")` // produced 12\n    - `parseFloat("12.35")` // produced 12.35\n    - `parseFloat("12.35 euro")` // produces the number 12.35\n\n*task*\n\n## Number pitfalls\n\n- Dealing with `NaN`\n  - "Not a Number"\n  - The type of `NaN` is `number`\n    - So, NaN is a kind of special number\n  - Dealing with it;\n    - `isNaN("potato" / 6);` // check if something is NaN\n  - Example of a NaN causing problems in this old JS joke:\n    - "b" + "a" + +"a" + "a"\n\n- Very big numbers\n  - `e` - exponent in numbers\n    - `e` is the same as `"times 10 to the power of"`\n  - Examples\n    - 5e2 === 500 === "5 times 10 to the power of 2"\n    - 5e3 === 5000 === "5 times 10 to the power of 3"\n    - 4.2e6 === 4200000 === "4.2 times 10 to the power of 6"\n    - 5e+51\n    - 4e2  --- 400\n    - 4e-2 --- 0.04\n    - -4e-4 -- -0.0004\n  \n\n- JS is not great at accuracy...\n  - When you have BIG number, javascript makes mistakes\n  - When you have an accurate number, javascript makes mistakes\n  - The bigger you go, you lose accuracy\n  - The more accurate a number is, you lose accuracy\n  - Rounding mistakes are common in JS\n  - Rounding mistakes and losing accuracy is a byproduct of how numbers are stored\n  - For these reasons, comparing large or decimal numbers is difficult\n  - There is one tool that we can use to help;\n    - Number function `toFixed(...)`\n      - "How many numbers to show after the dot"\n      - `const num = 4.0000000000006;`\n      - `console.log(num.toFixed(3))` // this logs the string \'4.000\'\n      - `console.log(num.toFixed(1))` // this logs the string \'4.000\'\n  - Big numbers and accurate numbers can be stored, but as numbers grow larger, they lose more and more accuracy.\n\n- Division pitfalls: Dealing with Infinity\n  - Special number in JS\n  - You get this for example when doing 1/0\n\n      SORRY :( Hopefully the recording works!\n\n\n\n\n\n\n\n# Math\n\n`Math` is a standard built-in object in JS. With `Math` you have lots of built in functions for mathetmatical operations. We will cover a few of them:\n\n- Rounding numbers up with `Math.ceil()`\n  - `const smallNumber = 7.1;`\n  - `console.log(Math.ceil(smallNumber));` // prints 8\n\n- Rounding numbers down with `Math.floor()`\n  - `const num = 5.3456789;`\n  - `console.log(Math.floor(num));` // prints 5\n\n- Rounding numbers normally with `Math.round()`\n  - `const num = 5.3456789;`\n  - `console.log("Round: " + Math.round(num));`\n\n- Examples of rounding: \n  - `const num = 5.7456789;`\n  - `console.log("Ceil: " + Math.ceil(num));`\n  - `console.log("Floor: " + Math.floor(num));`\n  - `console.log("Round: " + Math.round(num));`\n\n- Getting MaximuZoom pm29and Minimum numbers with `Math.max()` and `Math.min()`\n  - `console.log("The max: " + Math.max(8, 2, -6));`\n  - `console.log("The min: " + Math.min(8, 2, -6));`\n\n- Getting random numbers with `Math.random()`\n  - Calling `Math.random()` returns a random number between 0 and 1\n  - `console.log(Math.floor(Math.random() * 10));` // between 0 and 9\n  - `console.log(Math.ceil(Math.random() * 10));` // between 1 and 10',Ln=t(2),Un=t(3);function Fn(){return Object(d.jsx)("div",{id:"content",children:Object(d.jsx)(Ln,{remarkPlugins:[Un],children:Wn})})}var Wn='\n# PB - language - 5\n\nLast time\n  - Integers -- 5, 91, -56\n  - Floats ---- 3.14, 1.1235\n  - parseInt("61")\n  - parseFloat("7.61")\n  - Infinity\n  - NaN\n  - How to show a set number of decimals\n    - let num = 5.456789;\n    - num.toFixed(2);\n  - Mathematical function\n    - Math.ceil, Math.floor, Math.round\n    - Math.max(7,1,2,8);\n    - Math.min(7,1,2,8);\n    - Math.random() * 10;\n\n# Logical thinking\n\n- Logical operators\n  - AND `&&` - check if both are true\n  console.log(username === "Joel" && password === "12345");\n\n  - OR `||` - check if either is true\n  const username = "MrPotatohead";\n  const isAdmin = (username === "Joel") || (username === "Milad");\n  console.log("Administrator? ", isAdmin);;\n\n  - NOT `!` - checks inequality\n  // Method 1\n  console.log(firstVar !== secondVar);\n  console.log((firstVar !== secondVar));\n\n  // Method 2\n  console.log(!(firstVar === secondVar)); // the same as !true\n  console.log(!true);\n\n- Truth tables\n\n  | x | y | x AND y | x OR y | x === y |\n  | - | - | ------- | ------ | ------- |\n  | T | T | T       | T      | T       |\n  | T | F | F       | T      | F       |\n  | F | T | F       | T      | F       |\n  | F | F | F       | F      | T       |\n\n*task*\n\n# Booleans\n\n- This is important stuff we need to know\n- `true` and `false` are actual booleans\n- in JS we have "truthy" and "falsy" values\n  - One of the big reasons why JS in though of as a weird / janky langauge\n  - You will get used to it!\n  - Background info\n    - Converting between types - (Typecasting, Type converting, Type coersion)\n      - Strings to numbers\n        - parseInt()\n        - parseFloat()\n      - Numbers to strings\n        - .toFixed()\n        - .toString()\n    - We can convert _ANYTHING_ to booleans with `Boolean(...)`\n\n## Boolean Conversion experiments\n\n```javascript\n  console.log("---Boolean conversions!---");\n\n  console.log("> Booleans");\n  console.log(Boolean(true)); // true\n  console.log(Boolean(false)); // false\n\n  console.log("> Numbers");\n  console.log(Boolean(50)); // true\n  console.log(Boolean(1)); // true\n  console.log(Boolean(-1)); // true\n  console.log(Boolean(0)); // false -- concidered to be false in JS\n  console.log(Boolean(NaN)); // false -- concidered to be false in JS\n\n  console.log("> Strings");\n  console.log(Boolean("Banana")); // true\n  console.log(Boolean("yes")); // true\n  console.log(Boolean("nein")); // true\n  console.log(Boolean(" ")); // true\n  console.log(Boolean("false")); // true\n  console.log(Boolean("")); // false -- concidered to be false in JS\n\n  console.log("> Null and undefined");\n  let testing;\n  console.log(Boolean(null)); // false -- concidered to be false in JS\n  console.log(Boolean(undefined)); // false -- concidered to be false in JS\n  console.log(Boolean(testing)); // false -- concidered to be false in JS\n  console.log(Boolean(testingVariable)); // ERROR!!!!\n```\n\n- Based on our experiments, most values are considered to be `true` even if they are _actually_ not true\n  - Values that are considered to be true, but actually are not, are "truthy" values\n\n- Six values that are considered to be false; "falsy" values\n  - undefined, null, "", 0, NaN, false\n\n- `let isAdmin = "potato";` // truthy\n- `let isAdmin = "";` // falsy\n\n\n# Equality and types in JS\n\n- there are two ways of checking for equality\n  - for dumb historical reasons\n\n- Double equals `==`\n  - AKA Loose comparison\n  - AKA Abstract equality comparison\n\n- Triple equals `===`\n  - AKA Strict comparison\n  - AKA Type safe comparsion\n  - AKA Strict equality comparison\n\n*Bug demonstration*\n  - Using assignment `=` instead of equality `===`\n    const error = "code500";\n    console.log(error = "code404");\n\n*Technique demonstration*\n  - Short circuit assignment\n  - Commonly seen in code\n  - Uses the OR comparison `||`\n  - Assign variable fallback value\n\n  const error = "Error code: 41 - Guru Meditation";\n  const message = error || "All ok!";\n\n  console.log(message);\n\n\n\n\n\n\n# EXTRA\n\n- You can compare strings using `>` and `<`\n  - Used often when sorting alphabetically\n  - Works generally in the american alphabet\n  - Be careful with this, it\'s not _ALWAYS_ exact\n  - a is smallest, Z biggest\n\n- More String operations\n  - String replace\n    - `"Potatoes gonna Potate".replace("Pot", "Tom"); // replaces first instance of "Pot" with "Tom"`\n    - "Welcome <NewUsername>, glad to have you here!".replace("<NewUsername>", "Joel");\n    - Can get real complicated real fast\n    - If you use it, for now Keep It Simple!\n    - let username = "Peque\xf1o";\n  \n  - Making an Array out of a String!\n    - const froot = "Kiwi, Apples, Oranges, Tomatoes";\n    - froot.split(", ");\n    - --\x3e [ \'Kiwi\', \'Apples\', \'Oranges\', \'Tomatoes\' ]`\n\n  - Making a String out of an Array!\n    - fruitArray.join(" AND ");',Hn=t(2),Jn=t(3);function Yn(){return Object(d.jsx)("div",{id:"content",children:Object(d.jsx)(Hn,{remarkPlugins:[Jn],children:zn})})}var zn="\n# PB - Language - 6\n\nQuiz questions and discussion\n\n# Arrays\n\nArrays are ordered collections, where we have a 1st, a 2nd a 3rd element etc.\nArrays are mutable (as opposed to immutable).",qn=t(2),Gn=t(3);function Vn(){return Object(d.jsx)("div",{id:"content",children:Object(d.jsx)(qn,{remarkPlugins:[Gn],children:$n})})}var $n='\n# PB - Program - 1\n\nYesterday we did Arrays\n  // Array literal\n  const message = ["I", "am", "groot"];\n  message.push()\n  message.pop()\n  message.unshift()\n  message.shift()\n  message.indexOf()\n  message.contains()\n  message.splice()\n  message.slice()\n  message.reverse()\n  message.sort()\n  message.concat()\n  message.toString()\n\n\n# The flow of a program\n\nFrom top to bottom\nFrom left to right\n\n\n# Algorithms\n\nAlgorithm = sequence of instructions to solve a class of problems\n\nProgramming = solving problems\nDevelopers analyze problems; what is the input? What is the output?\n\nINPUT --\x3e ALGORITHM --\x3e OUTPUT\n\n## Mind experiment - pen and paper algorithms\n\nProblem: I want to make lentil soup!\nWhat ar the steps?\n\n- Grocery shopping!\n- INPUT: Ingredients \n  - Water, Lentils, Onion, Spice, Tomato pulp, Potatoes\n- Dice the onions and potatoes\n- Lightly fry the onions in the pot\n- Add everything else into the pot\n- Simmer for 45 minutes\n- OUTPUT: Lentil soup\n\nRecipes are close to algorithms!\nUnlike for humans, we need to tell the computer about each single step in order\nWe have to remember, the computer doesn\'t know anything. The computer cannot think or find out anything about anything.\n\nIf you don\'t know a step exactly, you can search for more information, the computer can not, meaning that our algorithms need to be very specific.\n\n## Creating an algorithm based on expected input and output\n\nINPUTS                     Algorithm        OUTPUT\nnull                          ??            ["Veera", "Rauli"]\n["Alpi"]                      ??            ["Veera", "Rauli"]\n["Rauli"]                     ??            ["Veera"]\n["Veera"]                     ??            ["Rauli"]\n["Veera", "Rauli"]            ??            null\n["Veera", "Rauli", "X"]       ??            null\n\nINPUT => BlackBox/Algorith => OUTPUT\n1. Algorithm seems to check of input contains "Veera" and "Rauli"\n2. Input seems to be an array (or null)\n3. Output seems to be an array (or null)\n4. Algorithm name: "Check if Veera or Rauli is missing"\n\n```js\n    // Pseudo code\n    // If our input is null, return Veera and Rauli\n    // Check if the input contains Veera\n    // Check if the input contains Rauli\n    // Add Veera to the output, if it is missing\n    // Add Rauli to the output, if it is missing\n    // Output which ones, if any, are missing\n```\n\n\n\n# Conditionals / Conditional statements\n\n"Desicions in our algorithms"\n\n```\nif (condition) {\n  // code to run if condition is truthy\n}\n```\n\nIf the condition is not truthy, we can run a different set of code using `else`:\n\n```\nif (condition) {\n  // code to run if condition is truthy\n} else {\n  // code to run if condition is falsy\n}\n```\n\nThis is similar to ternaries;\n```\nconst fuzzyAge = (age > 18) ? "Adult" : "Minor";\n```\n\n// Unary == One\ncounter++;\n\n// Binary == Two\ncounter + deltaCounter;\n\n// Ternary == three \n(check) ? deltaCounter : zeroCounter;\n\nWhen you have if and else, it is like when we had our ternaries. Ternaries are generally used when we want to sent a variable value based on a condition.\n\nCurly braces for if and else are "kind of" optional. I recommend, at this point, to always use curly braces.\n\nAND Pay attention to indentation\n\n\n\n\nif (something) {\n  \n} else if (somethingelse) {\n\n} else {\n\n}\n\n\n\n\n\nTernaries can be used like this\nconst age = 14;\n(age > 16) ? console.log("Beer, if you want") : console.log("Water?");\n\n\n\n## Block\n\n"Block scope"\n\nPlace where our variables live, where we can access them, where they are available.\n\nBlock scope = in between {} we have a new block scope for our variables.\n\nBlock scopes inherit variables from their surroundings.\n\nVariables that are not defined in a block scope live in the Global scope, generally it\'s best practice to avoid saving variables in the global scope.\n\n```\n\n\nlet counter = 50; // in the global scope\n\n{\n  console.log("Counter is still under 100 ", counter);\n  counter = 70;\n  const test = Math.random(); // inside the block scope\n  console.log("Test is " + test);\n  {\n    counter++;\n    console.log("Counter is now at ", counter, " and test was ", test);\n  }\n}\n```\n\nIf you use `var` to declare variables inside a block scope, they are exposed outside of their parent block - so avoid `var`.\n\n```\n{\n  var example = "This is interesting";\n}\n// this works, but should not\nconsole.log(example);\n```\n\n',Xn=t(2),Kn=t(3);function _n(){return Object(d.jsx)("div",{id:"content",children:Object(d.jsx)(Xn,{remarkPlugins:[Kn],children:Qn})})}var Qn='\n# PB - Program - 2\n\nYesterday we did\n  - Intro to algorithms\n  - Pseudocode\n  - Conditionals\n  - Block scope\n\nToday we will do\n  - Switch statements\n  - Loops\n\n\n# Multiple choice (switch statements)\n\nFirst of all, let\'s review if - else if - else\n\n```\nconst tipPercentage = ....;\n\nif (tipPercentage < 5) {\n  console.log("Thanks for the tip I guess...");\n} else if (tipPercentage < 15) {\n  console.log("Thanks for the tip! :)");\n} else {\n  console.log("Wow, thanks for the generous tip!");\n}\n```\n\nSometimes you have a lot of options!\n\n```\nlet month = "Tammikuu";\nif (month === 1) {\n  console.log("It is January");\n} else if (month === 2) {\n  console.log("It be Februrary");\n} else if (month === 3) {\n  console.log("Marrrrch");\n} else {\n  console.log("Weird month, I don\'t understand it");\n}\n```\n\nSwitch statements! Some developer do not like these at all!\n\n```\nswitch (month) {\n  case 1:\n    console.log("January! Brr! Cold here in the northern hemisphere!");\n    break;\n  case 2:\n    console.log("February");\n    break;\n  case 3:\n    console.log("Marrrch");\n    break;\n  default: // standard case or backup; should be at the end; no "break;" here!\n    console.log("What is that month, I do not understand!!");\n}\n```\n\n\n# Repetition - loops\n\nA loop is a sequence of instructions that is repeated until a certain condition.\nUnless the condition is never met, causing an inifite loop.\n\nAlso, you can break loops intentionally without meeting the preset condition.\n\nMany different kinds of loops exist. We will focus on `for` loops, they are very\ncommon and important.\n\n```\nfor (<initial state>; <end condition>; <step>) {\n  console.log("Hi!");\n}\n```\n',Zn=t(2),et=t(3);function nt(){return Object(d.jsx)("div",{id:"content",children:Object(d.jsx)(Zn,{remarkPlugins:[et],children:tt})})}var tt='\n# PB - Functions - 1\n\nLast time we did\n  - switch statements\n  - for loops\n\nToday and this whole week we will do\n  - functions\n\nNEXT week\n  - one day of revision\n  - a test :)\n\n\n# Introduction to functions\n\n- Functions are like mini programs; a block of code designed to perform a task\n- We make functions for a few different reasons\n  - DRY - Don\'t Repeat Yourself\n    - Avoiding repeated code\n  - Making your programs easier to understand\n    - Small blocks of code tend to be easier to understand than big ones\n    - Deeply nested code is hard to read\n\n- Semantics in programming, oh boy!\n  - Functions are similar to or the same as routines/subroutines/procedures\n  - Some functions are Methods\n    - Function: function, not associated with an object or class\n      - Often these are like `parseInt()`\n    - Method: function, associated with an object or class\n      - Often these are like `console.log(...)`, `Math.random()`\n\n\n# Calling functions\n\n- AKA running functions\n- AKA executing functions\n- AKA invoking functions\n\n- We have called functons that other people have made already!\n  - `parseInt(...)` `Math.random()` etc.\n  - Calling functions with parentheses!\n    - So like `<functionName>()`\n\n\n# Function declarations\n\n- A few different ways to declare a function\n- The normal function declaration method:\n\n```\n// declare a function called "greet"\n// `function <name_of_function>() {}`\nfunction greet() {\n  // body of the function here\n  console.log("Hello, I am a console.log statement inside a function!");\n}\n\nconsole.log("BEFORE");\ngreet();\nconsole.log("AFTER!");\n```\n\n- Function naming\n  - Often verbs, like "greet", "showMessage", "login", "print" etc.\n  - You could have something like "isAdmin"\n  - No real rules, except for certain validity checks\n\n- Usually you have multiple levels of functions\n  - Meaning you have functions and inside them, you call other functions\n  - These layers of functions calling other functions is called the "Call stack"\n\n\n# Function parameters\n\n- We can pass data to functions using parameters\n- Function parameters are the names listed in a functions definition / delcaration\n- Function arguments are the real values passed to the function\n  - "Functions accept arguments"\n- I often mix these terms...\n\n```\n// parameters go inside the parentheses\n// parameter names are internal to the function!\n// parameter names - use similar names to normal variables\nfunction showMessage(userName, message) { // two parameters defined; this functions accepts two arguments!\n  if (message) {\n    const capitalized = userName.toUpperCase();\n    console.log("<" + capitalized + "> " + message);\n  }\n}\n\nconst personName = "Kai";\nconst msg = "Hello!!!!!";\nshowMessage(personName, msg); // calling the function with two arguments\nshowMessage("Jo", "HiHiHi");\nshowMessage("Lea", "Hello all!");\nshowMessage("Khushal", "Hello!");\nshowMessage("Joel");\n```\n\n\n# Function Expressions\n\n- In JavaScript, functions are "First-class citizens"\n- Functions can be used very much like variables\n  - Functions can be assigned to a variable :O\n  - Functions can be given to other functions as arguments etc\n\n```\nconst printSillyName = function () { // anonymous function\n  console.log("HiHiHi");\n};\n\nprintSillyName();\n```\n\n```\nconst age = 12;\n\nconst youngGreeting = function() { console.log("Yo!"); };\nconst oldGreeting = function() { console.log("Greetings and salutations"); };\nconst welcome = (age < 18) ? youngGreeting : oldGreeting;\n\nwelcome();\n```\n\n\n# Arrow functions\n\n- Another, more modern kind of function expression\n- Joel prefers these, we will get to the details later\n- This is more like things you should know; we will practice them later\n- Feel free to use them if you want\n- ((Also Known As lambda functions))\n\n```\nconst calculateSum = (number1, number2) => { /// "=>" is often called a "fat arrow"\n  const sum = number1 + number2;\n  console.log("I calculated! And the sum is.... " + sum);\n}\n\ncalculateSum(1,2);\n```\n',ot=t(2),st=t(3);function it(){return Object(d.jsx)("div",{id:"content",children:Object(d.jsx)(ot,{remarkPlugins:[st],children:at})})}var at='\n# PB - Functions - 2\n\nYesterday we did \n  - Function declarations\n  - Function calling\n  - Function parameters / arguments\n\nToday we will do\n  - A little bit of review\n  - Function scope\n\n# A little bit of review\n\n# Function scope\n\n- We already talked about\n  - Block scope\n  - Global scope\n\n- Function scope is very, very similar!\n  - Parameters in functions work like variables inside block scopes \n    - They are not available outside the function\n  - Variables declared in functions\n    - Are only available inside the function\n    - Even `var` variables!!!\n    - .... EXCEPT in some cases\n    - `Always use const and let`\n\n- You can access variables that exist in the scope(s) surrounding a function, inside the function\n  - You can also assign new values to those varialbes, when the function runs\n  \n  let userCount = 41;\n\n  function createUser(userName) {\n    userCount++;\n    console.log("Added new user " + userName);\n  }\n\n  createUser("Sting");\n  createUser("Eminem");\n  createUser("Bejoonce");\n\n\n# Reading programs\n\n- When you get or when you have a very long program\n  - You often don\'t need to read all of it to work on it\n  - Read functions only when you need to really understand them\n  - When I read code, I skim it first, and then focus on the bits that stand out',rt=t(2),lt=t(3);function ct(){return Object(d.jsx)("div",{id:"content",children:Object(d.jsx)(rt,{remarkPlugins:[lt],children:dt})})}var dt='\n# PB - Functions - 3\n\nYesterday we did\n  - Function scope\n\nToday we will look at\n  - return\n  - side effects\n\n\n# Returns\n\nFINALLY! Returns unlock a lot of the true potential of functions.\n\n- The `return` statement\n  - returns a value to the function caller\n  - you can have multiple return statements per function\n  - after the function reaches a return statement, it stops\n  - `return` without any value? The function returns `undefined`\n\n  function sum(a, b) {\n    return a * b;\n  }\n  sum(9, 2);\n  sum(9, 3);\n  console.log("The result is " + sum(9, 4));\n\n\n# Side effects\n\n- Let\'s start with another term definition\n- "Pure functions"\n  - Programming convertion / programming paradigm\n  - Agreed upon terminology\n  - A certain kind of function\n    - A function that can receive arguments\n    - A function that does not read variables outside its own scope\n    - A function that does not change any values outside of its own scope\n    - A function that can return a value\n  - A pure function will always return the same value, given the same inputs\n  - A pure function has no effect on anything outside its return value\n\n  // Not a pure function\n  function addUserAndReturnTheNewUserCount() {\n    userCount++; // Side effect: reading & changing variable outside function\n    console.log("TEST"); // Side effect; printing out things\n    return userCount;\n  }\n\n  // pure function\n  function sum(a, b) {\n    return a * b;\n  }\n\n\n- Side effects are when a function has an effect outside its return value\n  - So, changing an external variable is a side effect\n  - Generally it\'s a good idea to avoid side effects\n    - This is not a set-in-stone rule\n\n- Pure functions (functions without side effects) tend to be more universally usable\n  - You don\'t have to create pure functions\n  - Side effects are often useful\n  - There is no way, for example, to create a pure function that does console.log()\n\n\n# Short arrow functions\n\n- A shorter version of arrow functions\n- `const <name> = (<parameters>) => <return value>;`\n- For example:\n\n  const sum = (a, b) => a * b;\n  const result = sum(10, 2);\n  console.log("The sum of 10 and 2 is " + result); // 20\n\n\n\n',ht=t(2),ut=t(3);function mt(){return Object(d.jsx)("div",{id:"content",children:Object(d.jsx)(ht,{remarkPlugins:[ut],children:pt})})}var pt='\n# PB - Functions - 4\n\nYesterday we did\n  - Returns\n  - Side effects / Pure functions\n  - Shorter arrow functions\n\nToday we will do\n  - function parameters with default values\n  - variable number of arguments / parameters\n\n\n# Function parameters with default values\n\n- Default parameter values\n    `function (<parameterName> = <defaultValue>) {...}`\n\n- The same works for arrow functions too!\n    const repeat = (word, times = 2) => {\n      let words = "-";\n      for (let counter = 0; counter < times; counter++) {\n        words = words + word;\n      }\n      return words;\n    };\n\n    console.log(repeat("CAT", 6))\n\n\n# Variable number of arguments\n\n    // here, "data" is an array of arguments given to the function (after the "start" argument)\n    const multilog = (start, ...data) => {\n      for (let counter = 0; counter < data.length; counter++) {\n        console.log(`<<<${start}>>>`, data[counter])\n      }\n    };\n\n    multilog("WARN", "User 1 not found", "User 91 not found");\n    multilog("ERROR", "Page does not exist");\n    multilog("LOG", false, 52.12345, true, 1, -61);\n    multilog("CRITICAL", "Database connection timed out");\n    multilog("FATAL", "CORRUPTED DATA DETECTED!!");',bt=t(2),gt=t(3);function ft(){return Object(d.jsx)("div",{id:"content",children:Object(d.jsx)(bt,{remarkPlugins:[gt],children:jt})})}var jt='\n# PB - midway review\n\nYesterday we did\n    - function parameter default values\n    - variable number of arguments\n\nThis week we will\n    - review\n    - more practice + a 90 minute basics test (coding challenge really)\n    - Objects\n\nToday we will\n    - review\n    - practice (old tasks + mini project)\n\n# TO KNOW\n\nWe need programming along with HTML + CSS to produce interactive, dynamic websites and applications.\n\nJavaScript programs are made up of statements, which are instructions to the computer. They are made up of expressions, keywords, operators and values. Generally Semicolons separate JavaScript statements, but are mostly optional.\n\nIn JavaScript we have expressions, which are bits of code that evaluate to a value, such as string, number or boolean.\n\nIn JavaScript the data handled by your code is stored in variables. Variables are declared by the `const`, `let` or `var` keyword. The `const` values are constant, not allowing a new value to be assigned to the variable after initialization. You must initialize a const variable with some value when you declare them. `let` variables allow reassignment and can be declared without assigning a value. `var` is similar to `let`, but should be avoided due to scoping issues.\n\nWe had a look at many operators, such as \n    - Arithmetic operators such as `- + * / %`- often used used for mathematical statements\n    - Assignment operators `= += -= *=` - often used to assign a value to a variable\n    - Boolean operators `&& ||` - often used to check things in conditionals    \n    - the Ternary operator `?`- often used to do one of two operations based on a boolean expression\n    \nJavaScript has a bunch of data types. We can check the type of a variable using `typeof`. We have mostly talked about the primitive data types Undefined, Boolean, Number and String. We have also talked about Functions and Arrays. Arrays are a special kind of Object - objects we will cover more in detail later.\n\nJavaScript keywords identify JavaScript actions to be performed. Keywords are for example `for, break, function, return, if`.\n\nJavaScript contains built in functionality for many common tasks, such as the Math built-in object for mathematical operations.\n\nWe run JavaScript with NodeJS (Node) using the `node` program. Node is usually good at reporting errors, giving us hints as to what went wrong and where.\n\nJS programs flow from top down; left to right. Code execution takes different paths depending on conditional statements, loops and function calls.\n\nConditional statements make the computer execute different bits of code based on a boolean condition. Loops can execute the same bit of code multiple times.\n\nJS programs often contain algorithms, and can even be thought of as algorithms. Algorithms are made of bits of code that solves a specific class of problems, such as calculating the average number or an array.\n\nJS programs often contain many blocks of code, often deeply nested; creating levels for variables to live in. When a variable is not scoped (contained) in any specific block, it is considered a global variable.\n\nFunctions are like mini programs in JavaScript. Many already exist and we can create many more. Functions that are associated with an Object or Class are called methods.\n\nFunctions that don\'t have any side affects are called pure functions. Side affects is anything in the function that reads, writes or accesses data outside of the arguments given to a function.\n\nA function can be called with zero, one or many arguments. The function definition defines parameters, which map the data provided to the function in arguments to variables (parameters) that can be accessed within the function.\n\nFunctions very often call other functions, so that there are multiple levels of functions being executed at any given time. This set of levels is called the `call stack`.\n\n## Solving code issues\n\nIf you can\'t seem to find where to start, start anywhere. Write out the concepts, write pseudocode. If you get stuck on a task, see the other tasks and remember to read all text.\n\nYour main tool, your text editor / VSCode helps us often, but cannot always be relied upon.MDN is a fantastic resource to use when facing specific technical questions.\nFor more general questions and help on algorithms, Google is your friend.\n    - "javascript reverse array"\n    - "javascript lowercase first letter"\n    - "javascript how can I calculate average\n    \nAlso, for many programming questions, the site StackOverflow is very useful if you are stuck on something alone and cannot solve it. Take care when writing questions; really think about what and how you are asking and when you give code examples, make sure your code is formatted well.\n\n## Longer coding example\n// TASK: calculates the average length of words in the given languages:\nconst sentences = [\n    "en I like cats and dogs",\n    "de Ich liebe Katzen und Hunde",\n    "es Me gustan los gatos y los perros",\n    "fr J\'adore les chats et les chiens",\n    "se Jag tykcer on katten och huden",\n    "fi Min\xe4 pid\xe4n kirista ja kissoista", \n    "jp Boku wa neko ni mo inu ni mo daisuki des", \n    "he Ani oeve hatulim ve klavim",\n];\nfor (let i = 0; i < sentences.length; i++) {\n    const sentence = sentences[i];\n    const words = sentence.split(" ");    \n    \n    let sumOfWordLengths = 0;\n    for (let j = 1; j < words.length; j++) {\n        const word = words[j];\n        sumOfWordLengths += word.length;\n    }    \n    \n    console.log(`${words[0]} ----\x3e ${Math.round(sumOfWordLengths / (words.length - 1))}`);\n}',wt=t(2),yt=t(3);function xt(){return Object(d.jsx)("div",{id:"content",children:Object(d.jsx)(wt,{remarkPlugins:[yt],children:vt})})}var vt='\n# PB - Data Structure - 1\n\nYesterday we did\n    - Review\n    - Test\n\nToday we will\n    - Start to learn about objects\n\n# Introduction\n\nData structures? More advanced ways of storing data. Data organization, management and storage format\nthat enables efficient access and modification. Arrays are data structures.\n\nData is stored in the working memory (RAM) of your computer; not in the persistent (hard drive) memory. \n\nAll variables are stored in the RAM, some programs take up a lot of memory.\n\n# Objects\n\nI *highly* suggest that you code along with me as I show examples.\n\n- like a basket for holding many related variables together inside\n    - in objects, data is stored as key-value pairs\n- objects can be thought of as a `namespace`; they allow you to store variables like "username" without getting naming conflicts. Not a super important term :)\n\n- often objects represent one concept, like a user or blog post\n- it\'s common to have an array of objects; like an array of users\n\n# Object literals\n\n- Remember Array literals?\n    - INTRODUCING Object literals!\n        - `const <nameOfObject> = { <key1>:<value1>, <key2>:<value2> };`\n        - the values can be any kind of value in JS\n\n- Keys / Variables inside objects, for example the `age` there, are called properties!\n- The last property in the list may end with a comma\n    - called a "TRAILING" or "HANGING" comma\n    - trailing commas make it easier to add/remove/move properties\n\n# Const or let?\n\n- When you create a `const` object variable, you can edit the stored object (its properties), but you cannot reassign the variable. The same is true for arrays. For const arrays we can edit the contents of the array, but we can not reassign them.\n\n        +-----------------+-------+------------------------+\n        | VARIABLE        | VALUE | MEMORY                 |\n        +-----------------+-------+------------------------+\n        | const myName    | Joel  |                        |\n        +-----------------+-------+------------------------+\n        | const myAge     | 94    |                        |\n        +-----------------+-------+------------------------+\n        | const petsArray | 0x001 | ["Veera", "Rauli"]     |\n        +-----------------+-------+------------------------+\n        | const userObj   | 0x002 | { name: "John Smith" } |\n        +-----------------+-------+------------------------+\n\n\n- Objects can contain arrays, and arrays can contain objects!\n\n- Accessing properties\n    - Get Values\n        - // bracket notation, like arrays\n        - console.log(product["description"]);\n        - // dot notation\n        - console.log(product.description);\n    - Set Values\n        - Bracket notation\n        - `product["price"] = 4;`\n        - Dot notation\n        - `product.description_id = "Test"`\n\n# The Type\n\n- The type - objects are objects\n    - Arrays are specific kinds of objects\n    - typeof {}\n    - typeof [1,2,3]\n    - To check if something is an array\n        - `Array.isArray()`\n        - console.log(Array.isArray({})); // false\n        - console.log(Array.isArray([1,2,3])); // true\n\n- Objects (and arrays), even empty ones, are truthy\n`console.log("Object truthy? ", Boolean({})); // true`\n`console.log("Object truthy? ", Boolean([])); // true`\n\n# Delete and add properties\n\n- You can completely remove properties using `delete`\n    - Remove the strength propety:\n    - `delete searchResult.strength;` \n\n- You can add new properties using the bracket or the dot notation\n    - puppy.color = "black";\n    - puppy["breed"] = "mixed";\n\n# COMPUTED PROPERTIES\n\n- We can use brackets in an object literal\n    - (that\'s called computed properties)\n    - With brackets, we can use a variable for the name of a property\n\n            const identifier = "_id";\n            const goat = {\n                name: "Mary",\n                [identifier]: 1234,\n            };\n            console.log(goat);\n\n# Tips and tricks\n\n- Note: Keywords / Reserved words in JS are allowed as property names\n\n        const anotherGoat = {\n        default: true,\n        function: 1234,\n        delete: "YEAH SOMETHING HERE"\n        };\n        console.log(anotherGoat);\n\n\n- "Property value shorthand"\n    - In the real world, it\'s very common to use variables to set object properties.\n    - When the property and the variable have the same name, we can shorten this!\n\n        const username = "Req";\n        const age = 11;\n\n        const user = {\n            username, // property value shorthand\n            age,  // property value shorthand\n        };\n\n\n',Ot=t(2),kt=t(3);function St(){return Object(d.jsx)("div",{id:"content",children:Object(d.jsx)(Ot,{remarkPlugins:[kt],children:Tt})})}var Tt='\n# PB - Data Structure - 2\n\nYesterday we did\n    - Object literals { age: 77 }\n    - Computed Properties { [propertyName]: "Admin" }\n    - Property value shorthand { username }\n    - Array and Object Typing\n        - typeof {} --\x3e "object"\n        - Array.isArray(someVariable)\n\nToday we will do\n    - Methods\n    - Object scope / object context\n\n> Reminder: Tools to help you review / learn\n> Edabit - for more problems to solve\n> freecodecamp.org - to practice syntax\n> Codewars (Thanks Lars!)\n\n# Before the lectures, a look at the previous task\n\nNow try to do it again :)\n\n# Methods\n\nWhat be a method?\n- "Methods are functions associated with an object (or class)"\n- "Methods are properties with function values"\n\nFor example - both of these functions are methods\n    - `Math.random()` - "random" is a funtion, "Math" is a built-in object in JS that someone else has made for us\n    - `Math.ceil(1.2345)` - "ceil" is a function, also associated with the "Math" object.\n\nCreating methods is really similar to creating normal functions\n\n# Object literal context\n\nMethods have one advantage over functions: they can refer to their associated object.\n\nIn a function definition, `this` refers to the "owner" of the function. In our `animal` example, the animal object owns the `charge` function. \n\nIn other words, `this.type` means the `type` property of the `animal` object.\n\nIn a function, the `this` keyword refers to the context ("the owner") in which the function is running.\n\n# Important note\n\nDue to the way that JavaScript functions work, you cannot use arrow functions for methods where you use the `this` keyword. \n\nWhen you take a method out of the object, it gets "unbound" from the original parent object.\n\nBinding = connecting = attaching a function to an object, without editing the original object.\n\n# Ultra quick simple new technique time\n\nThe "for...in" loop\n    - Useful for example when you don\'t know what properties an object has\n    - Useful for comparing objects\n\nNote: When comparing two objects, `object1 === object2` will always be false\n\n\n# Object Literal Method Shorthand\n\nA shorter way of writing methods in object literals :)\n\n# Reminder: Tools to help you review / learn\n\n> Edabit - for more problems to solve\n> freecodecamp.org - to practice syntax\n> Codewars (Thanks Lars!)',Ct=t(2),At=t(3);function Pt(){return Object(d.jsx)("div",{id:"content",children:Object(d.jsx)(Ct,{remarkPlugins:[At],children:It})})}var It='\n# PB - Data Structures - 3\n\nLast time we did\n    - Methods\n    - Object scope / object context: `this`\n    - the for...in loop\n\nToday we will do\n    - Yet Another For Loop!\n    - Object helper methods\n\nLater this week we will do\n    - Clone vs Reference\n    - Destructuring\n    - Nesting\n    - Advanced array methods\n\n\n# Quiz\n\n    WELL DONE EVERYONE!\n\n# New things\n\nRemember the `for...in` loop? That was used to loop over **object**.\n\nWell, introducing... `for...of` loop for **arrays**.\n\n# Object helper methods\n\n- Returns an array of keys / property names for our object\n- `Object.keys(<object>);`\n\n- Returns an array of values / property values for our object\n- `Object.values(<object>);`\n\n- Returns an array of arrays (key-value pairs of the properties) for our object\n- `Object.entries(<object>);`\n\n\n# Remember researching\n\nLearning how to research and find information is a vital skill.\nYou can research more of these on your own if you want or if you need!\n    Google "javascript stop object modification" \n',Bt=t(2),Mt=t(3);function Rt(){return Object(d.jsx)("div",{id:"content",children:Object(d.jsx)(Bt,{remarkPlugins:[Mt],children:Et})})}var Et='\n# PB - Data Structures - 4\n\nYesterday we did\n\n    - the for...of loop\n    - Object.keys(<object>)\n    - Object.values(<object>)\n    - Object.entries(<object>)\n\nToday we will do\n\n    - Quiz\n    - Terminology, tips and tricks\n    - Clone vs. Reference\n\n# Quiz\n\n# Terminology, Tips And Tricks\n\nMuch of this is from notes I have taken during class and when reviewing the tests.\n\nTerminology\n    () Parentheses\n    [] Brackets / Square brackets\n    {} Braces / curly braces / curly brackets\n    <> Less than & Greater than / angle brackets\n    : Colon\n    ; Semicolon\n    & Ampersand \n    | Pipe\n    * Asterisk, Star (also times, multipled by)\n    ^ Caret, Circumflex, "Hat"\n\nNotes\n    Pay close attention when to `return` form a function and when to `console.log` in a function\n        Use both with intention; know when and why have have them\n        "write a function that prints"... prob console.log\n        "write a function that returns"... prob return\n    The `return` is not a function.\n        Don\'t use parentheses with it unless you need to.\n    Pay attention to your code style    \n        Improves readability\n        Helps in finding errors too!\n    When you make a variable (including arrow functions!)\n        Use const if you can - otherwise use let\n        Avoid var :)\n    Try to follow instructions, even with strange return values and strange variable values\n        `please return "Potaeto !"`\n        "please make a function called "toBinaryString""\n        Read the instructions completely\n    Don\'t avoid reviewing fundamentals, it\'s not a waste of time!\n        Such as:\n            JS types\n            how to make a function\n            how for loops work\n    Think about how you name things.\n        Sometimes this really helps with thinking about a problem\n        Also helps with finding issues\n        Naming is hard!!!\n\n\n# Clones vs. References\n\nWhen we are calling a function with arguments, we are either giving the functiion a clone or a reference.\n\nSimple values, like numbers and strings are cloned/copied inside the function, so we will (for a VERY short time) in our computers memory the variable `myNumber` with a value of 7 AND at the same time the variable `x` also with the value 7. This is sometimes called "pass by value"\n\nObjects (and arrays) are not copied or cloned to function; a reference to them is given instead. This is sometimes called "pass by reference".\n\n# Hoooow can we clone an object then?!?\n\nCloning is hard.\n\nTrying to clone an object with the `=` assignment operator doesn\'t necessarily work the way you expect, because objects are references.\n\nThe spread operator (technically called the spread syntax) `...` is a convenient way to make a *shallow* copy of an array or object. Shallow - meaning that there is no nested arrays or objects. Shallow = not deeply nested. \n\nThe spread syntax "spreads" the array values or object properties where it is used.\n\n# Deep cloning technique\n\nYou can clone simple nested objects and arrays using a technique that uses `JSON.parse()` and `JSON.stringify()`. We will discuss both of them later, this is just one technique that uses them. This does not work for some fancier data / situations, but for most things this is fine. There are many other techniques online if you need them.\n\n\n\n\n\n\n\n\n',Dt=t(2),Nt=t(3);function Lt(){return Object(d.jsx)("div",{id:"content",children:Object(d.jsx)(Dt,{remarkPlugins:[Nt],children:Ut})})}var Ut='\n# PB - Data Structure - 5\n\nYesterday we did\n    Clone vs. Reference\n    Spread syntax\n\nToday we will do\n    Destructuring\n    Nesting\n\n# Destructuring\n\nNew and cool!\n\nThe two most common data structures in JS are Object and Array. When we pass data to a function, it may not accept an object or an array as a whole, but rather individual pieces.\n\n`Destructuring assignment` is a special syntax that allows us to "unpack" arrays / objects into separate variables. Sometimes this is more convenient. Destructuring also works great with complex functions that have a lot of parameters, default values and so on.\n\nIt\'s called "destructuing assignment" because it "destructures" by copying items into variables. The original array / object is not modified!\n\n## Examples!\n\n1. Destructuring arrays part 1\n2. Destructuring arrays part 2\n3. Destructuring arrays part 3\n4. Destructuring strings\n5. Destructuring objects part 1\n6. Destructuring objects part 2\n7. Destructuring objects 3\n8. Destructuring objects 4\n9. Destructuring objects edge case\n\n\n# Nesting arrays and objects\n\nOnly code samples for this one :)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ud83e\udda9',Ft=t(2),Wt=t(3);function Ht(){return Object(d.jsx)("div",{id:"content",children:Object(d.jsx)(Ft,{remarkPlugins:[Wt],children:Jt})})}var Jt='\n# PB - Data Structures - 6\n\nYesterday we did \n    Destructuring Arrays and Objects (and strings)\n    Nesting Arrays and Objects\n\nToday we will do\n    Advanced Array Methods!\n\n# QUIZ\n\n# Advanced Array Methods\n\n1. Looping through an array - a new method - `forEach`\n2. Converting an array to a different array - `map`\n3. Getting a subset of an array - `filter`\n4. Converting / reducing an array to a single value - `reduce`\n\nThese things we have looked at are called "higher-order functions"\n\n    "Functions that operate on other functions; either taking them as arguments or returning them"\n\nTaking an other function as an argument is often referred to as a callback function. This is because the argument is "called back" by the higher-order function. This is a concept that JS uses a lot.\n',Yt=t(2),zt=t(3);function qt(){return Object(d.jsx)("div",{id:"content",children:Object(d.jsx)(Yt,{remarkPlugins:[zt],children:Gt})})}var Gt='\n# PB - Classes - 1\n\nLast time we did way too much:\n    Intro to the Big O notation\n    Practice Reading Algorithms\n    Custom array sorting wit `Array.prototype.sort()`\n    Closures\n\nThis week we will do\n    CLASSES\n\nToday we will do\n    - what is OOP in general \n    - before we step into classes, let\'s look behind the scenes a bit...\n        - constructor functions\n        - prototype\n\n# Quick quiz\n\n# Object Oriented Programming\n\nPersonally, I don\'t love the way classes are implemented in JS and it\'s not common to see "pure" *Object Oriented Programming* (OOP) in JavaScript either. We won\'t go deep into the definitions or CS / theory.\n\nSo far, we have been doing *procedural programming* and now we will dip our toes into the water of OOP programming. Usually what is actually done is some kind of combination of these (and/or _functional programming_).\n\nIn some languages (Java, C#), almost everything is done with classes and objects; single functions don\'t really exist.\n\nIn OOP, you divide your code into separate, independent parts that take care of one concept in your code. These parts are your Classes. They can be equivalent to a real world thing, such as a "Product" or a "User" - or they can be a functional component of your program, such as "Logger" or "Database".\n\nThese different concepts that you have (User, Product) *encapsulate* the data related to a user or a product and also the functionality that they need. That is the theory. In the real world, especially in JS, this is not always the whole story. During learning the basics, we will focus on objects like User, Product or Book, because they are easy to understand.\n\nWe have already partly done this by using object literals.\n\nWhen your data and functionality is encapsulated within one concept, you can simply access the surface (interface) of that functionality, and not really care about how it works under the surface. In other words, some of the complexity is hidden - this is called *abstraction*.\n\nAlso, because the details are abstracted away, if the way we calculate salaries changes, most likely we just have to change one place (the inside of this function), not every place it is called.\n\nTo create these users or employees, we need a nice way to create lots of (almost) identical objects. This is done with Classes. Before we look into *actual* classes, let\'s look behind the scenes a bit.\n\n# Constructor functions\n\nThe object literal `{ name: "Jo" }` allows to create objects. Often we need to create many similar objects, like multiple users or menu items and so on. That can be done using *constructor functions* and the *new* operator.\n\nConstructor functions technically are regular functions. There are two conventions to follow: \n\n1. They are named with the first letter capitalized.\n2. They should be executed only with `new` operator.\n\n# EXAMPLE 1\n\nHere in example 1, it\'s the `new` operator that is doing the magic. First, we define a User and then we create a new user based on that definition. This is called *instantiation* and the objects created are called *instances* as in "jack is an instance of User".\n\nWhen a function is executed with `new`, behind the scenes it does the following steps:\n    1. A new empty object is created and assigned to `this`.\n    2. The function body executes. \n        Usually it modifies `this`, such as adding new properties to it.\n    3. The value of `this` is returned.\n\n    function User(name) {\n        // this = {};  (implicitly)\n\n        this.name = name;\n        this.isAdmin = false;\n\n        // return this;  (implicitly)\n    }\n\n# EXAMPLE 2\n\nSo `const rauli = new Pet("Rauli", "cat", 9)` gives a similar, but not the same result as:\n\n    const rauli = {\n        name: "Rauli",\n        type: "cat",\n        age: 9,\n    };\n\nNow if we want to create pets, we can just call new Pet(...) \n    - Shorter than using object literals\n    - Easy to read\n    - Makes consistent data - every pet WILL have a type\n    - Gives pretty nice console.logs\n\nThat\u2019s the purpose of constructors: to implement reusable object creation\n\n\n# EXAMPLE 3\n\nThis prevents misuse as technically, any regular function can be used as a constructor, as in any function can be run with `new` to run it as defined above. Even if they are not designed for that. Arrow functions specifically block that chance.\n\nThe "first letter capitalized" is a common agreement, to make it clear that a function is intended to be run with new.\n\n# EXAMPLE 4\n\nReturn from constructors? Constructors should not have a return statement. Their task is to write all necessary stuff into *this*, and *this* automatically becomes the thing that is returned.\n\nIf there is a return statement, then the rules are simple:\n    1. If `return` is used without anything, the *this* is returned.\n    2. If an object is returned, it\'s not really a constructor, just a function that returns an object.\n    3. If return is called with a primitive, it\u2019s ignored.\n\n    Someone tell me the primitives of javascript pls. Use google if you don\'t know.\n\n        - number, string, booleans\n\nTo put it simply: avoid using `return` in constructor functions.\n\n# EXAMPLE 5 - prototypes\n\nIf you want to learn more, self study.\n\nWe can edit constructor functions after creating them by accessing their "prototype" object.\n\nYou don\'t generally do this, so this is just an example.\n\n',Vt=t(2),$t=t(3);function Xt(){return Object(d.jsx)("div",{id:"content",children:Object(d.jsx)(Vt,{remarkPlugins:[$t],children:Kt})})}var Kt='\n# PB - Classes - 2\n\nLast time we did\n    constructor functions\n    a bit on prototype\n\nToday we will do\n    actual classes\n\n# Actual classes\n\nI think these are much nicer to read then constructor functions. Classes define a single concept, such as Product, User, MenuItem, Page or a Button.\n\n## EXAMPLE 1\n\nThe basic Class syntax in JavaScript\n\nTo use classes in JavaScript we need two new things. First, we need the `class` keyword and second we need a `constructor` - constructor is just a special function name. \n\nThen, we can again use the `new` keyword to create a new object based on this class. his, again, is called instantiation. With the `new` keyword we are creating a new instance of a Class.\n\n*THEORY*\nClasses in JavaScript are actually just "syntactic sugar" over the things we already know. \n\n> "Syntactic sugar is syntax within a programming language that is designed to make things easier to read or to write. It makes the language "sweeter" for human use: things can be expressed more clearly, more concisely, or in an alternative style that some may prefer."\n> - Wikipedia\n\nWhen you write a class, "under the hood" it gets converted into a constructor function and prototype things.\n\n    What the `class Pet {...}` syntactic sugar really does is:\n        1. Creates a function named Pet\n        2. That function becomes the result of the class declaration.\n        3. The function code is taken from the constructor method (empty if we don\u2019t make a constructor).\n        4. Stores methods in `Pet.prototype.`\n\n## EXAMPLE 2\n\nDefinition: A class is a blueprint or prototype that defines the variables and methods common to all objects of a certain kind. \n\nIt is common for classes to have multiple methods, not just the constructor.\n\n## EXAMPLE 3\n\nClasses are functions?!? \n\nUsually you can ignore this!\n\n## EXAMPLE 4\n\nClass Expressions\n\n## EXAMPLE 5\n\nStatic methods - these are functions that we call directly on the class, not its instances.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ud83d\udc2d \ud835\udc60\ud835\udc5e\ud835\udc62\ud835\udc52\ud835\udc52\ud835\udc58',_t=t(2),Qt=t(3);function Zt(){return Object(d.jsx)("div",{id:"content",children:Object(d.jsx)(_t,{remarkPlugins:[Qt],children:eo})})}var eo='\n# PB - Classes - 3\n\nYesterday we did\n    actual classes\n\nToday we will do\n    - properties, static properties\n    - The `Date` class\n\n# Quiz\n\n# Class properties and static properties\n\nClasses can have properties, kind of like objects can. In JS, these things are called "Class fields". Quite often these are just referred to as properties. This is a very new feature in JavaScript!\n\n## EXAMPLE 1\n\nClass fields are set on individual objects\n\n## EXAMPLE 2\n\nClass fields can be static too!\nStatic properties exist on the class, not the instances.\n\n## EXAMPLE 3\n\nClass fields are public by default, but they can be private too. NOT super important.\n\n\n\n\n\n\n# The Date class\n\nThis is the basic way of working with time stuff in JS. For instance, we can use it to store creation/modification times, to measure time, or just to print out the current date.\n\n> A JavaScript date is internally specified as the number of milliseconds that have elapsed since midnight on January 1, 1970, UTC. This date and time are not the same as the UNIX epoch (the number of seconds that have elapsed since midnight on January 1, 1970, UTC), which is the predominant base value for computer-recorded date and time values. - Wikipedia\n\nDates and times are very complicated to handle and the Dates in JavaScript are famous for being annoying. Very commonly big projects use external time libraries.\n\n## EXAMPLES',no=t(2),to=t(3);function oo(){return Object(d.jsx)("div",{id:"content",children:Object(d.jsx)(no,{remarkPlugins:[to],children:so})})}var so='\n# PB - Classes - 4\n\nLast time we did\n    properties, static properties\n    the `Date` class\n\nToday we will do\n    Nodemon\n    Inheritance\n\nNext monday (24.05) and tuesday (25.05) are days off, so no classes then!\n\n# Nodemon\n\nNodemon "Node monitor" is a tool commonly used when developing with Node. Nodemin is a utility that watches files and as soon as it notices a change in a file, it will restart your program.\n\nTo close nodemon you need to press `Ctrl+c`\n\nInstall nodemon `npm install -g nodemon`. This install nodemon Globally (the -g flag) meaning that you can use it from anywhere.\n\n# Inheritance\n\nClasses in JavaScript support inheritance using the `extends` keyword. For example in\n\n    class Parent { }\n    class Child extends Parent { } \n\nthe Child class inherits from Parent: the constructor, fields, and methods. In cases like this, the Parent class is sometimes called the base class and sometimes even the super class.\n\n# EXAMPLE 1 - Basic constructors\n\n# EXAMPLE 2 - Parent and Child constructors\n\n# EXAMPLE 3 - More complex use case\n',io=t(2),ao=t(3);function ro(){return Object(d.jsx)("div",{id:"content",children:Object(d.jsx)(io,{remarkPlugins:[ao],children:lo})})}var lo='\n# SPA - DOM - 1\n\nSingle Page Application\n\n## DOM\n\n- DOM or Document Object Model is an object-oriented representation of a web page\n- Based on standards\n\n\n- At the top you have a Document object\n- Then you have the root element `<html>`\n- And beneath that you have the tree of element nodes\n- Object oriented\n    - Elements (like `<a>`) are objects\n    - Element attributes (like href) are objects\n    - Even the text content of an element is represented with an object\n\n- Document it is what is rendered\n- This document is accessibile from javascript; it is a global variable called `document`\n- This allows us to change the HTML dynamically by controlling the objects\n\n# APIs\n\n- Application Programming Interface\n- Interface is the key word here\n- An API is like the interface between some internal logic, and some external thing that wants access to that logic\n- APIs exist between programs, between libraries, between computers\n    - Between basically any two concepts that communicate digitally\n- Some are APIs built into the browser\n- Other APIs are given by for example companies like Facebook\n- The API defines how external things can communicate with internal things\n- Details and complexity of the internal thing remains hidden\n\n- NodeJS has some different and some similar APIs than the browser\n\n# Add scripts to an HTML document\n\n- Loading a JavaScript file into the browser - like loading a CSS file\n\n- This is generally the recommended and best method (fastest)\n\n    `<script src="js/index.js">`\n\n- Often script tags are located at the end of the body\n    - This is to ensure that all elements have been loaded before running the JS code\n    - We will come back to this\n\n- Also you can work inline like with CSS\n\n    ```js\n    <script>\n        console.log("Henlo");\n    <\/script>\n    ```\n\n- For now, let\'s use just one JS file always\n\n- Big differences between running code inside NodeJS and running it in the browser\n- NodeJS doesn\'t have any graphical capabilities\n- NodeJS doesn\'t know anything about HTML, DOM or the browser window\n- Global objects like console and Math works pretty much in the same way in both of them\n- JS in the browser is actually run inside (in the context of) a global window object\n\n# The `window` object\n\n> The Window interface represents a window containing a DOM document; the document property (document property of the global window object) points to the DOM document loaded in that window.\n> https://developer.mozilla.org/en-US/docs/Web/API/Window\n\n## Host obects vs Native objects (vs User objects)\n\n- Can be a common interview question to explain these :)\n\n- Some objects that you can use that are defined right into ECMAScript\n    - Remember JS is a language that conforms to the ECMAScript specification\n\n- Native objects are fully defined by the ECMAScript specification\n    - So these are kind of supplied by JavaScript (ECMAScript) itself\n    - Date\n    - Math\n    - parseInt\n\n- Host objects\n    - Specific implementation of these is defined by the environment\n        - Meaning the browser, NodeJS or other\n        - Supplied by the envronment your code runs in\n    - window\n    - document\n\n- User objects\n    - This term is not used very often\n    - We can define our own stuff too!\n    - Like *class Book {}*\n\n## The window object built in logic\n\n- Example things that work in the browser in the global (window) scope\n\n    ```js\n    // Ye olde JavaScript message box\n    window.alert("Hello world!");\n\n    // Because "window" is the global scope, we can also just do\n    alert("Hello browser!");\n\n    // Ye olde prompt\n    const answer = prompt("Whats yer name, traveller?");\n    console.log(answer);\n    ```\n\n- Not used much, because they are not UX-friendly\n- OK to use until you find better options :)\n\n- Most of what we do with JS is interacting with the DOM\n\n# Querying / reading elements\n\n- Two main ways to actually select/target/look at elements on a page\n    - Both work very similarly to CSS selectors\n\n        .li {\xa0color: red; }\n        main .card p { color: blue; }\n\n    - Select a single element with Selector\n        - document.querySelector("#title");\n\n    - Select multiple elements with Selector\n        - document.querySelectorAll(".text");\n\n- Old but still common targeting method\n    - document.getElementById("title");\n\n# My First DOM Changes!\n\n- See code for examples!\n',co=t(2),ho=t(3);function uo(){return Object(d.jsx)("div",{id:"content",children:Object(d.jsx)(co,{remarkPlugins:[ho],children:mo})})}var mo='\n# SPA - DOM - 2\n\nYesterday we did\n    - Introduction to the DOM\n    - Introduction to the concept of APIs\n    - Introduction to Browser-specific stuff like the window\n\n    ```js\n    alert("Hey!");\n    const age = prompt("How old are you?");\n    const cards = document.querySelectorAll(".card")\n    const title1 = document.querySelector("#maintitle");\n    const title2 = document.getElementById("maintitle");\n    title1.style.color = "red";\n    ```\n\nToday we will do\n    - DOM Traversal\n    - More DOM manipulation\n\n# Nodes and Elements\n\n- You will see a lot of talk about Nodes and Elements\n- Node is a base class\n- Every single thing in the DOM tree is something based on Node\n- Elements are based on the Node class\n- When you have text in your HTML file\n    - Those bits of text are represented by a Text Node\n    - Text Nodes are Nodes, but they are not Elements\n\n- Node has some base functionality\n- Elements extend on that\n\n# Traversing: Jumping from one element to its relative\n\n- Finding more traversal techniques: MDN + Google\n- See code file from today\n\n# Manipulating: Changing the DOM tree\n\n- See code file from today',po=t(2),bo=t(3);function go(){return Object(d.jsx)("div",{id:"content",children:Object(d.jsx)(po,{remarkPlugins:[bo],children:fo})})}var fo="\n# SPA - DOM - 3\n\nYesterday we did\n    - Nodes VS Elements\n    - DOM traversal\n    - DOM Editing\n\nToday we will do\n    - Introduction to events\n        - Keyboard, mouse events\n        - Browser events\n        - Event delegation\n\n# Events\n\n- On websites, most things are reactive\n- Something happens, that triggers an event\n- There are two main kinds of events\n    - User Events and Browser Events\n\n- User Events\n    - something happens after you press a button\n    - something happens after you submit a form\n    - something happens when you move your mouse\n    - something happens when you resize your browser window\n\n- Browser Events\n    - something happens when page content is done loading\n    - something happens when a javascript error occurs\n\n- Your code can listen for events and react to those events\n\n# Listening\n\n- To listen to events, we need an event listener!\n- Event listener\n    - A function you make\n    - A callback function (higher order function)\n\n## Mouse, Keyboard and Browser Events\n\n- See code for examples\n",jo=t(2),wo=t(3);function yo(){return Object(d.jsx)("div",{id:"content",children:Object(d.jsx)(jo,{remarkPlugins:[wo],children:xo})})}var xo='\n# SPA - DOM - 4\n\nYesterday we did\n    - Introduction to events\n    - Keyboard, mouse and browser events\n\n    ```js\n    const butt = document.querySelector("button");\n    butt.addEventListener("click", (e) => { ... });\n    butt.addEventListener("mouseenter", (e) => { ... });\n    butt.addEventListener("mouseleave", (e) => { ... });\n\n    const input = document.querySelector("#email");\n    input.addEventListener("keydown", (e) => { ... });\n\n    document.addEventListener("DOMContentLoaded", (e) => {\n        ...\n    })\n    ```\n\n# Review Quote of the Day\n\nToday we will do\n    - The event object and form events\n    - Event propagation / delegation\n\n# The Event Object\n\n- Remember when we used the (e) parameter and e.keyCode in the kebyoard event listener?\n- That\'s the event object\n- Each event is represented by an object that is based on the Event interface\n    - This means all events have a certain common set of functions and properties\n    - Different events can also have custom properties\n        - depending on the type of event\n    - Some events happen on the window (resizing for example)\n    - Some events happen on elements (click for example)\n\n## Form events as an example, focusing on the event object\n\n# Propagation, Delegation\n\n## Event bubbling and propagation\n\n> "Events bubble from innermost to outermost elements" - Someone somewhere\n> Or they bubble up the DOM tree\n\n- Propagation == What kind of stuff happens when an event happens\n\nhttps://www.w3.org/TR/DOM-Level-3-Events/images/eventflow.svg\n\n- normally the event listeners we are defining work during the "bubble" phase\n\n- A common problem with bubbling is if we don\'t want the event to go to the parents\n    - use `Event.stopPropagation()`\n\n- Less commonly, we can also force the event listeners to work in the capture phase too\n    - use a third argument `useCapture`\n\n## Event delegation; Different Event Targets\n\n> Event delegation promotes binding as few DOM event handlers as possible, since each event handler requires memory. For example, let\u2019s say that we have an HTML unordered list we want to bind event handlers to. Instead of binding a click event handler for each list item (which may be hundreds for all we know), we bind one click handler to the parent unordered list itself.\n\n### To do that, we need to look at two event properties\n\n- `Event.target` vs. `Event.currentTarget`\n    - target is the element that triggered the event (e.g., the user clicked on)\n    - currentTarget is the element that the event listener is attached to.\n\n- When we add elements dynamically after the page is loaded, we need to then again create new event handlers for them unless we delegate.\n- Bad performance especially for long and changing lists\n',vo=t(2),Oo=t(3);function ko(){return Object(d.jsx)("div",{id:"content",children:Object(d.jsx)(vo,{remarkPlugins:[Oo],children:So})})}var So='\n# SPA - Modules - 1\n\nLast time we talked about\n    - Form events; submit and reset\n    - The event object\n        - e.preventDefault()\n    - Event propagation\n        - Event bubbling\n        - e.stopPropagation()\n        - Event capture and bubble phases\n    - Event delegation\n        - e.target vs e.currentTarget\n        - Event handler in Parent/Ancestor instead of all children\n\n# Introduction to modules\n\n## Code organization\n\n- Code organization is vital to maintaining large projects\n- There are usually some kind of rules or logic how projects are divided\n- For example images in one folder, CSS in one folder and JS in one folder\n- Often JS files can use other JS files directly\n    - So that you don\'t have to import many JS files in your HTML\n\n- In a big project you need this to keep your logic contained\n- Often JS code is divided into modules\n\n## Module Basics\n\n- One of the issues of having lots of JS code js the potential for naming collisions\n    - what if two JS files both use a global helper variable "users"?\n    - or the same helper function "getFirst()"?\n- The solution is scope isolation\n    - Somehow to isolate the scope and only "reveal" what we want to\n    - Encapsulating all of the details and helpers and such inside\n- Before we go into *actual* modules, there is one other method to talk about\n\n## Brief overview of IIFE\n\n- IIFE = Immediately invoked function expression\n- Oldschool\n- There are a bunch of ways of doing this; here is one quick way\n\n- https://developer.mozilla.org/en-US/docs/Glossary/IIFE\n- https://en.wikipedia.org/wiki/Immediately_invoked_function_expression\n\n\n#  The Module pattern as it is sometomes called\n\n> The Module Pattern is one of the important patterns in JavaScript. It is a commonly used Design Pattern which is used to wrap a set of variables and functions together in a single scope.\n\n> We expose certain properties and function as public and can also restrict the scope of properties and functions within the Module itself, making them private.\n\n- Advantages of scope isolation and encapsulation\n    - > Module Patterns enable better maintainability since all the related code can be encapsulated inside a single logical block. These logically independent blocks are relatively easier to update.\n\n    - > A single unit of code can be reused across the entire application. Functionality enclosed as a module can be reused and we do not need to define the same functions at multiple points.\n\n- Basically\n    - Having isolated bits of code makes the bits of code easier to maintain\n    - Having isolated bits of code makes the bits of code easier to copy\n    - Having isolated bits of code makes the project easier to divide\n    - Ecapsulation hides the complexity of parts of code\n\n- Modules are awesome for this\n- JS divided into modules often use .mjs for the file extension instead of .js\n- You use modules slightly differently than other js in the browser\n- Please Code along with me for this\n\n### Connecting files; imports and exports\n\n- We can use modules from other modules by importing and exporting\n\n',To=t(2),Co=t(3);function Ao(){return Object(d.jsx)("div",{id:"content",children:Object(d.jsx)(To,{remarkPlugins:[Co],children:Po})})}var Po="\n# SPA - Modules - 2\n\nLast time we talked about\n\n    Modules\n        named exports\n        default export\n        imports\n\nToday we will over\n\n    Transpiling / Bundling\n    NPM projects\n\n# Transpiling & Bundling\n\n- Not all browsers support Modules\n- Mainly IE11 doesn't\n- I hope you never have to support IE11\n\n- There might be other things too that maybe you want to use and that maybe only a few browser versions support\n\n- In that case you can reach for Transpilation of JS code.\n- Reminder: transpiling is basically taking code and changing it into different, but similar code\n    - Like SCSS to CSS\n\n## Babel\n\n- There are many tools to transpile JS, one of the most popular ones is called Babel\n- Babel says it's a compiler; transpliation is a type of compilation\n- Depending on settings, Babel will compile your code down to different versions\n- You kind of have to decide which target to support\n- MANY ways of using\n- For our example, you will need a NodeJS project\n\n## NodeJS Refresh\n\n- To have a proper NodeJS project, you need to run `npm init`\n- This creates a `package.json` file that describes your project\n\n## Babel example\n\n- Follow https://babeljs.io/setup#installation\n- In your settings, because we are using the preset-env, you could compile your cool code into different, very targeted versions\n- https://babeljs.io/docs/en/babel-preset-env\n- This gets complex fast, so we will just try out the basic options\n- Try to run, Create src, Create a simple output and run with node\n\n# Bundling\n\n- https://webpack.js.org/\n- Webpack is like a MEGA version of babel, capable of multiple languages and file formats.\n- Can do much more than transpile\n- Extremely flexible\n- Can and does use Babel in the background\n- Webpack can take our code, transpile it and bundle it up into neat little files\n- These Bundled files load faster than our source files\n\n- Webpack is run using node, but the output doesn't have to be run with node\n- Example project from scratch again\n\n# Npm workflow\n\n- Adding modules to our project\n",Io=t(2),Bo=t(3);function Mo(){return Object(d.jsx)("div",{id:"content",children:Object(d.jsx)(Io,{remarkPlugins:[Bo],children:Ro})})}var Ro='\n# SPA - Async - 1\n\nLast time we did\n    - Babel basics - transpiling\n    - Webpack basics - bundling\n    - NPM - using external packages and ... problem solving\n\n# Asynchronous programming\n\nThe web is built on consuming data.\n\n## Non-Blocking Promises\n\n- JavaScript programs are "single threaded"\n    - A program can do one thing only at a time\n    - never truly two things at the same time\n- Blocking vs. Non-Blocking code: A brief example\n    - Blocking operation\n        > When a web app runs in a browser and it executes an intensive chunk of code without returning control to the browser, the browser can appear to be frozen. This is called blocking; the browser is blocked from continuing to handle user input and perform other tasks until the web app returns control of the processor.\n        - Blocks all things on the page until is done\n    - Non-blocking\n        - When something is being done, allows other stuff to run\n            - (kind of like simulating multiple threads)\n        - Kind of similar to `window.setTimeout()`, not actually that\n        > Features like Promises allow you to set an operation running (e.g. the fetching of an image from the server), and then wait until the result has returned before running another operation\n\n## Race conditions: Reading non blocking code\n\n- We want to have code that doesn\'t block anything else\n- We also sometimes need to do operations that take some time\n- Don\'t follow along\n\n# Promises\n\n- Awesome way to deal with asynchronous operations\n- Synchronous: stop to wait for operation\n    > Normally, a given program\'s code runs straight along, with only one thing happening at once. If a function relies on the result of another function, it has to wait for the other function to finish and return, and until that happens, the entire program is essentially stopped from the perspective of the user.\n\n- Async: Do operation, run function after operation is done\n    > "The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value."\n\n- A promise is an object with a state:\n    - pending: not fulfilled, not rejected\n    - rejected: operation failed\n    - fulfilled: operation was completed successfully\n\n- You can create Promises!\n\n# JSON: ""JSON is JS Objects in text""\n\n- Converting objects and arrays to JSON\n    ```js\n        const users = [\n            { name: "Joel", age: 17 },\n            { name: "Abdul", age: 0 },\n            { name: "Carsten", age: 0 },\n            { name: "Kalaya", age: 0 },\n            { name: "Kai", age: 0 },\n            { name:"x", age: 0 }\n        ];\n        const usersJSON = JSON.stringify(users);\n    ```\n- Converting JSON to objects or arrays\n    ```js\n        const s = "[{"name":"Joel","age":17},{"name":"x","age":0}]"\n        const result = JSON.parse(s);\n    ```\n- JSON pitfalls\n    - JSON.parse(\'[1, 2, 3, 4, ]\')\n    - JSON.parse(\'{"foo": 1,}\')\n    - JSON.parse(\'{"foo": 01}\')\n    - JSON.parse(\'{"foo": .1}\')\n\n- Pretty JSON strings <3\n    - JSON.stringify(users, null, 3)\n    - the 3rd argument is key\n        - how many spaces it will use to indent values\n\n',Eo=t(2),Do=t(3);function No(){return Object(d.jsx)("div",{id:"content",children:Object(d.jsx)(Eo,{remarkPlugins:[Do],children:Lo})})}var Lo='\n# SPA-Async-2\n\nThis week we will\n\n    - learn more about Promises\n    - actually GET and POST some data with a server\n    - learn about requests and saving data\n\nLast time we looked at\n\n    - Promise basics\n    - JSON basics\n\nToday we will look at\n\n    - More promise stuff\n    - Error handling\n    - <script> async/defer\n    - Possibly also Debugging\n\n# Simplifying Asynchronous Code: Promises, level 2\n\n- Why use promise when simple callback do job?\n    - One reason is\n        - ""Callback hell, pyramid of doom""\n    - This sucks, let me show you what it means\n\n- **NOTE!!!!!** This a demonstration only!!\n    - In the real world this is bad code\n    - Because each request is waiting for (blocking) the others\n    - Even when they don\'t need to!\n\n- With promises, our code gets nicer\n    - DO CODE ALONG\n\n- This works, because .then returns a Promise!\n- If one of your promises fail\n  - the promise chain stops\n  - the .catch() is called\n- You CAN also handle individual errors, but it\'s not a super common need\n    - if you need to\n      - mdn\n      - research\n      - experiment\n      - stackoverflow\n\n## Problems with promises\n\n- A common issue is having scoping issues\n- This is a kind pseudocode example\n    - code along *if you* want\n    - but it\'s just an example\n\n  - we could use side effects;\n    - manually "hoist" the connection variable\n    - we could also nest the promise chains\n\n- There are many many many other secenarios where promises can "feel" wrong\n- Those are probably due to not realizing some aspect of promises\n- If you feel like you are doing something "wrong", try to google your situation\n\n- Another issue is actually the example above, which is still kind of difficult to read\n  - this we can also improve a bit in the next section\n\n# Using promises modernly:\n\n- \u2764\ufe0f async / await \u2764\ufe0f\n- Makes your asynchronous code read like synchronous code\n\n## `async` functions\n\n- ""Async functions always return a promise""\n- DO CODE ALONG\n- Also `async` sets us up to be able to use the `await` keyword\n\n## `await` keyword\n\n- Await is  like saying\n> "pause the execution of this function,\n> until the promise is resolved to a value"\n\n- we can "await" for the result of a promise\n- only works inside async functions And *Some* top-level scopes depending on version and other stuff too\n\n# Blocking parsing and rendering\n\n- Speaking of asynchronous stuff and blocking\n\n- We can use the `<script>` element attributes `async` and `defer` for increasing speed and performance\n\n  - async\n    - fairly rare\n    - when the browser sees this script tag, it will fetch it immediately, but parse it later\n    - runs after the HTML has been loaded\n    - runs AFTER DOMContentLoaded event\n  - defer\n    - more common\n    - when the browser sees this script tag, it will ignore it for now\n    - downloads script and runs it after the HTML has been loaded\n    - runs BEFORE DOMContentLoaded\n\n- Dynamic scripts injection\n\n# Runtime errors: try...catch\n\n- Compile time errors\n    - Happen when code is interpreted\n    - For example syntax errors\n- Runtime errors\n    - Happen when code is actually run\n    - For example when accessing an element that does not exist\n\n- Catching errors\n    - `try { ... } catch (e) { ... }`\n- Throwing runtime errors\n    - `throw <expression>;`\n    - `throw new Error("Something went wrong!");\n',Uo=t(2),Fo=t(3);function Wo(){return Object(d.jsx)("div",{id:"content",children:Object(d.jsx)(Uo,{remarkPlugins:[Fo],children:Ho})})}var Ho='\n# SPA-Async-3\n\nYesterday we did\n        - Pyramid of doom\n        - Async/await\n        - Errors\n\nToday we will\n        - Debugging\n        - do actual requests\n\n# Debug\n\n- This will be your VERY quick introduction to debugging\n- Huge topic, this is just the VERY surface\n\n- Debugging node scripts with vscode\n- Debugging node scripts with chrome\n\n- Shortly there are two main methods to debugging:\n    1. Starting a program process specifically for some debugging\n    2. Starting a program process normally and attaching a debugger to that process\n\n\n# fetch()\n\n- FINALLY we are actually getting data\n- We will do this with the global browser function fetch()\n\n> The Fetch API provides an interface for fetching resources\n\n- We will be using the service https://jsonplaceholder.typicode.com/\n- To experiment, create a new HTML file and a new JS file\n    - So that we don\'t need to make our own server **yet**\n\n# Getting data\n\n- fetch(url)\n- Parsing JSON: `.json()`\n- Using data:\n        `fetch(<url>).then(<callback>)`\n        `await fetch(<url>)`\n\n# Posting data\n\n- When we "discuss" with servers, we have multiple different verbs to use\n- The previous fetch used the verb "GET", which is the default\n- We can control fetch with the 2nd argument ("init" or "options")\n\n- The next verb we will learn is "POST"\n- POST is used to SEND data to a server :o\n- POST is also often used to send a `<form>` to a server\n\n# 3rd Party APIs\n\n- As developers, we use a lot of 3rd party APIs\n    - 3rd party: not the browser, not our server\n\n> Many large websites and services such as Google Maps, Twitter, Facebook, PayPal, etc. provide APIs allowing developers to make use of their data (e.g. displaying your twitter stream on your blog) or services (e.g. using Facebook login to log in your users).\n\n- The reason why we are learning async stuff is that we don\'t want the website to freeze while we are downloading twitter posts, for example\n\n',Jo=t(2),Yo=t(3);function zo(){return Object(d.jsx)("div",{id:"content",children:Object(d.jsx)(Jo,{remarkPlugins:[Yo],children:qo})})}var qo='\n# SPA-Async-4\n\n## Review one OR two of the tasks\n\nYesterday we did\n        - Debugging\n        - fetch()\n\nToday we will do\n    - Cross Origin Requests\n    - Review Promises\n\n# Cross Origin Requests\n\n- Go to https://www.google.com/\n- Run await fetch("http://www.facebook.com")\n- Blocked by CORS policy\n\n##  CORS: Cross Origin Resource Sharing, Accepted CORS headers\n\n- We are covering the basics quite well here\n- You don\'t have to remember everything\n- This is an introduction\n- Documentation exists: when you need it, use it\n\n> CORS is an HTTP-header based mechanism that allows a server to indicate any other origins than its own from which a browser should permit loading of resources.\n\n- For security purposes, when on website X, CORS does not allow scripts to request data from website Y\n    - A few other things are affect, but we are focusing on requests made by fetch() to API endpoints\n    - This is called the same-origin policy\n\n- So if you are on www.suspicious-site.com you cannot access www.facebook.com\n    - This is so that the suspicious site cannot load facebook or bank using your browser\n    - (You might be logged into facebook / bank and it would download all your data)\n\n- Requests ARE allowed between the same origin, though\n    - when on facebook.com, you can do requests to facebook.com/user\n\n- The origin of the site consists of\n    - the scheme (http / https)\n    - the hostname / domain name (localhost / facebook.com / mybank.de)\n    - the port (80, 3000, 8080, 5501, etc)\n\n- However, servers can specifically allow you to request their data from any domain\n    - This is usually done from public APIs, such as the API for getting twitter messages\n    - Servers can also allow for example GET requests, but not POST requests\n\n### Headers\n\n- fetch("https://jsonplaceholder.typicode.com/users")\n- When we do requests to servers, we are sending a bunch of metadata\n    - for example information about the request\n- These are called headers\n\n- When you make a request, you are sending headers\n    - You are sending for example an "Origin" header automatically, which contains what page are you on\n    - Browsers add this header automatically\n    - There is a way to disable it, but don\'t -- it\'s a critical security tool\n        - (We won\'t go into why; I don\'t even fully understand it; something something CSRF attacks)\n    - If that header is not present, it\'s not a browser that\'s requesting\n\n- If the server notices an origin where it allows requests from, the request is accepted\n        - When the server responds, it sends some headers too\n        - The server response will contain a header called Access-Control-Allow-Origin with each request\n        - this header defines that the request is allowed\n        - This header actually instructs the Browser to allow the JavaScript to run\n\n- In some cases, you might be even forced to do what is called a preflight request\n    - this means, that you do an OPTIONS request, then when that is approved you do your actual request\n    - this is mostly done by the browser automatically :)\n    - the exact criteria when this is needed is complex (MDN)\n\n- You can set headers during your request, but some of them are still automatic\n\n```js\n// no preflight\nfetch("https://jsonplaceholder.typicode.com/users", {method:"POST", body:"x"});\n\n// preflight\nfetch(\n    "https://jsonplaceholder.typicode.com/users", \n    {method:"POST", body:"x", headers: {"test": 12354}\n});\n\n// preflight, origin does not change\nfetch(\n    "https://jsonplaceholder.typicode.com/users",\n    {method:"POST", body:"x", headers: {"test": 12354, "origin": "facebook.com"}\n});\n\n// no preflight, origin does not change\nfetch(\n    "https://jsonplaceholder.typicode.com/users",\n    {method:"POST", body:"x", headers: {"origin": "facebook.com"}\n});\n```\n\n## What about server - server communication?\n\n- NO CORS IN Server to Server communication\n- If you DO want to access an API that does NOT allow cross-origin requests\n- You will need to have a server in between\n- https://miro.medium.com/max/1400/1*Gr3T_pkgMBbZw4v6Mjcm0g.png\n- If the only thing the server does is bounce request between your frontend and the server, it\'s called a Proxy server\n- Can be NodeJS, but doesn\'t have to be\n- The security on the server is up to you, the server can\'t read your facebook or bank stuff :)\n\n- There are even ready made servers specifically for proxying, one of them is called cors-anywhere\n\n\n# Review Promises in general\n\n- Awesome way to deal with asynchronous operations\n\n- Synchronous: stop to wait for operation\n\n    > Normally, a program\'s code runs straight along, with only one thing happening at once.\n    > If function X relies on the result of function Y, it has to wait for function Y to return.\n    > Until that, the entire program is essentially stopped from the perspective of the user.\n    > Dat not good.\n\n- Async: Do operation, run function after operation is done\n\n    > Asynchronous functions can be run in parallel.\n    > Function X can be run after function Y has completed.\n    > When function Y takes a long time complete, the program is not stopped.\n    > The program can do other things and function X runs whenever Y is done.\n\n- To help with async, we have Promises.\n\n    > "The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value."\n\n- So, like a promise in the real world\n\n    > I promise to do the dishes.\n    > When that Promise is successfully completed (resolved), we can get cake.\n    > When that Promise is failed (rejected), I will buy you flowers.\n\n    - We don\'t know how long the Promise will take, but eventually we will either get cake or flowers\n\n- A Promise is an object with a state\n    - The Promise is pending: not resolved, not rejected, just waiting...\n    - The Promise is rejected: operation failed\n    - The Promise is fulfilled: operation was completed successfully\n\n- LOTS of functions return promises (like fetch())\n- We can make promises manually too\n',Go=t(2),Vo=t(3);function $o(){return Object(d.jsx)("div",{id:"content",children:Object(d.jsx)(Go,{remarkPlugins:[Vo],children:Xo})})}var Xo='\n# SPA-Async-5\n\nYesterday we did\n    - Cross-Origin Resource Sharing / CORS\n    - Promise review\n\nToday we will do\n    - fetch review (Assistant test lesson!)\n    - megashort async/await review\n    - Saving data in the browser\n\n# Saving data: use cases for saving data in the browser\n\n- Browser technology\n- Web Storage API\n\n> - Web Storage API provides mechanisms by which browsers can securely store key/value pairs\n\n- Two Methods of storing\n    - `sessionStorage`\n    - `localStorage`\n\n- VERY SIMILAR\n    - data is saved as key/value pairs```js\n    sessionStorage.setItem("quokka", "cute")\n\n    ```Storage.setItem(<key>, <value>)`\n    - `Storage.getItem(<key>);`\n    - `Storage.removeItem(<key>);`\n    - `Storage.clear()`\n\n## SessionStorage\n\n- Page is loaded in tab; this creates a page "session" for that tab\n- These page sessions last as long as the tab\n    - Reloads do not remove this session\n    - Session cleared / removed when the tab closes\n- Opening multiple tabs with the same document (same address), opens new storage sessions\n- Duplicating a tab duplicates the sessionstorage session of the tab as well\n\n```js\nsessionStorage.setItem("quokka", "cute") // save value\nsessionStorage.getItem("quokka")         // get value\nsessionStorage.clear()                   // remove all values\nsessionStorage.getItem("quokka")         // get value\n```\n\n## LocalStorage\n\n- like sessionStorage, but....\n    - doesn\'t expire when the tab closes\n    - shared between tabs (in the same origin)\n    - saves data in the browser\n\n```js\nlocalStorage.setItem("quokka", "cute") // save value\nlocalStorage.getItem("quokka")         // get value\nlocalStorage.removeItem("quokka")      // remove single value\nlocalStorage.getItem("quokka")         // get value\n```\n',Ko=t(2),_o=t(3);function Qo(){return Object(d.jsx)("div",{id:"content",children:Object(d.jsx)(Ko,{remarkPlugins:[_o],children:Zo})})}var Zo='\n# SPA-Boilerplate-1\n\nToday we will\n    - introduce React\n\n# Framework\n\n- MVC Concepts: V is for View (Brief Definition)\n    - Model, View, Controller\n    - MVC is an overused and abused term\n    - This is a bit silly \n    - IMHO React doesn\'t really have anything to do with actual MVC\n        - Or if it does, it\'s mostly just the "V"\n        - Unless you use it in a funky kind of way or distort the meaning of MVC\n    - This discussion is academic in nature\n\n- Framework obsession: Overview of the JS Framework landscape\n    - TONS of frameworks because:\n        - JS is easy to start with, but hard to get perfect\n        - MANY different problems to solve in development\n        - MANY different approaches to those problems\n        - MANY different opinions, no single source of truth on what is the "right way" of doing JS\n    - Frameworks change and evolve over time\n\n# React Intro\n\n[React intro slides](./React-intro-slides.pdf)\n\n- Why react? \n    - popular (lots of support and jobs)\n        - https://trends.google.com/trends/explore?date=today%205-y&q=react%20framework,angular%20framework,vue%20framework,ember%20framework,backbone%20framework\n    - nice to learn AND powerful\n    - good platform for future growth in MANY directions\n\n- React Ecosystem\n    - React Native, Expo framework, Gatsby, Nextjs\n    - LOTS of fantastic tools and components to use with React\n\n- What about the Web Component Standard?\n    > React and Web Components are built to solve different problems. Web Components provide strong encapsulation for reusable components, while React provides a declarative library that keeps the DOM in sync with your data. \n\n- React is a living framework, constantly updated\n    - Modern React Development with Hooks\n    - We will learn about Hooks, which is the latest modern way of using React\n    - I don\'t like hooks\n    - We will also learn about the older way of working with React\n\n# Quickstart with Create React App\n\n- Starting a react project\n\n```js\n    npx create-react-app my-first-react-app\n```\n\n\n- Project structure:\n    - `.gitignore` - default gitignore\n    - `REAMDE.md` - default readme\n    - `package.json` review content\n    - `src` folder - all of your source\n    - `public` folder - these files can / will be downloadable by the browser directly\n    - `build` folder - your production version, made by `npm run build`\n\n- Render in React: `index.js`\n    > StrictMode is a tool for highlighting potential problems in an application. StrictMode does not render any visible UI. It activates additional checks and warnings for its descendants.\n\n# Component Anatomy: Dissecting `App.js`\n\n- Entry Point: `App.js`, the boilerplate `App` component\n- Including styles: `import <path to css>`\n    - all of the imports are handled by webpack, hidden by create-react-app\n- Importing images: `import <image name> from <path to image>`\n- Using images: `<img src={imageName} alt=""..."" />`\n\n\n# Templating with JSX: Slightly different html\n\n- Multi-line templates: `const <component name> = () => (<JSX>)`\n- One element per component: `React.Fragment` for multiple html tags\n- Put the JS in JSX: Using `{}` for JS expression interpolation\n- Comments in JSX\n- You WILL see differences between HTML and JSX, luckily - the tools don\'t suck :) (show parsing error)\n    - Because it\'s more XML than HTML, ALL tags need to close\n    - We also need slightly different attribute names at times\n        - class vs className\n\n# Debugging React with "React Developer Tools"\n',es=t(2),ns=t(3);function ts(){return Object(d.jsx)("div",{id:"content",children:Object(d.jsx)(es,{remarkPlugins:[ns],children:os})})}var os="\n# SPA-Component-1\n\n- Yesterday we looked into creating React apps with create-react-app \n- We will review that today and talk more about components\n- Before that, however - let's do the task from yesterday together\n    - Talk about CSS scoping\n\n# Introduction: Thinking in Components\n\n> Components let you split the UI into independent, reusable pieces, and think about each piece in isolation.\n\n- We already did very simple functional components\n- Thinking in components\n    - Components are used to create abstraction for any level of detail\n        - A button, a form, a dialog, a screen, a section...\n        - In React apps, all those are commonly expressed as components\n    - Very commonly, components are either repeating parts of a page or self-contained parts of a page\n    - Balance between components and HTML elements\n    - Don\u2019t be afraid to split components into smaller components\n        - There is no rule as to which things are components or how big components should be\n\n# Two types of components; Class and Functional\n\n- Difference between Class & Functional component\n- First of all, there are some really bad and outdated information on Google\n    - Mainly: functional components _can_ have state and lifecycle methods in modern versions of React!!\n- AFAICS, both can do the same things in modern versions of React\n    - But the syntax differs greatly\n    - Functional components are thought of as more modern\n- The big syntax differences will come later\n    - with event handlers and lifecycle methods\n\n- EXAMPLE TIME!\n    - `$ npx create-react-app coming-soon-page`\n\n# Nesting Components\n\n- Now as you can guess, projects start to have a lot of components _quickly_\n- The organization of those components is important\n\n> React doesn\u2019t have opinions on how you put files into folders\n\n- One common project organization method is having one `components` folder\n- It might contain all components - often except for `<App>`\n- Then you might order them with additional folders, such as grouping by features:\n\n    components/\n        common/\n            Avatar.js\n            Avatar.css\n        feed/\n            Feed.js\n            Feed.css\n            FeedStory.js\n        profile/\n            Profile.js\n            ProfileHeader.js\n            ProfileHeader.css\n\n- Don't overthink it\n    > If you\u2019re just starting a project, don\u2019t spend more than five minutes on choosing a file structure\n    > Pick any -- (or come up with your own) and start writing code!\n    > You\u2019ll likely want to rethink it anyway after you\u2019ve written some real code.\n\n- So create a component when\n    - You notice a repeating element\n    - You notice a part of code (or your page) that makes sense on its own\n\n- And remember, you can always change your mind later :)\n\n",ss=t(2),is=t(3);function as(){return Object(d.jsx)("div",{id:"content",children:Object(d.jsx)(ss,{remarkPlugins:[is],children:rs})})}var rs="\n# SPA - Component - 2\n\nYesterday we talked about Components\nToday we will look at the basics of state and event handling in JSX\n\n# Interaction\n\n- First, let's create a simple base app\n    - Code along with me!\n\n- Setting event handlers inline in JSX\n    - Done with JSX attributes, like onClick\n    - onClick and similar attributes take in a JS function\n\n        `<button onClick={() => console.log(123)}>Button</button>`\n    \n    - This is an inline event handler\n    - You can also use a function defined elsewhere\n\n        `<button onClick={this.handleClick}>Button2</button>` (example when using a class based component)\n    \n # Manipulating state in events\n\n- State???\n\n> The heart of every React component is its \u201cstate\u201d, an object that determines how that component renders & behaves. In other words, \u201cstate\u201d is what allows you to create components that are dynamic and interactive.\n\n- \"The state of the component\"\n    - Or the status of the component\n- We will work with state a lot in the future too\n\n\n- Rules about state\n    - 1. Do Not Modify State Directly\n\n        ```js\n            // wrong!\n            this.state.comment = 'Hello';\n            // Correct\n            this.setState({ comment: 'Hello' });\n        ```\n    - 2. State Updates are Merged\n        - When you call setState(), React merges the object you provide into the current state.\n    - 3. State changes may be Asynchronous\n",ls=t(2),cs=t(3);function ds(){return Object(d.jsx)("div",{id:"content",children:Object(d.jsx)(ls,{remarkPlugins:[cs],children:hs})})}var hs="\n# DAY 3\n\nYesterday we started working on \n    - React event listeners \n    - React state\n\nToday we will focus on\n    - the SPA-Codelicious-todos as our example application\n    - basic state in functional components\n    - data flow\n    - props / state\n\n# State in functional components\n\n- In class-based components we had\n    - constructor with `this.state = { message: null }`\n    - state changes with `this.setState({ message: \"Hello React!\" })`\n\n- In functional components we must use React Hooks\n    > Hooks are a new addition in React 16.8.\n    > They let you use state and other React features without writing a class.\n\n- The first hook we will learn is `useState()`:\n    - `import { useState } from 'react';`\n    - `const [fruit, setFruit] = useState('banana');`\n\n## Full example of state in functional component\n\n```jsx\nfunction ClickCounter() {\n    const [count, setCount] = useState(0);\n    return (\n        <button onClick={() => setCount(count + 1)}>\n            Button has been clicked {count} times\n        </button>\n    );\n}\n```\n\n# Data flow / Props\n\n> Conceptually, components are like JavaScript functions.\n> They accept arbitrary inputs (called \u201cprops\u201d) and return \n> React elements describing what should appear on the screen.\n\n- Information flows from Component to Component mainly with props (properties)\n\n- Props is the standard way of transferring information from one Component to another\n    - Remember, State: Information that is stored in a component, relating to that component\n\n- We can pass data *and functions* from parent component to child component\n\n## Passing arguments to Child components\n```jsx\n    <ChildComponent propertyName={propertyValue} />\n    <Greeting name=\"Joel\" />\n```\n\n## Accepting props in Functional Child components\n\n- The Props is accepted by child components as an object\n```jsx\n    function ChildComponent(props) {\n        // do something\n    }\n```\n\n## Accepting props in Class-based Child components\n```jsx\n    // EITHER\n    class ChildComponent extends React.Component {\n        constructor(props) {\n            super(props);\n            // do something\n        }\n        // do something\n    }\n\n    // OR IF YOU DON'T SPECIFICALLY NEED THE CONSTRUCTOR\n    class ChildComponent extends React.Component {\n        // do something\n    }\n```\n",us=t(2),ms=t(3);function ps(){return Object(d.jsx)("div",{id:"content",children:Object(d.jsx)(us,{remarkPlugins:[ms],children:bs})})}var bs="\n# SPA - Component - 4\n\nLast time we did\n    - state in functional components\n    - props\n\nThis time we will look at\n    - dealing with forms\n\n# Handling Forms\n\n- The core of React revolves around state\n- Vanilla HTML forms already contain state information\n    - Is the checkbox checked\n    - What is written in the input\n- These two state management systems clash, and we have to deal with that\n\n## Controlled components\n\n- React (naturally) wants to be the single source of truth regarding state\n- Enter Controlled components\n    - This means inputs where React state controls the value\n    - This is not trivial\n\n## Referencing  elements\n\n- *NOTE* This is something that you do all the time!\n- Mutable ref objects\n    - Any element inside your JSX can have a ref attribute\n    - This is commonly used as a reference to a rendered HTML element\n\n    - UseRef can be used for other stuff too, basically saving information that can change\n    - ... But don't use useRef for state management!\n",gs=t(2),fs=t(3);function js(){return Object(d.jsx)("div",{id:"content",children:Object(d.jsx)(gs,{remarkPlugins:[fs],children:ws})})}var ws="\n# SPA - Component - 5\n\n    20.09.2021 start of application phase\n    10.01.2022 start of internship phase\n    04.03.2022 start of graduate/alumni phase\n\nLast time we looked at\n    - handling forms / controlled components\n    - review of `fetch()`\n    - the `useRef()` hook for functional components\n    - `createRef()` for class based components\n\nThis time we will practice\n\n# Review!\n\n- Customize VSCode\n\n- What do you do when you are faced with a project?\n\n        A. No package.json file --\x3e use `npx create-react-app <app name>` and copy the files over\n        B. No package.json file --\x3e use `npm init`, manually add the dependencies\n        C. The package.json exists, and contains stuff about react --\x3e `npm install`\n        D. The package.json exists, and does not contain stuff about react --\x3e manually add dependencies\n        E. New project, nothing exists yet --\x3e `npx create-react-app <app name>`\n        F. New project, nothing exists yet --\x3e create folder, `npm init`, manually add the dependencies\n\n# Mini login form example from scratch\n\n1. Create project folder and change to that folder\n2. Create initial package.json; `npm init`\n2. Add dependencies; `npm install --save react react-dom react-scripts`\n3. Create missing src and public folders\n4. Create index.html into the public folder\n5. Create index.js into the src folder\n6. Test that it works :)\n7. Intialize git; `git init`\n8. ???\n9. Victory!\n",ys=t(2),xs=t(3);function vs(){return Object(d.jsx)("div",{id:"content",children:Object(d.jsx)(ys,{remarkPlugins:[xs],children:Os})})}var Os="\n# SPA - Component - 6\n\nToday we will focus on\n\n    - Styles in React\n        - Inline styles\n        - Bootstrap\n        - SASS/SCSS\n        - Styled Components\n\n# Styling\n\n- Start by cloning https://github.com/FbW-E01/SPA-Component-Minireact\n- Who can remember how to create a new branch?\n- Create branch with your github username as the name\n\n    `git checkout -b Req`\n\n- Then install the dependencies\n    \n    `npm install`\n\n- I want everyone to push what they have done after the class!!\n\n## Classes\n\n- Still the primary way of using styles for elements\n- Weather it's regular CSS or SCSS or LESS or SASS\n\n## Inline styles\n\n- Styling with classes + css is better!\n- But you should know how this generally works\n- The style attribute accepts a JavaScript object (not a string)\n- The properties should be camelCased\n\n- React will automatically append a \u201cpx\u201d suffix to certain numeric inline style properties.\n\n    ```jsx\n        // Result style: '100px'\n        <div style={{ height: 100 }}>\n            Hello World!\n        </div>\n\n        // Who can tell me why we have two curly braces?\n\n        // Result style: '100vh'\n        <div style={{ height: '100vh' }}>\n            Hello World!\n        </div>\n    ```\n\n- Not all style properties are converted to pixel strings\n- Certain ones remain unitless (eg zoom, order, flex)\n- A complete list of unitless properties is in the documentation\n\n##  Including Bootstrap in our project\n\n- We have already used one way\n    - Bootstrap CSS added directly in index.html\n\n- There is also an npm package for that!\n    - https://react-bootstrap.github.io/\n    - `npm install --save react-bootstrap bootstrap@5.0.2`\n    - `import 'bootstrap/dist/css/bootstrap.min.css';`\n    - `import Alert from 'react-bootstrap/Alert';`\n    - `<Alert variant=\"primary\">Hi</Alert>`\n\n## Adding support for sass/scss\n\n- React/Web dev is constantly changing and evolving...\n- The reason why we had so many versioning issues is because\n    - https://github.com/facebook/create-react-app/issues/9628\n    - So issues specifically related to node-sass (in many old repos that we have)\n    - --\x3e Try updating the dependencies so that you use sass (Dart sass / https://www.npmjs.com/package/sass) instead of node-sass - that seems to make most of the issues go away\n\n- `npm install --save sass`\n- Everything after that is automagical\n- We can just import our .scss files and they just work\n\n\n## Styled Components\n\n- Another popular way of styling React Applications\n- Yet Another npm package!\n- You define mini components with template literals and CSS!\n- These components often break the rule of \"one component per file\"\n- But they should still have capitalized names!\n- https://styled-components.com/\n- Let's look at the basics of styled components\n",ks=t(2),Ss=t(3);function Ts(){return Object(d.jsx)("div",{id:"content",children:Object(d.jsx)(ks,{remarkPlugins:[Ss],children:Cs})})}var Cs="\n# SPA - Component - 7\n\nLast time we did Styling in React\n\nToday we will look at Component Lifecycles - part 1\n\n# Introduction: Each component has a lifecycle\n\n- I encourage you to code along with me when I start\n- Use any project you have laying around\n\n- A React component has many stages to its existence\n- When it is being constructed\n- When it is *mounted* (added) to the DOM\n- When data changes and it needs to re-render itself\n- When it is *unmounted* (removed) from the DOM\n    - Components are removed quite often\n    - For example a `<Menu>` component might only be added to a page after the user clicks some menu button\n    - Then when the user clicks the button again or selects something in the menu, the menu will be removed\n\n- This mounting/unmounting is an example of Lifecycle events in a React component\n\n## Mounting and Unmounting\n\n- Let's examine lifecycle events first through class based components\n- I will just use an exsting project for simplicity\n- Let's see an example of Mounting and Unmounting\n",As=t(2),Ps=t(3);function Is(){return Object(d.jsx)("div",{id:"content",children:Object(d.jsx)(As,{remarkPlugins:[Ps],children:Bs})})}var Bs='\n# SPA - Component - 8\n\n- Last time we started on lifecycle methods\n\n- Today we will do the same focusing on functional coponents\n\n# Each component has a lifecycle - part 2\n\n- We will again make a very small application as a demonstration\n- Please code along, you can use any old existing project you have :)\n\n# Lifecycle mini review\n\n- Component is first executed ("rendered")\n- Component result is added to DOM\n- If changes to state or props\n    - Render again\n    - Change DOM accordingly\n- Component gets removed from DOM, if necessary\n\n# Component Lifecycle in functional components\n\n- With functional components we need to work with *hooks* like `useEffect` instead of the lifecycle methods\n    - For **class based components** we had\n        - `constructor()`\n        - `componentDidMount()`\n        - `componentWillUnmount()`\n        - `render()`\n\n> The useEffect hook is used to perform side effects in functional components\n- What were side effects?\n    - When a function changes (or accesses) a variable that is outside of the function\n- By using this hook, you tell React that your component needs to do something after the render\n- It is not exactly the same as componentDidMount\n    - Rather it is its own thing that happens to be used for similar things\n\n> Instead of thinking in terms of \u201cmounting\u201d and \u201cupdating\u201d, you might find it easier to think that effects happen \u201cafter render\u201d. React guarantees the DOM has been updated by the time it runs the effects.\n',Ms=t(2),Rs=t(3);function Es(){return Object(d.jsx)("div",{id:"content",children:Object(d.jsx)(Ms,{remarkPlugins:[Rs],children:Ds})})}var Ds='\n# SPA - Component - 9\n\nYesterday we talked about the useEffect hook.\n    - Hooks are hard and it\'s a really hard one\n    - Don\'t feel bad if you didn\'t 100% understand it immediately!\n\nToday we will\n    - Quiz\n    - High level review\n\n# QUIZ\n\n## What does `npm init -y` do?\n> --\x3e generates package.json without asking questions\n\n## What does `npm install` do?\n> --\x3e Installs dependencies from package.json into node_modules\n\n## How can I see what happens if I run `npm run potato`?\n> --\x3e You can see your package.json file; the "scripts" part\n\n## How can I add a new dependency into our project, so that it is saved into package.json?\n> --\x3e Run a command `npm install --save <package name>` or edit package.json directly.\n\n## What is *ReactDOM*?\n> --\x3e Node package that renders React applications to the DOM.\n\n## Tell me how to make a mini functional component?\n> --\x3e `function SmallComponent(){ return (<div>Hello World</div>) }`\n\n## Tell me how to make a mini class based component?\n> --\x3e \n> `class ClassComponent extends React.Component {`\n> `   constructor() {  super(); }`\n> `   render() {`\n> `     return <div> Hello Lars? </div>  `\n> `   }`\n> `}`\n\n## What does the "extends" above actually mean / what does it do?\n> --\x3e It causes our class to "extend" React.Component\n> --\x3e It makes it so that our class is inherited from React.Component\n> --\x3e It tells our class to use React.Component as the base class \n\n## What is "conditional rendering"; what is the first thing that comes to your mind from those words?\n> --\x3e Like in regular JS conditionals; we can render things depending on a condition.\n> `// Conditional rendering using a ternary statement here:`\n> `render() {`\n> `   return <div> `\n> `      { this.state.messageCount > 0 ? <MessagesList /> : <p>No messages</p> }`\n> `   </div>;`\n> `}`\n\n## What is the difference between these two?\n> `import React from \'react\';`\n> `import { useState } from \'react\'`\n> --\x3e First one is for default exports\n> --\x3e Second one is for named exports\n\n## What is the role of the "public" folder in our react apps? \ud83e\udd14\n> --\x3e Used for assets; folder where we have every file that can be directly downloaded by the browser.\n\n## What is the role of the "src" folder in our react apps?\n> --\x3e The "source" folder; everything relating to JS, React and CSS. Possibly images.\n> --\x3e Images in the source folder are usually imported into Components, then our build system copies them automatically into publically available versions.\n\n## Tell me two ways of getting an empty repository on your machine when starting a new project :)\n> --\x3e 1. Create folder, then `git init`\n> --\x3e 2. Create repository in GitHub, then `git clone <address>`\n\n## Assume that this is part of a React Component. How do I prevent the form from being submitted?\n> `<form method="post" target="index.php" ?????> ... </form>`\n> --\x3e You can use `event.preventDefault()` inside `onSubmit`.\n> --\x3e `<form onSubmit={(event) => event.preventDefault()}> ... </form>`\n\n## If I have an array in my state, what is the most common method we have seen of rendering out each thing in that list?\n> --\x3e `<ul>{arrayOfNumbers.map((number, index) => <li key={index}>{number}</li>)}</ul>`\n> --\x3e `<ul>{arrayOfUsers.map((user) => <li key={user.id}>{user.name}</li>)}</ul>`\n> --\x3e Key should be unique, it helps React manage the elements\n\n## What is an API?\n> --\x3e Application Programming Interface, often used for getting data. Can also be used for doing logins and other operations.\n\n## What are the differences between controlled and uncontrolled inputs? What makes an input into a controlled input?\n> --\x3e Controlled input is an input whose value depends on the State of a component. A controlled input has its value set by React AND it has an onChange handler as well.\n\n## What are *some* different lifecycle methods in React?\n> --\x3e For class based components\n> --\x3e `added` --\x3e `constructor`\n> --\x3e `render`\n> --\x3e `on mounting` --\x3e `componentDidMount`\n> --\x3e `removed` --\x3e `componentWillUnmount`\n>\n> --\x3e For functional components\n> --\x3e `useEffect`; used differently to achieve componentDidMount, componentWillUnmount\n\n\n\n\n\n\n# High level review\n\n> React is a JavaScript library for building user interfaces\n\n## Components\n\n> React lets you compose complex User Interfaces from small and isolated pieces of code\n\n- Meaning: React applications are built with Components\n    - Your application will be made up of many components\n    - You can make components yourself\n    - You can use components from external npm packages, like React-Bootstrap\n    - Examples: `<Header >`, `<Button />`, `<Icon />`, `<Container />`\n    - You can use one component once OR many times\n        - You have one Header\n        - You have many Buttons\n\n## Props \n\n- Components can pass information to their children using props\n    - kind of like you can give parameters to functions\n- You can pass variables and (references to) functions\n\n## State\n\nGenerally state is at the heart of what react does.\n\n> The \u201cstate\u201d is an object that (mostly) represents the parts of the app that can\n> change how the app looks\n\nSo if your application/component can be in multiple states, the bits of information and possibilities that make up the different states make up the whole State of your application/component.\n\nExamples of state:\n\n- A `<Checkbox />` can be On or Off\n- A `<Counter />` keeps track of some thing that it is counting\n- A `<SearchBox />` can have text entered into it or not\n- A `<LoginBox />`\n    - can have an username and/or a password inputted\n    - can be loading / actively checking credentials\n\n- Example (don\'t code along, but follow and ask questions)\n',Ns=t(2),Ls=t(3);function Us(){return Object(d.jsx)("div",{id:"content",children:Object(d.jsx)(Ns,{remarkPlugins:[Ls],children:Fs})})}var Fs="\n# SPA - Router - 1\n\nToday, please follow coding along with me - use whatever small project you have available.\nIf you don't have a good one, clone this https://github.com/FbW-E01/SPA-Component-Minireact\n\n> Routing is the ability to move between different parts of an application\n> when a user enters a URL or clicks an element (link, button, icon, image etc)\n> within the application.\n\n> React Router keeps your UI in sync with the URL\n\nSo you will have different views for different addresses, like\n\n- https://joels-awesome-website.org/\n- https://joels-awesome-website.org/login\n- https://joels-awesome-website.org/services\n- https://joels-awesome-website.org/services/web\n- https://joels-awesome-website.org/services/server\n- https://joels-awesome-website.org/contact\n\n# 3rd party component libraries\n\n- Routing is not built into the React core\n- You will need to add a routing library\n- A routing library gives us some Container components to use\n\n- Display components (render something to dom) vs. Container components (manage state, not visible)\n    - display component library: `react-bootstrap`\n    - container component library: `react-router-dom`\n\n- Core router library `react-router`\n- The `react-router-dom` library is used for web applications\n- `npm install --save react-router-dom`\n\n# Setting up react-router-dom\n\n> The `react-router-dom` package includes a number of routers that we can take advantage of depending on the platform we are targeting. These include `BrowserRouter` and `HashRouter` for web applications\n\n> The **BrowserRouter** is used for applications which have a dynamic server that knows how to handle any type of URL whereas the **HashRouter** is used for static websites with a server that only responds to requests for files that it knows about.\n\n- Our development server is dynamic. *Demonstration* They mostly are.\n\n- We need to wrap our app with a `<BrowserRouter>` container component\n\n- Then the actual routing can happen anywhere within the `<App/>` component, let's look at that next.\n\n# Route Matching Components: Our first routes\n\n- There are two vital components we need to use; `Route` and `Switch`:\n\n- The `<Switch>` is kind of like a switch statement in JS\n    - It selects which `<Route>` is used out of the options given\n\n- The `<Route>` is the component that actually matches the browser URL to views (components)\n\n- These will be used together\n\n> The `<Route/>` component is one of the most important building blocks in the React Router package. It renders the appropriate user interface when the current location matches the route\u2019s path. The path is a prop on the `<Route/>` component that describes the pathname that the route should match as shown in the example that follows\n\n# Building Navigation\n\n- Instead of regular links, we need to use  `<NavLink>` for navigation\n    - There is also `<Link>`, but there is no reason to use it\n    - `<NavLink>` is `<Link>` with styling support\n\n- The documentation for react-router is pretty good, it can solve many of the issues you might be having (such as how to style an active link or how to change the class name used for active links)\n- https://reactrouter.com/web/guides/quick-start\n\nExample app: https://github.com/FbW-E01/SPA-React-Example\n",Ws=t(2),Hs=t(3);function Js(){return Object(d.jsx)("div",{id:"content",children:Object(d.jsx)(Ws,{remarkPlugins:[Hs],children:Ys})})}var Ys='\n# SPA - Router - 2\n\n# Router continued\n\n## Theory\n\n- The Router works by changing the URL without loading a new page. How?\n- By using the **History API**, which can be used to modify the history of a browser\n- MDN has good documentation about it :)\n\n- `window.history.back()`\n- `window.history.forward()`\n- `history.pushState({page: 1}, "title 1", "/Potato")`\n- Interested in details? Research.\n- https://developer.mozilla.org/en-US/docs/Web/API/History\n\n## Redirect\n\n- Sometimes, like after a user has logged in, you want to redirect them to a new location\n- In that case, just render a `<Redirect />` Component\n\n\n    > Rendering a <Redirect> will navigate to a new location. The new location will override the current location in the history stack\n\n## Alternative way of making routes\n\n- Often you have a single component for a single route\n- For this, there is a nice way to write shorter code\n- `<Route path="/something" component={SomeComponent}/>`\n\n## Route Parameters\n\n- This is the advanced feature I was talking about earlier\n- Sometimes you want dynamic routes; like these\n    - /users/joel\n    - /users/milad\n    - /users/veera\n- And you want to know in your code exactly what user should we display\n- Here we will use **Route Parameters**\n- They work with a special colon notation like this: `/users/:<param>`\n    - Here `<param>` is your parameter variable name\n\n\n## Complex Nested Route Example\n\nSee Example app at https://github.com/FbW-E01/SPA-React-Example',zs=t(2),qs=t(3);function Gs(){return Object(d.jsx)("div",{id:"content",children:Object(d.jsx)(zs,{remarkPlugins:[qs],children:Vs})})}var Vs='\n# SPA - Store - 1\n\n# Review of a React app and state/props\n\n# State Management Concepts\n\n## Local state & global state\n\n- So we have state in our components - **local state**\n- Then we have state that can be passed around to many different components, but it still is local to some specific component\n- This causes us to write a lot of code just for passing around references to some bit of state and also functions that modify the state\n    - This is called **prop drilling** and it gets very annoying.\n- This is annoying, but worse it is hard to maintain and it causes our components to have many dependencies that make them more difficult to reuse as well\n- Especially when we have hundreds of components nested deeply\n- It would make sense to have such things globally available somehow, in **global state**\n\n- So the "User" that we are passing around, is kind of like a part of the global state as it\'s shared between many components\n- The term "Global state" can be used just for sharing state in a few components, it doesn\'t have to be truly global (annoying terminology!)\n- This roughly correlates to local variables and global/shared variables\n\n- Global variables "can\'t" be used for global state because React doesn\'t know when they change\n    - And then does not re-render the parts that are required to change when the variable changes\n\n- So for a variable like our `user` to be truly global state, we need all components that rely on it to be aware of the changes to it\n\n- To store that data and to provide it to other components in a nice way, like with a global state, we are going to need a **state container**\n\n## Context API\n\nHere, sadly, the React official docs are not super fantastic. Luckily other resources do exist.\n\nWe will be using just functional components as our example. Once you get familiar with Contexts if you ever need to, feel free to research class based contexts yourself. Just know that they are actually much nicer to work with when you are using functional components.\n\n> To make something globally available, we need to pair it with `useContext`. Context is a concept that was introduced in React a bit earlier than Hooks. With a little bit of work, it provides an alternative method for passing props to descendent components that need them while skipping any ancestors that don\'t.\n> https://www.thisdot.co/blog/creating-a-global-state-with-react-hooks\n\n> Context is designed to share data that can be considered \u201cglobal\u201d for a tree of React components, such as the current authenticated user, theme, or preferred language.\n> https://reactjs.org/docs/context.html#when-to-use-context\n\n- The Context API in many cases has (or it could have) completely replaced the usage of external state management libraries\n- It is very powerful and can be used in many ways\n- State management libraries ARE still used though\n- I have seen *Redux* and *Mobx* used, but there are others too\n\nSo, let\'s convert the TODO app to use Context.\nWe will do four steps\n1. Create the Context itself\n2. Set the parent (App) state for our context\n3. Create a context Provider\n4. Create a context Consumer (useContext hook)\n\nCode examples:\n\n```jsx\n    // 1. UserContext.jsx\n    import React from "react"\n\n    // Default value for context\n    // The real value will be provided later, by our context Provider (App.jsx)\n    // **NOTE** This is a placeholder that just describes context keys and values\n    // It can be just "null" like in our example or it can be like this minimalist version\n    // This version can provide better VSCode code completion\n    export const baseUserContext = {\n        user: null,\n        setUser: () => {}\n    };\n    export const UserContext = React.createContext(baseUserContext)\n    console.log(UserContext);\n```\n\n```jsx\n    // 2. Parent state in App.jsx\n    // first we store the data that will change in the state of the Parent\n    const [user, setUser] = useState(null);\n```\n\n```jsx\n    // 3. Create a context Provider in App.jsx\n    // We will pass both the data and the setter function to children via context\n    // This is how we are telling React that "App" is the one component that is providing the state storage and the default value for the context\n    const contextValue = { user, setUser };\n    return {\n        <UserContext.Provider value={contextValue}>\n        ...\n        </UserContext.Provider>\n    }\n```\n\n```jsx\n    // 4. Create context consumers in Login.jsx etc\n    // Here I am defining a context Consumer; this uses the context provided somewhere above this in the component tree\n    const { user, setUser } = useContext(UserContext);\n```',$s=t(2),Xs=t(3);function Ks(){return Object(d.jsx)("div",{id:"content",children:Object(d.jsx)($s,{remarkPlugins:[Xs],children:_s})})}var _s="\n# SPA - Store - Day 3\n\nWhen talking about state management and also context, you run into the `useReducer` hook at times.\n\nThe `useReducer` is inspired by Redux; it's an complete alternative to `useState` and while it can be used with contexts, it can be used alone too.\n\n> useReducer is usually preferable to useState when you have complex state logic that involves multiple sub-values or when the next state depends on the previous one.\n> https://reactjs.org/docs/hooks-reference.html#usereducer\n\nCode along with me for this example. We will use create-react-app;\n\n    $\xa0npx create-react-app spa-store-usereducer\n\nResult: silly useReducer math game https://github.com/FbW-E01/SPA-Store-UseReducer\n";var Qs=function(){return Object(d.jsxs)("div",{className:"wrapper",children:[Object(d.jsx)(h,{}),Object(d.jsxs)("button",{type:"button",id:"sidebarCollapse",className:"navbar-btn",children:[Object(d.jsx)("span",{}),Object(d.jsx)("span",{}),Object(d.jsx)("span",{})]}),Object(d.jsxs)(l.d,{children:[Object(d.jsx)(l.b,{exact:!0,path:"/",children:Object(d.jsx)(f,{})}),Object(d.jsx)(l.b,{path:"/BDL01",component:j}),Object(d.jsx)(l.b,{path:"/BDL02",component:w}),Object(d.jsx)(l.b,{path:"/BDL03",component:y}),Object(d.jsx)(l.b,{path:"/BDL04",component:x}),Object(d.jsx)(l.b,{path:"/BDL05",component:v}),Object(d.jsx)(l.b,{path:"/BDL06",component:O}),Object(d.jsx)(l.b,{path:"/BDL07",component:k}),Object(d.jsx)(l.b,{path:"/BDL08",component:S}),Object(d.jsx)(l.b,{path:"/BDL09",component:T}),Object(d.jsx)(l.b,{path:"/UIB10",component:C}),Object(d.jsx)(l.b,{path:"/UIB11",component:I}),Object(d.jsx)(l.b,{path:"/UIB12",component:E}),Object(d.jsx)(l.b,{path:"/UIB13",component:U}),Object(d.jsx)(l.b,{path:"/UIB14",component:J}),Object(d.jsx)(l.b,{path:"/UIB15",component:G}),Object(d.jsx)(l.b,{path:"/UIB16",component:K}),Object(d.jsx)(l.b,{path:"/UIB17",component:ee}),Object(d.jsx)(l.b,{path:"/UIB18",component:se}),Object(d.jsx)(l.b,{path:"/UIB19",component:le}),Object(d.jsx)(l.b,{path:"/UIB20",component:ue}),Object(d.jsx)(l.b,{path:"/UIB21",component:ge}),Object(d.jsx)(l.b,{path:"/UIB22",component:ye}),Object(d.jsx)(l.b,{path:"/UIB23",component:ke}),Object(d.jsx)(l.b,{path:"/UIB24",component:Ae}),Object(d.jsx)(l.b,{path:"/UIB25",component:Me}),Object(d.jsx)(l.b,{path:"/UIB26",component:Ne}),Object(d.jsx)(l.b,{path:"/UIB27",component:We}),Object(d.jsx)(l.b,{path:"/UIB28",component:ze}),Object(d.jsx)(l.b,{path:"/UIB29",component:$e}),Object(d.jsx)(l.b,{path:"/UIB30",component:Qe}),Object(d.jsx)(l.b,{path:"/UIB31",component:tn}),Object(d.jsx)(l.b,{path:"/UIB32",component:rn}),Object(d.jsx)(l.b,{path:"/UIB33",component:hn}),Object(d.jsx)(l.b,{path:"/UIB34",component:bn}),Object(d.jsx)(l.b,{path:"/UIB35",component:wn}),Object(d.jsx)(l.b,{path:"/PB36",component:On}),Object(d.jsx)(l.b,{path:"/PB37",component:Cn}),Object(d.jsx)(l.b,{path:"/PB38",component:Bn}),Object(d.jsx)(l.b,{path:"/PB39",component:Dn}),Object(d.jsx)(l.b,{path:"/PB40",component:Fn}),Object(d.jsx)(l.b,{path:"/PB41",component:Yn}),Object(d.jsx)(l.b,{path:"/PB42",component:Vn}),Object(d.jsx)(l.b,{path:"/PB43",component:_n}),Object(d.jsx)(l.b,{path:"/PB44",component:nt}),Object(d.jsx)(l.b,{path:"/PB45",component:it}),Object(d.jsx)(l.b,{path:"/PB46",component:ct}),Object(d.jsx)(l.b,{path:"/PB47",component:mt}),Object(d.jsx)(l.b,{path:"/PB48",component:ft}),Object(d.jsx)(l.b,{path:"/PB49",component:xt}),Object(d.jsx)(l.b,{path:"/PB50",component:St}),Object(d.jsx)(l.b,{path:"/PB51",component:Pt}),Object(d.jsx)(l.b,{path:"/PB52",component:Rt}),Object(d.jsx)(l.b,{path:"/PB53",component:Lt}),Object(d.jsx)(l.b,{path:"/PB54",component:Ht}),Object(d.jsx)(l.b,{path:"/PB55",component:qt}),Object(d.jsx)(l.b,{path:"/PB56",component:Xt}),Object(d.jsx)(l.b,{path:"/PB57",component:Zt}),Object(d.jsx)(l.b,{path:"/PB58",component:oo}),Object(d.jsx)(l.b,{path:"/SPA59",component:ro}),Object(d.jsx)(l.b,{path:"/SPA60",component:uo}),Object(d.jsx)(l.b,{path:"/SPA61",component:go}),Object(d.jsx)(l.b,{path:"/SPA62",component:yo}),Object(d.jsx)(l.b,{path:"/SPA63",component:ko}),Object(d.jsx)(l.b,{path:"/SPA64",component:Ao}),Object(d.jsx)(l.b,{path:"/SPA65",component:Mo}),Object(d.jsx)(l.b,{path:"/SPA66",component:No}),Object(d.jsx)(l.b,{path:"/SPA67",component:Wo}),Object(d.jsx)(l.b,{path:"/SPA68",component:zo}),Object(d.jsx)(l.b,{path:"/SPA69",component:$o}),Object(d.jsx)(l.b,{path:"/SPA70",component:Qo}),Object(d.jsx)(l.b,{path:"/SPA71",component:ts}),Object(d.jsx)(l.b,{path:"/SPA72",component:as}),Object(d.jsx)(l.b,{path:"/SPA73",component:ds}),Object(d.jsx)(l.b,{path:"/SPA74",component:ps}),Object(d.jsx)(l.b,{path:"/SPA75",component:js}),Object(d.jsx)(l.b,{path:"/SPA76",component:vs}),Object(d.jsx)(l.b,{path:"/SPA77",component:Ts}),Object(d.jsx)(l.b,{path:"/SPA78",component:Is}),Object(d.jsx)(l.b,{path:"/SPA79",component:Es}),Object(d.jsx)(l.b,{path:"/SPA80",component:Us}),Object(d.jsx)(l.b,{path:"/SPA81",component:Js}),Object(d.jsx)(l.b,{path:"/SPA82",component:Gs}),Object(d.jsx)(l.b,{path:"/SPA83",component:Ks}),Object(d.jsx)(l.b,{path:"*",children:Object(d.jsx)(l.a,{to:"/"})})]})]})};r.a.render(Object(d.jsx)(s.a.StrictMode,{children:Object(d.jsx)(i.a,{children:Object(d.jsx)(Qs,{})})}),document.getElementById("root"))},86:function(e,n,t){}},[[225,1,2]]]);
//# sourceMappingURL=main.3260ff4d.chunk.js.map