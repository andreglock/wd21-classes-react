(this["webpackJsonpwd21-classes-react"]=this["webpackJsonpwd21-classes-react"]||[]).push([[0],{225:function(e,n,t){"use strict";t.r(n);var i=t(1),s=t.n(i),o=t(2),r=t(80),a=t.n(r),l=(t(86),t(5)),c=t.p+"static/media/home.1037ec9d.svg",d=t(0);function h(){return Object(d.jsx)("nav",{id:"sidebar",children:Object(d.jsxs)("ul",{className:"list-unstyled components",children:[Object(d.jsx)("li",{children:Object(d.jsx)(o.b,{to:"/",children:Object(d.jsx)("img",{src:c,alt:"home",className:"home",height:"2.7em"})})}),Object(d.jsxs)("li",{children:[Object(d.jsx)("a",{href:"#bdlSubmenu","data-toggle":"collapse","aria-expanded":"false",className:"dropdown-toggle",children:"Basic Digital Literacy"}),Object(d.jsxs)("ul",{className:"collapse list-unstyled",id:"bdlSubmenu",children:[Object(d.jsx)("li",{children:Object(d.jsx)(o.b,{to:"BDL01",children:"BDL 1"})}),Object(d.jsx)("li",{children:Object(d.jsx)(o.b,{to:"BDL02",children:"BDL 2"})}),Object(d.jsx)("li",{children:Object(d.jsx)(o.b,{to:"BDL03",children:"BDL 3"})}),Object(d.jsx)("li",{children:Object(d.jsx)(o.b,{to:"BDL04",children:"BDL 4"})}),Object(d.jsx)("li",{children:Object(d.jsx)(o.b,{to:"BDL05",children:"BDL 5"})}),Object(d.jsx)("li",{children:Object(d.jsx)(o.b,{to:"BDL06",children:"BDL 6"})}),Object(d.jsx)("li",{children:Object(d.jsx)(o.b,{to:"BDL07",children:"BDL 7"})}),Object(d.jsx)("li",{children:Object(d.jsx)(o.b,{to:"BDL08",children:"BDL 8"})}),Object(d.jsx)("li",{children:Object(d.jsx)(o.b,{to:"BDL09",children:"BDL 9"})})]})]}),Object(d.jsxs)("li",{children:[Object(d.jsx)("a",{href:"#uibSubmenu","data-toggle":"collapse","aria-expanded":"false",className:"dropdown-toggle",children:"User Interface Basics"}),Object(d.jsxs)("ul",{className:"collapse list-unstyled",id:"uibSubmenu",children:[Object(d.jsx)("li",{children:Object(d.jsx)(o.b,{to:"UIB10",children:"UIB 1"})}),Object(d.jsx)("li",{children:Object(d.jsx)(o.b,{to:"UIB11",children:"UIB 2"})}),Object(d.jsx)("li",{children:Object(d.jsx)(o.b,{to:"UIB12",children:"UIB 3"})}),Object(d.jsx)("li",{children:Object(d.jsx)(o.b,{to:"UIB13",children:"UIB 4"})}),Object(d.jsx)("li",{children:Object(d.jsx)(o.b,{to:"UIB14",children:"UIB 5"})}),Object(d.jsx)("li",{children:Object(d.jsx)(o.b,{to:"UIB15",children:"UIB 6"})}),Object(d.jsx)("li",{children:Object(d.jsx)(o.b,{to:"UIB16",children:"UIB 7"})}),Object(d.jsx)("li",{children:Object(d.jsx)(o.b,{to:"UIB17",children:"UIB 8"})}),Object(d.jsx)("li",{children:Object(d.jsx)(o.b,{to:"UIB18",children:"UIB 9"})}),Object(d.jsx)("li",{children:Object(d.jsx)(o.b,{to:"UIB19",children:"UIB 10"})}),Object(d.jsx)("li",{children:Object(d.jsx)(o.b,{to:"UIB20",children:"UIB 11"})}),Object(d.jsx)("li",{children:Object(d.jsx)(o.b,{to:"UIB21",children:"UIB 12"})}),Object(d.jsx)("li",{children:Object(d.jsx)(o.b,{to:"UIB22",children:"UIB 13"})}),Object(d.jsx)("li",{children:Object(d.jsx)(o.b,{to:"UIB23",children:"UIB 14"})}),Object(d.jsx)("li",{children:Object(d.jsx)(o.b,{to:"UIB24",children:"UIB 15"})}),Object(d.jsx)("li",{children:Object(d.jsx)(o.b,{to:"UIB25",children:"UIB 16"})}),Object(d.jsx)("li",{children:Object(d.jsx)(o.b,{to:"UIB26",children:"UIB 17"})}),Object(d.jsx)("li",{children:Object(d.jsx)(o.b,{to:"UIB27",children:"UIB 18"})}),Object(d.jsx)("li",{children:Object(d.jsx)(o.b,{to:"UIB28",children:"UIB 19"})}),Object(d.jsx)("li",{children:Object(d.jsx)(o.b,{to:"UIB29",children:"UIB 20"})}),Object(d.jsx)("li",{children:Object(d.jsx)(o.b,{to:"UIB30",children:"UIB 21"})}),Object(d.jsx)("li",{children:Object(d.jsx)(o.b,{to:"UIB31",children:"UIB 22"})}),Object(d.jsx)("li",{children:Object(d.jsx)(o.b,{to:"UIB32",children:"UIB 23"})}),Object(d.jsx)("li",{children:Object(d.jsx)(o.b,{to:"UIB33",children:"UIB 24"})}),Object(d.jsx)("li",{children:Object(d.jsx)(o.b,{to:"UIB34",children:"UIB 25"})}),Object(d.jsx)("li",{children:Object(d.jsx)(o.b,{to:"UIB35",children:"UIB 26"})})]})]}),Object(d.jsxs)("li",{children:[Object(d.jsx)("a",{href:"#pbSubmenu","data-toggle":"collapse","aria-expanded":"false",className:"dropdown-toggle",children:"Programing Basics"}),Object(d.jsxs)("ul",{className:"collapse list-unstyled",id:"pbSubmenu",children:[Object(d.jsx)("li",{children:Object(d.jsx)("a",{href:"classes/36PB.html",children:"PB 1"})}),Object(d.jsx)("li",{children:Object(d.jsx)("a",{href:"classes/37PB.html",children:"PB 2"})}),Object(d.jsx)("li",{children:Object(d.jsx)("a",{href:"classes/38PB.html",children:"PB 3"})}),Object(d.jsx)("li",{children:Object(d.jsx)("a",{href:"classes/39PB.html",children:"PB 4"})}),Object(d.jsx)("li",{children:Object(d.jsx)("a",{href:"classes/40PB.html",children:"PB 5"})}),Object(d.jsx)("li",{children:Object(d.jsx)("a",{href:"classes/41PB.html",children:"PB 6"})}),Object(d.jsx)("li",{children:Object(d.jsx)("a",{href:"classes/42PB.html",children:"PB 7"})}),Object(d.jsx)("li",{children:Object(d.jsx)("a",{href:"classes/43PB.html",children:"PB 8"})}),Object(d.jsx)("li",{children:Object(d.jsx)("a",{href:"classes/44PB.html",children:"PB 9"})}),Object(d.jsx)("li",{children:Object(d.jsx)("a",{href:"classes/45PB.html",children:"PB 10"})}),Object(d.jsx)("li",{children:Object(d.jsx)("a",{href:"classes/46PB.html",children:"PB 11"})}),Object(d.jsx)("li",{children:Object(d.jsx)("a",{href:"classes/47PB.html",children:"PB 12"})}),Object(d.jsx)("li",{children:Object(d.jsx)("a",{href:"classes/48PB.html",children:"PB 13"})}),Object(d.jsx)("li",{children:Object(d.jsx)("a",{href:"classes/49PB.html",children:"PB 14"})}),Object(d.jsx)("li",{children:Object(d.jsx)("a",{href:"classes/50PB.html",children:"PB 15"})}),Object(d.jsx)("li",{children:Object(d.jsx)("a",{href:"classes/51PB.html",children:"PB 16"})}),Object(d.jsx)("li",{children:Object(d.jsx)("a",{href:"classes/52PB.html",children:"PB 17"})}),Object(d.jsx)("li",{children:Object(d.jsx)("a",{href:"classes/53PB.html",children:"PB 18"})}),Object(d.jsx)("li",{children:Object(d.jsx)("a",{href:"classes/54PB.html",children:"PB 19"})}),Object(d.jsx)("li",{children:Object(d.jsx)("a",{href:"classes/55PB.html",children:"PB 20"})}),Object(d.jsx)("li",{children:Object(d.jsx)("a",{href:"classes/56PB.html",children:"PB 21"})}),Object(d.jsx)("li",{children:Object(d.jsx)("a",{href:"classes/57PB.html",children:"PB 22"})}),Object(d.jsx)("li",{children:Object(d.jsx)("a",{href:"classes/58PB.html",children:"PB 23"})})]})]}),Object(d.jsx)("li",{children:Object(d.jsx)("a",{href:"https://andreglock.github.io/portfolio/",target:"_blank",rel:"noreferrer",children:"Portfolio"})})]})})}var j=t.p+"static/media/linda1.3aad0622.jpg",m=t.p+"static/media/linda2.80f4369e.jpg",b=t.p+"static/media/linda3.69a0e928.jpg",p=t.p+"static/media/linda4.f60f36ad.jpg",u=t.p+"static/media/linda5.459858d5.jpg";function x(){return Object(d.jsxs)("div",{id:"content",className:"indexContent",children:[Object(d.jsx)("header",{children:Object(d.jsx)("h1",{children:"Codelicious Classes"})}),Object(d.jsxs)("main",{children:[Object(d.jsxs)("div",{children:[Object(d.jsx)("h2",{children:"Flexbox games:"}),Object(d.jsx)("a",{className:"block",href:"https://flexboxfroggy.com/",target:"blank",children:"Level one: Flexfroggy"}),Object(d.jsx)("a",{className:"block",href:"https://www.flexboxdefense.com/",target:"blank",children:"Level two: Flexbox Defense"})]}),Object(d.jsxs)("div",{children:[Object(d.jsx)("h2",{children:"Other CSS games:"}),Object(d.jsx)("a",{className:"block",href:"https://flukeout.github.io/",target:"blank",children:"CSS Diner"}),Object(d.jsx)("a",{className:"block",href:"https://cssgridgarden.com/",target:"blank",children:"CSS Garden"})]}),Object(d.jsxs)("div",{children:[Object(d.jsx)("h2",{children:"CSS Designing Tools:"}),Object(d.jsx)("a",{className:"block",href:"https://bennettfeely.com/clippy/",target:"blank",children:"Clip-path maker"}),Object(d.jsx)("a",{className:"block",href:"https://cssgradient.io/",target:"blank",children:"Gradient Maker"}),Object(d.jsx)("a",{className:"block",href:"https://paletton.com/",target:"blank",children:"Color Pallet Generator"})]}),Object(d.jsx)("img",{src:j,alt:"Linda"}),Object(d.jsx)("img",{src:m,alt:"Linda"}),Object(d.jsx)("img",{src:b,alt:"Linda"}),Object(d.jsx)("img",{src:p,alt:"Linda"}),Object(d.jsx)("img",{src:u,alt:"Linda"})]})]})}function f(){return Object(d.jsxs)("div",{id:"content",children:[Object(d.jsx)("h1",{children:"Basic digital literacy 11.01.2020"}),Object(d.jsx)("p",{children:"Windows and Linux terminals are very different. Mac and Linux terminals are very similar."}),Object(d.jsx)("h2",{children:"Terminal"}),Object(d.jsx)("p",{children:"The terminal is sometimes called - console - shell - command prompt (might refer to the windows one) - cli = command line interface"}),Object(d.jsx)("h2",{children:"Filesystem structure"}),Object(d.jsx)("p",{children:"(root)/ home/ - user folders etc/  - configuration files var/  - logs tmp/  - temporary files ..."}),Object(d.jsx)("h2",{children:"Special folder names"}),Object(d.jsx)("h3",{children:"Absolute paths"}),Object(d.jsx)("p",{children:'"/"  -- root directory "/home/dci/Downloads"'}),Object(d.jsx)("h3",{children:"Alias or variable path"}),Object(d.jsx)("p",{children:'"~" -- home directory'}),Object(d.jsx)("h3",{children:"Special shortcut"}),Object(d.jsx)("p",{children:'"-" -- previous directoy'}),Object(d.jsx)("h3",{children:"Relative paths"}),Object(d.jsx)("p",{children:'".." -- up one level in the directory tree or structure "."  -- current directory'}),Object(d.jsx)("h2",{children:"Basic commands"}),Object(d.jsx)("pre",{children:Object(d.jsx)("code",{children:'$ pwd # print working directory $ ls  # list $ cd  # change directory $ cd .. # change directory up the directory tree $ cd Downloads # change directory to "Downloads"'})}),Object(d.jsx)("p",{children:"Note! Use the tab key when you can!"}),Object(d.jsx)("pre",{children:Object(d.jsx)("code",{children:"$ ls -l $ ls -a $ ls -h $ ls -lah"})}),Object(d.jsx)("p",{children:"$ history up arrow, down arrow"})]})}function g(){return Object(d.jsxs)("div",{id:"content",children:[Object(d.jsx)("h1",{children:"Basic Digital Literacy day 2"}),Object(d.jsx)("p",{children:"RECAP"}),Object(d.jsx)("p",{children:"$ ls -lah $ pwd $ history $ cd"}),Object(d.jsx)("h2",{children:"Files and Folderss"}),Object(d.jsx)("p",{children:"Naming Names are like something.zip Case sensitive! File name endings are nice to have, but not necessary Text files and binary files Binary files need a program to be openeds Text files contain readable text content Avoid strange characters such as space, \xfc and \xe4 Use alphanumerics for file namings A-Z, 0-9 Also using - _ are fine \xfcber.jpg ueber.jpg \xe4 -> ae \xf6 -> oe"}),Object(d.jsx)("h2",{children:"glob"}),Object(d.jsxs)("ul",{children:[Object(d.jsx)("li",{children:"File and folder name matching with special characters"}),Object(d.jsx)("li",{children:"File and folder name matching or searching using the characters * and ?"}),Object(d.jsx)("li",{children:"the * is often called a wildcard (asterisk)"}),Object(d.jsxs)("li",{children:["commands like ",Object(d.jsx)("code",{children:"ls Do*"})]}),Object(d.jsxs)("li",{children:[Object(d.jsx)("code",{children:"ls -R Do*"})," <-- List files and folders Recursively"]})]}),Object(d.jsx)("h2",{children:"New commands"}),Object(d.jsx)("p",{children:"print out files: $ cat filename(s) # display the contents of a file or files the cat command = conCATente text file(s)"}),Object(d.jsx)("p",{children:"$ ls [-l] [file or folder name(s)s]"}),Object(d.jsx)("p",{children:"Change your password $ passwd # change your passwordx"}),Object(d.jsx)("p",{children:"Getting help and more info on commands $ man [somecommand] # display manual file for a command $ [ls] --help # display help output for a command"}),Object(d.jsx)("p",{children:"Controlling files and folders $ mkdir something # create new directory $ mkdir -p something/something2 # create directory and its missing parents $ rmdir something # remove empty directory $ touch newfile.md # create empty file or update the timestamp of an existing file $ rm filename # removes a file $ rm -r foldername # removes a folder RECURSIVELY $ cp path1 path2 # copy from one path to another path1 can be a file or a folder path2 can be a file or a folder"}),Object(d.jsx)("p",{children:"$ mv path1 path2 # move from one path to another path1 can be a file or a folder path2 can be a file or a folder"})]})}function O(){return Object(d.jsxs)("div",{id:"content",children:[Object(d.jsx)("h1",{children:"Basic Digital Literacy 3"}),Object(d.jsx)("p",{children:"Quick recap of all the commands"}),Object(d.jsx)("p",{children:"$ pwd   # print working directory $ ls    # list $ cd    # change directory $ touch # create file $ mkdir # create directory $ rmdir # remove directory $ rm    # remove $ cp    # copy $ mv    # move $ history # show command history $ man   # manual $ cat   # output file"}),Object(d.jsx)("p",{children:"Useful argument often found in commands: --version"}),Object(d.jsx)("p",{children:"^C --- the caret symbol means Control here. Control and c were pressed. M-U -- usually the M means the Alt key. Alt and c pressed here. Super key usually means the windows key (or apple key on mac)."}),Object(d.jsxs)("p",{children:["Another help command: ",Object(d.jsx)("code",{children:"help"})," - might not be super useful."]}),Object(d.jsx)("h2",{children:"More important commands"}),Object(d.jsx)("p",{children:"$ less some/path/here.txt q - exit file g - go to the top of a file G - go the bottom of a file"}),Object(d.jsx)("p",{children:"$ find [dir] -name [search_pattern] $ find [dir] -type [d or f] $ find [/home/dci/Documents] -type f -name *.txt $ find [/home/dci] -type d -name Documents"}),Object(d.jsx)("p",{children:"$ grep [search_pattern] [file] $ grep -r [search_pattern] [folder]"}),Object(d.jsx)("p",{children:"$ nano [path/to/file]"})]})}function w(){return Object(d.jsxs)("div",{id:"content",children:[Object(d.jsx)("h1",{children:"BDL 4 - Day 3"}),Object(d.jsx)("h2",{children:"More commands"}),Object(d.jsx)("p",{children:"Friends of cat"}),Object(d.jsx)("pre",{children:Object(d.jsx)("code",{children:"$ tail output.log       # display the last lines of text in a file $ tail -n 5 output.log  # display the last 5 lines of text in a file"})}),Object(d.jsx)("p",{children:"Have a peek at a file"}),Object(d.jsx)("pre",{children:Object(d.jsx)("code",{children:"$ head # display the first lines of text in a file"})}),Object(d.jsx)("h2",{children:"Markdown"}),Object(d.jsxs)("p",{children:["Markdown syntax Documentation: ",Object(d.jsx)("a",{href:"https://www.markdownguide.org/basic-syntax",children:"Markdown Guide"})]}),Object(d.jsx)("p",{children:"Super simple. Is rendered. Can be converted into HTML easily by renderers. Halfway between visual and code."}),Object(d.jsx)("p",{children:Object(d.jsx)("img",{alt:"Les Horribles Cernettes",src:"https://musiclub.web.cern.ch/bands/cernettes/pictures/LHC5.jpg",title:"Les Horribles Cernettes say hello"})}),Object(d.jsx)("p",{children:"Syntax examples"}),Object(d.jsxs)("ul",{children:[Object(d.jsxs)("li",{children:["Images are done using this syntax: ",Object(d.jsx)("code",{children:'![Image Text Version](relative/path/to/image.jpg "What the image is")'})]}),Object(d.jsxs)("li",{children:["List",Object(d.jsxs)("ul",{children:[Object(d.jsxs)("li",{children:["Sublist 1",Object(d.jsxs)("ul",{children:[Object(d.jsx)("li",{children:"SubSublist 1"}),Object(d.jsx)("li",{children:"SubSublist 2"})]})]}),Object(d.jsx)("li",{children:"Sublist 2"})]})]}),Object(d.jsxs)("li",{children:["Text effect: ",Object(d.jsx)("strong",{children:"Bold"})," text"]}),Object(d.jsxs)("li",{children:["Text effect: ",Object(d.jsx)("strong",{children:"Bold"})," text"]}),Object(d.jsxs)("li",{children:["Text effect: ",Object(d.jsx)("em",{children:"Italic"})," text"]}),Object(d.jsxs)("li",{children:["Text effect: ",Object(d.jsx)("em",{children:"Italic"})," text"]}),Object(d.jsxs)("li",{children:["Text effects combo: ",Object(d.jsxs)("strong",{children:[Object(d.jsx)("em",{children:"Both"})," effects"]})]}),Object(d.jsxs)("li",{children:["Text effect: ",Object(d.jsx)("code",{children:"Inline code blocks"})," like so!"]}),Object(d.jsxs)("li",{children:["Linking to an address: ",Object(d.jsx)("code",{children:"[Link Text Here](address here)"})]}),Object(d.jsxs)("li",{children:["Headings",Object(d.jsxs)("ul",{children:[Object(d.jsx)("li",{children:Object(d.jsx)("code",{children:"# Level 1"})}),Object(d.jsx)("li",{children:Object(d.jsx)("code",{children:"## Level 2"})}),Object(d.jsx)("li",{children:Object(d.jsx)("code",{children:"### Level 3 ... up until level 6"})})]})]}),Object(d.jsx)("li",{children:"Indented code blocks / preformatted text"}),Object(d.jsx)("li",{children:"Block quotes"}),Object(d.jsxs)("li",{children:["Numbered lists:",Object(d.jsxs)("ol",{children:[Object(d.jsx)("li",{children:"Example Banana"}),Object(d.jsx)("li",{children:"Example Beet"}),Object(d.jsx)("li",{children:"Example Cherry"}),Object(d.jsx)("li",{children:"Example Potato"}),Object(d.jsx)("li",{children:"Example Curry"})]})]})]}),Object(d.jsx)("p",{children:"Example of a Code Block:"}),Object(d.jsx)("pre",{children:Object(d.jsx)("code",{children:"$ mkdir projects/newproject $ cd projects/newproject $ something_else_amazing"})}),Object(d.jsxs)("blockquote",{children:[Object(d.jsx)("p",{children:"Albert Einstein once said,"}),Object(d.jsx)("p",{children:'"HTML Rocks"'}),Object(d.jsx)("p",{children:"Something"})]}),Object(d.jsx)("p",{children:"TASKS"}),Object(d.jsxs)("ol",{children:[Object(d.jsx)("li",{children:"Open two consoles"}),Object(d.jsx)("li",{children:'Run "history" in one of them'}),Object(d.jsx)("li",{children:'In the other, create a new markdown file called "notes.md"'}),Object(d.jsx)("li",{children:"In the new file, write down all the commands you have used"}),Object(d.jsx)("li",{children:"Write down all the arguments you have used and a brief explanation of them"}),Object(d.jsx)("li",{children:"Also put in a section for general tips and knowledge you have learned"}),Object(d.jsx)("li",{children:"Use markdown examples and syntax"}),Object(d.jsx)("li",{children:"I recommend using BOTH nano and visual studio code."}),Object(d.jsxs)("li",{children:["When done, ",Object(d.jsx)("code",{children:"cat"})," the file out in the console, copy it and send it to Joel as a private message in Slack."]})]}),Object(d.jsx)("h2",{children:"Installing software"}),Object(d.jsx)("p",{children:"MAC/OSX -- brew, cask (macports program)"}),Object(d.jsx)("p",{children:"A few commands"}),Object(d.jsx)("p",{children:'$ df -h # check how much space do I have lefts $ whoami $ groups $ sudo # do something as the "super user" or "root"'}),Object(d.jsx)("p",{children:"Root has all permissions, can do anything to the system. Avoid using sudo or the root user as much as possible. Use only when necessary."}),Object(d.jsx)("p",{children:"Package management systems: apt, snap, npm, brew, cask, yum, gem, emerge"}),Object(d.jsx)("p",{children:"$ sudo apt update   # updates the list of things that I can install $ sudo apt install  # actually installs something $ sudo apt remove   # uninstall something $ sudo apt search google chrome # search for something to install $ sudo apt autoremove # remove left over files from updating and installing"}),Object(d.jsx)("p",{children:"$ sudo snap search opera $ sudo snap install opera $ sudo snap remove"}),Object(d.jsx)("p",{children:'$ npm install -g "something" # node package manager installation $ npm uninstall -g "something" '}),Object(d.jsx)("p",{children:"$ which  # show information about a program $ whereis # show program location"}),Object(d.jsx)("h2",{children:"Browser Basics"}),Object(d.jsx)("p",{children:"Big browsers: Google Chrome, Safari, Internet Explorer, Edge, Mozilla Firefox Small browsers: Opera, Brave, Vivaldi, eLinks, DuckDuck, Midori...."}),Object(d.jsx)("p",{children:"Target browsers: Support latest version of chrome and Edge"}),Object(d.jsx)("p",{children:"Browser = Browser Engine + JavaScript engine + other stuff too, such as plugins and tools Browser Engine = HTML to visual rendering JavaSript Engine = Runs Javascript"}),Object(d.jsx)("p",{children:"If your site works with one Browser using the Blink engine, most likely other Blink engine Browsers will work too. If your JS works with one browser that uses the V8 engine, it will most likely work with all of them."}),Object(d.jsx)("p",{children:"Shortcuts"}),Object(d.jsx)("p",{children:"^T -- opens new tab ^N -- opens new window ^W -- closes a tab ^Shift-T -- reopens a closed tab ^Shift-N -- reopens a closed window F11 -- view full screen F12 -- open developer console -- the web developers best friend and toolkit"})]})}function y(){return Object(d.jsxs)("div",{id:"content",children:[Object(d.jsx)("h1",{children:"BDL 5 Day 4"}),Object(d.jsx)("h2",{children:"Core internet skills and knowledge"}),Object(d.jsx)("p",{children:"Networking = communication with a shared set of protocols. Protocol = an agreement on how to do a very specific thing."}),Object(d.jsxs)("ul",{children:[Object(d.jsxs)("li",{children:[Object(d.jsx)("p",{children:"Internet Protocol"}),Object(d.jsxs)("ul",{children:[Object(d.jsx)("li",{children:"70s"}),Object(d.jsx)("li",{children:"mail, file exchange, message boards"}),Object(d.jsxs)("li",{children:["Two kinds communication",Object(d.jsxs)("ul",{children:[Object(d.jsx)("li",{children:"TCP Connected       - like a telephone - used for example in games and some chat"}),Object(d.jsx)("li",{children:"UDP Connectionless  - like the post office - far more commons"})]})]})]})]}),Object(d.jsxs)("li",{children:[Object(d.jsx)("p",{children:"All computers on a network have an address"}),Object(d.jsxs)("ul",{children:[Object(d.jsxs)("li",{children:[Object(d.jsx)("p",{children:"IPv4 - IP adddresses"}),Object(d.jsxs)("ul",{children:[Object(d.jsx)("li",{children:"Can sometimes change, so they are dynamic"}),Object(d.jsx)("li",{children:"You can buy static IP addresses, most servers have a static address that doesn't change"}),Object(d.jsx)("li",{children:"Can be shared among many computers too"}),Object(d.jsx)("li",{children:"192.168.1.1 <-- example"}),Object(d.jsx)("li",{children:"0.0.0.0 - 255.255.255.255"}),Object(d.jsx)("li",{children:"Public (used on the internet) and Private (used in local networks) addresses"}),Object(d.jsx)("li",{children:"VPNs will hide or change your address"}),Object(d.jsx)("li",{children:"You can run multiple websites in one IP address, on the same server"}),Object(d.jsx)("li",{children:"We are slowly running out of addresses"}),Object(d.jsx)("li",{children:"~3400 million addresses"}),Object(d.jsx)("li",{children:"127.0.0.1 <- your local machine"})]})]}),Object(d.jsxs)("li",{children:[Object(d.jsx)("p",{children:"IPv6 - new shiny awesome unique addresses"}),Object(d.jsx)("ul",{children:Object(d.jsx)("li",{children:"2001:db8::8a2e:370:1123"})})]})]})]}),Object(d.jsxs)("li",{children:[Object(d.jsx)("p",{children:"DNS - Domain name system"}),Object(d.jsxs)("ul",{children:[Object(d.jsx)("li",{children:"Each IP address can have a human readable domain name"}),Object(d.jsx)("li",{children:"google.de is a domain address"}),Object(d.jsx)("li",{children:"one website can have multiple IP addresses, but usually just one domain    "}),Object(d.jsx)("li",{children:"The point of domains is to make Addresses easy to recognize and remember"}),Object(d.jsx)("li",{children:"You can register domains for yourself"}),Object(d.jsx)("li",{children:"Domain names are a big business"}),Object(d.jsx)("li",{children:"Usually you pay per domain per year"}),Object(d.jsx)("li",{children:"Domain name servers are run by multiple organisations over the globe"}),Object(d.jsx)("li",{children:"When registering a domain, it takes a little bit of time for your new domain to be available"}),Object(d.jsx)("li",{children:"When changing a domain, it takes time to change too"}),Object(d.jsx)("li",{children:"www.google.de --\x3e 19.22.55.12"}),Object(d.jsx)("li",{children:"You can check who owns a domain, or at least get some info on it"}),Object(d.jsx)("li",{children:Object(d.jsx)("p",{children:"https://who.is/"})}),Object(d.jsxs)("li",{children:[Object(d.jsx)("p",{children:"TLD Top Level Domain"}),Object(d.jsxs)("ul",{children:[Object(d.jsxs)("li",{children:["Examples",Object(d.jsxs)("ul",{children:[Object(d.jsx)("li",{children:".de"}),Object(d.jsx)("li",{children:".fi"}),Object(d.jsx)("li",{children:".tv -- tuvalu"}),Object(d.jsx)("li",{children:'.com --- "commerce"'}),Object(d.jsx)("li",{children:".info"}),Object(d.jsx)("li",{children:'.org --- "organization"'}),Object(d.jsx)("li",{children:'.gov --- "government"'})]})]}),Object(d.jsx)("li",{children:"You cannot register to every single TLD"})]})]}),Object(d.jsxs)("li",{children:[Object(d.jsx)("p",{children:"Domains are Mostly alphanumeric"}),Object(d.jsxs)("ul",{children:[Object(d.jsx)("li",{children:"www.abcde1234689.com"}),Object(d.jsx)("li",{children:"It is unusual to see a domain like www.\xfc\xfc\xfc\xfc\xfc\xc4\xd6\xf6\xc4.com"})]})]}),Object(d.jsxs)("li",{children:[Object(d.jsx)("p",{children:"Domains have Subdomains"}),Object(d.jsxs)("ul",{children:[Object(d.jsx)("li",{children:"For example: www.google.de"}),Object(d.jsx)("li",{children:'"www" is a subdomain'}),Object(d.jsx)("li",{children:"website.amazon.de"}),Object(d.jsx)("li",{children:"ww2.services.internet.bank.de"}),Object(d.jsx)("li",{children:"mail.google.com"})]})]}),Object(d.jsxs)("li",{children:[Object(d.jsx)("p",{children:"Hosts file"}),Object(d.jsxs)("ul",{children:[Object(d.jsx)("li",{children:"Historically, before DNS we just had a hosts file"}),Object(d.jsx)("li",{children:"120.5.1.1 jennyscomputer"}),Object(d.jsx)("li",{children:"154.1.1.1 bobs-message-board"}),Object(d.jsx)("li",{children:"In linux it#s at /etc"})]})]})]})]}),Object(d.jsx)("li",{children:Object(d.jsx)("p",{children:"All data transferred is between server and client"})}),Object(d.jsxs)("li",{children:[Object(d.jsx)("p",{children:"URL"}),Object(d.jsxs)("ul",{children:[Object(d.jsx)("li",{children:"Universal Resource Locator"}),Object(d.jsx)("li",{children:"Web address"}),Object(d.jsx)("li",{children:"example.org             # simplest possible"}),Object(d.jsx)("li",{children:"www.example.org         # subdomain"}),Object(d.jsx)("li",{children:"http://www.example.org  # protocol part -- basic one; HyperText Transfer Protocol"}),Object(d.jsx)("li",{children:"https://example.org     # protocol; http with SSL encryption; when in production, always use"}),Object(d.jsx)("li",{children:"http://example.org:80   # the port -- http -- the browser hides this one"}),Object(d.jsx)("li",{children:"https://example.org:443 # the port for https -- the browser hides this one"}),Object(d.jsx)("li",{children:Object(d.jsx)("p",{children:"http://localhost:3000   # port 3000 is usually for NodeJS"})}),Object(d.jsx)("li",{children:Object(d.jsx)("p",{children:'http://example.org/dogs         # "dogs" here is part of the path, some kind of resource'})}),Object(d.jsx)("li",{children:"http://example.org/dogs.html    # if you have an extension, it could be a file, but might not"}),Object(d.jsx)("li",{children:"http://example.org/captcha.jpg  # could be a file, or could point to some logic"}),Object(d.jsx)("li",{children:Object(d.jsx)("p",{children:'http://example.org/dogs/search  # "dogs/search" is part of the path, again some resource    '})}),Object(d.jsx)("li",{children:Object(d.jsx)("p",{children:"http://example.org/dogs/poodle?color=white&puppy=false&size=small [--query parameters---]"})}),Object(d.jsx)("li",{children:Object(d.jsxs)("p",{children:["Query parameters are separated first with a question mark ",Object(d.jsx)("code",{children:"?"})," and after that, with an ",Object(d.jsx)("code",{children:"&"})]})}),Object(d.jsx)("li",{children:Object(d.jsx)("p",{children:"http://example.org/dogs/poodle?color=white#bottom   # the fragment part # could be a part of the page # could be some strange logic.. # always the last part"})}),Object(d.jsx)("li",{children:Object(d.jsx)("p",{children:"URLs are basically always unicode, meaning that symbols need to be Encoded."})}),Object(d.jsx)("li",{children:Object(d.jsx)("p",{children:'URL encoding looks like this: "green apple" -----encoding---\x3e "green%20apple" "green%20apple" ---decoding---\x3e "green apple"'})}),Object(d.jsx)("li",{children:Object(d.jsx)("p",{children:"Ports 80 - used for normal http web traffic 443 - used for https web traffic 22  - used for SSH connections"})})]})]})]}),Object(d.jsx)("h2",{children:"A word on publishing"}),Object(d.jsx)("p",{children:"You have a website. How do you publish it?"}),Object(d.jsx)("h3",{children:"FTP - File Transfer Protocol"}),Object(d.jsx)("pre",{children:Object(d.jsx)("code",{children:"The Oldschool way of publishing Just copy the files to the server, usually with a graphical program"})}),Object(d.jsx)("h3",{children:"SSH - Secure SHell"}),Object(d.jsx)("pre",{children:Object(d.jsx)("code",{children:"Copying files manually or over git ... But mostly used for connecting to a server. To transfer files use a command like `$ scp SOURCEFILE.txt username@serveraddress:/target/path/`"})}),Object(d.jsx)("h3",{children:"CI -- continuous integration systems"}),Object(d.jsx)("pre",{children:Object(d.jsx)("code",{children:'Used mostly on bigger projects and products As soon as your feature is accepted, it will automatically be updated into the website The most advanced system Difficult to set up Once up, it\'s by far the fastest ones Or "Contiunuous deployment" It might be only connected to a test or staging environment'})}),Object(d.jsx)("h3",{children:"Version control"}),Object(d.jsx)("p",{children:"You can go back and see the history of your files. You can see Who did, What did they do, When did they do it."}),Object(d.jsx)("p",{children:"Website is done --- Add a new feature --- Fix a bug --- Change the User Interface"}),Object(d.jsx)("p",{children:"History is just a part of why to use VCS - version control systems."}),Object(d.jsx)("p",{children:"Different VCS's - git --- originally developed for linux kernel development - subversion -- still popular but kinda old - mercurial... "}),Object(d.jsx)("p",{children:"We will be using git."}),Object(d.jsx)("p",{children:"Other than history, the biggest reason to use a VCS is collaboration. You can monitor and check each others work."}),Object(d.jsx)("p",{children:"Checking other peoples work is often called Peer Review and/or Code Review."}),Object(d.jsx)("p",{children:"VCS help with dealing with conflicts when multiple people work on the same file at the same time."}),Object(d.jsx)("h2",{children:"Advanced terminal usage"}),Object(d.jsx)("h3",{children:"Running multiple commands at the same time!"}),Object(d.jsx)("p",{children:"Method 1: $ command1 && command2 Command2 will run only if command1 is successful!"}),Object(d.jsx)("p",{children:"Method 2: $ command1; command2 Command2 will run even if command1 fails!"}),Object(d.jsx)("h3",{children:"Streams"}),Object(d.jsx)("p",{children:"In Linux-like systems each program has 3 streams:"}),Object(d.jsx)("pre",{children:Object(d.jsx)("code",{children:"input       STDIN   standard in output      STDOUT  standard out error       STDERR  standard errors"})}),Object(d.jsxs)("p",{children:["With the pipe symbol ",Object(d.jsx)("code",{children:"|"})," we can redirect the output stream of a program into the input stream of some other program."]}),Object(d.jsxs)("p",{children:["With the ",Object(d.jsx)("code",{children:">"})," symbol we can redirect the output stream into a file! Wit just one > we will replace the contents of a file. With two of them, however we can append text to the end of a file;"]}),Object(d.jsx)("p",{children:'$ echo "New stuff here!" >> logfile.txt'})]})}function v(){return Object(d.jsxs)("div",{id:"content",children:[Object(d.jsx)("h1",{children:"DAY 6 - BDL - GIT Todays agenda:"}),Object(d.jsx)("p",{children:"TEAM STUFF"}),Object(d.jsxs)("ul",{children:[Object(d.jsxs)("li",{children:["Code of conduct",Object(d.jsxs)("ul",{children:[Object(d.jsx)("li",{children:"https://berlincodeofconduct.org/"}),Object(d.jsxs)("li",{children:["Rules",Object(d.jsxs)("ul",{children:[Object(d.jsx)("li",{children:"Discrimination in all its forms won't be tolerated, tell Joel or Bianca if you witness this!"}),Object(d.jsx)("li",{children:"Strive to be on time"})]})]}),Object(d.jsxs)("li",{children:["Expectations",Object(d.jsxs)("ul",{children:[Object(d.jsx)("li",{children:'Respect others, "be excellent to each other"'}),Object(d.jsx)("li",{children:"Communicate! It's better to overcommunicate than undercommunicate"})]})]}),Object(d.jsxs)("li",{children:["Guidelines",Object(d.jsxs)("ul",{children:[Object(d.jsx)("li",{children:"There are no dumb questions!"}),Object(d.jsx)("li",{children:"When frustrated, contact Joel. Or contact Bianaca if frustrated with Joel :)"}),Object(d.jsx)("li",{children:"Be patient with others, sometimes you will know things already, but there's always the possibility of learning"}),Object(d.jsx)("li",{children:"Be patient with yourself, learning this stuff takes time, repetition and effort"}),Object(d.jsx)("li",{children:"It's OK to make mistakes and fail! Everyone does."})]})]})]})]}),Object(d.jsx)("li",{children:"Class name"}),Object(d.jsx)("li",{children:"Class logo? Carsten you made a cool one for Markdown!"}),Object(d.jsxs)("li",{children:["Custom Slack workspace",Object(d.jsxs)("ul",{children:[Object(d.jsx)("li",{children:"History is limited"}),Object(d.jsx)("li",{children:"Files are limited"}),Object(d.jsx)("li",{children:"Custom emojis :D"}),Object(d.jsx)("li",{children:"Custom name"}),Object(d.jsx)("li",{children:"Custom logo"}),Object(d.jsx)("li",{children:"Easier to setup custom channels"}),Object(d.jsx)("li",{children:"More privatererHACKATHON in #allgemein"})]})]}),Object(d.jsx)("li",{children:"Register before feb 12!GIT"}),Object(d.jsx)("li",{children:"Github account, send me your name!"}),Object(d.jsxs)("li",{children:["Git is distributed. You ",Object(d.jsx)("em",{children:"are"})," a server too. GH is just the central repo."]}),Object(d.jsx)("li",{children:"Git tracks Files, not folders."}),Object(d.jsxs)("li",{children:["Github",Object(d.jsxs)("ul",{children:[Object(d.jsx)("li",{children:"It's a great tool, butt not the ONLY tool!"}),Object(d.jsx)("li",{children:"Owned & operated by microsoft, used for developing Linux :)"}),Object(d.jsx)("li",{children:"First day on GH https://lab.github.com/githubtraining/first-day-on-github"})]})]})]})]})}function k(){return Object(d.jsxs)("div",{id:"content",children:[Object(d.jsx)("h1",{children:"BDL Day 7 :)"}),Object(d.jsx)("h2",{children:"GIT"}),Object(d.jsxs)("ul",{children:[Object(d.jsx)("li",{children:"Git tracks the version history of files"}),Object(d.jsx)("li",{children:"The history of a project is a timeline containing sets of changes (commits)"}),Object(d.jsxs)("li",{children:["Terminology",Object(d.jsxs)("ul",{children:[Object(d.jsx)("li",{children:"Commit = Set of changes to files"}),Object(d.jsx)("li",{children:"Master branch = Main branch of your repository"}),Object(d.jsx)("li",{children:"Repository = The place where your project code exists"}),Object(d.jsx)("li",{children:'Branch = Your "copy" for working with the code'}),Object(d.jsx)("li",{children:"Workflow = Order of operations, a guideline on when and how to work"})]})]}),Object(d.jsxs)("li",{children:["The ",Object(d.jsx)("code",{children:"git"})," command",Object(d.jsxs)("ul",{children:[Object(d.jsx)("li",{children:'Has "subcommands" or arguments'}),Object(d.jsx)("li",{children:"The git command does things depending on where you are"}),Object(d.jsxs)("li",{children:[Object(d.jsx)("code",{children:"git status"})," -- shows the status of git inside the current working directory"]}),Object(d.jsxs)("li",{children:[Object(d.jsx)("code",{children:"git clone [repository_address]"})," -- get a local copy of a repository, inside a new directory"]}),Object(d.jsx)("li",{children:"Has tab completion!"})]})]}),Object(d.jsx)("li",{children:"The .git folder defines that a folder is a git repository"}),Object(d.jsx)("li",{children:"The .gitignore file is a list of paths"}),Object(d.jsx)("li",{children:"The .gitignore paths --- yeah, git ignores them"}),Object(d.jsxs)("li",{children:["To changes branches, run ",Object(d.jsx)("code",{children:"git checkout [branchname]"})]}),Object(d.jsxs)("li",{children:["To get a list of all the branches, run ",Object(d.jsx)("code",{children:"git branch"})]}),Object(d.jsxs)("li",{children:["Live coding example...",Object(d.jsx)("ul",{children:Object(d.jsxs)("li",{children:["Workflow:",Object(d.jsxs)("ol",{children:[Object(d.jsx)("li",{children:"Clone the repository"}),Object(d.jsx)("li",{children:"Assign task to yourself"}),Object(d.jsxs)("li",{children:["Create a branch for this new task ",Object(d.jsx)("code",{children:"git checkout -b [branchname]"})]}),Object(d.jsx)("li",{children:"Made some changes (new file and edited a file)"}),Object(d.jsxs)("li",{children:["We staged the file we added with ",Object(d.jsx)("code",{children:"git add [newfile]"})]}),Object(d.jsxs)("li",{children:["We staged the file we changed with ",Object(d.jsx)("code",{children:"git add [oldfile]"})]}),Object(d.jsxs)("li",{children:["You can stage many changes (files) at the same time, such as with ",Object(d.jsx)("code",{children:"git add [foldername]"})]}),Object(d.jsxs)("li",{children:["You can finalize a commit with ",Object(d.jsx)("code",{children:"git commit"}),Object(d.jsxs)("ul",{children:[Object(d.jsx)("li",{children:"If git asks you to, tell it who you are using the provided commands"}),Object(d.jsx)("li",{children:"You need to add some kind of commit message."}),Object(d.jsx)("li",{children:'Commit messages are often imperative, such as "Update README"'})]})]}),Object(d.jsxs)("li",{children:["Update our changes to github using the command ",Object(d.jsx)("code",{children:"git push"}),Object(d.jsxs)("ul",{children:[Object(d.jsx)("li",{children:"Because we created the branch locally, we need to tell GitHub about it when pushing:"}),Object(d.jsxs)("li",{children:[Object(d.jsx)("code",{children:"git push --set-upstream origin issue-11-add-dogs"}),' - here "origin" refers to github']})]})]}),Object(d.jsx)("li",{children:"After the push is done, create a new Pull Request in GitHub"}),Object(d.jsx)("li",{children:"Merge the pull request"}),Object(d.jsx)("li",{children:"Close the issue."})]})]})})]}),Object(d.jsxs)("li",{children:["Live coding example 2: the same again, but twice!",Object(d.jsx)("ul",{children:Object(d.jsxs)("li",{children:["Remember to update your local repository using ",Object(d.jsx)("code",{children:"git pull"})]})})]})]}),Object(d.jsx)("h2",{children:"More git stuff"}),Object(d.jsxs)("ul",{children:[Object(d.jsxs)("li",{children:[Object(d.jsx)("p",{children:"Git Remotes"}),Object(d.jsxs)("ul",{children:[Object(d.jsx)("li",{children:"git works on repositories"}),Object(d.jsx)("li",{children:"you can have multiple repositories on your computer"}),Object(d.jsx)("li",{children:"you can have multiple repos in github"}),Object(d.jsx)("li",{children:"one repository can have relations to other repositories"})]})]}),Object(d.jsxs)("li",{children:[Object(d.jsxs)("p",{children:[Object(d.jsx)("em",{children:"Fork"})," Forking a repository means to get your own copy of the repository where you are in control!"]}),Object(d.jsx)("ul",{children:Object(d.jsxs)("li",{children:["This is often done to get your own ",Object(d.jsx)("em",{children:"remote"})," of someone elses repository"]})})]})]})]})}function S(){return Object(d.jsxs)("div",{id:"content",children:[Object(d.jsx)("h1",{children:"BDL 8 - Even MORE git stuff!"}),Object(d.jsxs)("ul",{children:[Object(d.jsxs)("li",{children:[Object(d.jsx)("code",{children:"git init"})," - initializes the current working folder as a git repository"]}),Object(d.jsx)("li",{children:"Init should just be run one time per repository"}),Object(d.jsxs)("li",{children:[Object(d.jsx)("code",{children:"git"})," commands can be run in subfolders"]}),Object(d.jsxs)("li",{children:["Git ",Object(d.jsx)("em",{children:"only"})," tracks files, not directories"]}),Object(d.jsx)("li",{children:'The commit message of the first commit to a repo often is "Initial import", "Initial commit" or something similar'}),Object(d.jsx)("li",{children:"You can create a repository in GitHub before OR after creating your local project"}),Object(d.jsxs)("li",{children:["To add an existing local git repository (new project for example) to a newly created GH repository, you need to add the GH repository as a ",Object(d.jsx)("em",{children:"remote"}),Object(d.jsx)("ul",{children:Object(d.jsx)("li",{children:Object(d.jsx)("code",{children:"git remote add origin https://github.com/usernamehere/projectnamehere.git"})})})]}),Object(d.jsxs)("li",{children:["You can see the manual for git commands too! ",Object(d.jsx)("code",{children:"man git branch"})]})]}),Object(d.jsx)("p",{children:"git config --global init.defaultBranch main "})]})}function C(){return Object(d.jsxs)("div",{id:"content",children:[Object(d.jsx)("h1",{children:"BDL The final countdown"}),Object(d.jsxs)("ul",{children:[Object(d.jsx)("li",{children:"Pull Request Review / Code Review example"}),Object(d.jsx)("li",{children:"New Project Example starting from GitHub"}),Object(d.jsxs)("li",{children:[Object(d.jsx)("code",{children:"git branch"})," - show a listing of all the branches"]}),Object(d.jsxs)("li",{children:[Object(d.jsx)("code",{children:"git branch -v"})," - show a list of all the branches (verbose, show more information)"]}),Object(d.jsxs)("li",{children:[Object(d.jsx)("code",{children:'git commit -m "Improve README"'})," - create a new commit and give it a commit message at the same time!"]}),Object(d.jsxs)("li",{children:[Object(d.jsx)("code",{children:"git log"})," - Shows the commit history of a repository"]}),Object(d.jsxs)("li",{children:[Object(d.jsx)("code",{children:"git diff"})," - Show the differences between two states in git",Object(d.jsx)("ul",{children:Object(d.jsx)("li",{children:"For example, show the modifications you have done without committing"})})]}),Object(d.jsxs)("li",{children:[Object(d.jsx)("code",{children:"git checkout"})," - Can do many different things",Object(d.jsxs)("ul",{children:[Object(d.jsxs)("li",{children:[Object(d.jsx)("code",{children:"git checkout [Branchname]"})," - This one switches the currently active branch"]}),Object(d.jsxs)("li",{children:[Object(d.jsx)("code",{children:"git checkout -b [Branchname]"}),' - This one creates a new branch called "Branchname"']}),Object(d.jsxs)("li",{children:[Object(d.jsx)("code",{children:"git checkout -- [path_to_file]"})," - This one reverts the changes you have made to a file"]})]})]}),Object(d.jsxs)("li",{children:[Object(d.jsx)("code",{children:"git rm"})," - Remove a file from git"]}),Object(d.jsxs)("li",{children:["Conflicts",Object(d.jsxs)("ul",{children:[Object(d.jsx)("li",{children:"Conflicts happen when a file is modified at the same time in two different places and those changes are merged"}),Object(d.jsx)("li",{children:"For example, Kai edits REAMDE.md in GitHub and Joel edits README.md in the local repository and tries to merge the changes"}),Object(d.jsx)("li",{children:"What needs to happen is we need to Resolve the Conflict"}),Object(d.jsxs)("li",{children:["When a conflict happens, you need to:",Object(d.jsxs)("ol",{children:[Object(d.jsx)("li",{children:"manually fix the conflicted files"}),Object(d.jsx)("li",{children:"stage (git add) the fixed conflicted files"}),Object(d.jsx)("li",{children:"make a new commit"}),Object(d.jsx)("li",{children:"remember to use git status to help you along"})]})]})]})]})]})]})}function B(){return Object(d.jsxs)("div",{id:"content",children:[Object(d.jsx)("h1",{children:"UIB - Boilerplate"}),Object(d.jsxs)("ul",{children:[Object(d.jsxs)("li",{children:["Boilerplate?",Object(d.jsx)("ul",{children:Object(d.jsx)("li",{children:"Repeated code that doesn't really do much, but is necessary"})})]}),Object(d.jsxs)("li",{children:["The user of a website is Usually human, but not always",Object(d.jsxs)("ul",{children:[Object(d.jsx)("li",{children:"Web Crawlers / Bots"}),Object(d.jsx)("li",{children:"For example, the Google Robot needs to understand your site"}),Object(d.jsx)("li",{children:"Screen scrapers user your website too, maybe"})]})]}),Object(d.jsxs)("li",{children:["Human users for websites vary a lot!",Object(d.jsxs)("ul",{children:[Object(d.jsx)("li",{children:"Different levels of sightedness (completely blind, partially or...)"}),Object(d.jsx)("li",{children:"Colour blindness"}),Object(d.jsx)("li",{children:"Different size screens"}),Object(d.jsx)("li",{children:"Cultural differences matter too"}),Object(d.jsx)("li",{children:"Connections speeds"})]})]})]}),Object(d.jsx)("h2",{children:"HTML"}),Object(d.jsxs)("ul",{children:[Object(d.jsx)("li",{children:"Based on SGML"}),Object(d.jsx)("li",{children:"Really exploded after HTML 4"}),Object(d.jsxs)("li",{children:["There used to be HTML 4 variants, such as",Object(d.jsxs)("ul",{children:[Object(d.jsx)("li",{children:"Frameset"}),Object(d.jsx)("li",{children:"Transitional"}),Object(d.jsx)("li",{children:"Strict"})]})]}),Object(d.jsxs)("li",{children:["There used to be XHTML",Object(d.jsxs)("ul",{children:[Object(d.jsx)("li",{children:"XML-compatible HTML"}),Object(d.jsx)("li",{children:"Normal HTML is NOT XML compatible"}),Object(d.jsx)("li",{children:"XHTML is pretty much dead"})]})]}),Object(d.jsx)("li",{children:"Now we have HTML 5.2 (5.3 is coming!)"}),Object(d.jsxs)("li",{children:["HTML is continuously developed",Object(d.jsx)("ul",{children:Object(d.jsx)("li",{children:"New elements are being added"})})]}),Object(d.jsxs)("li",{children:["HTML Elements",Object(d.jsxs)("ul",{children:[Object(d.jsx)("li",{children:"Start tag, End tag, Content, Attributes"}),Object(d.jsxs)("li",{children:["Paragraph: ",Object(d.jsx)("p",{title:"Hi!",children:"Bananas are great!"})]}),Object(d.jsxs)("li",{children:["Image: ",Object(d.jsx)("img",{src:"..",alt:""})]}),Object(d.jsx)("li",{children:"Empty elements, like img have no ending tag and no content"}),Object(d.jsxs)("li",{children:["Some elements can be self-closing as well, meaning that ending tag is integrated into the starting",Object(d.jsxs)("ul",{children:[Object(d.jsxs)("li",{children:[Object(d.jsx)("p",{}),"   this is a self-closing element/tag"]}),Object(d.jsxs)("li",{children:["Especially for line breaks this is common: ",Object(d.jsx)("br",{})," "]}),Object(d.jsx)("li",{children:'Self closing tags work, but might not be the "correct" way'}),Object(d.jsx)("li",{children:"Self closing tags are common especially because of React"}),Object(d.jsxs)("li",{children:["In React closing tags are ",Object(d.jsx)("em",{children:"mandatory"})," and we are actually not writing HTML (its JSX)"]})]})]})]})]})]}),Object(d.jsx)("h2",{children:"How the internet works (again!)"}),Object(d.jsxs)("ul",{children:[Object(d.jsx)("li",{children:"HTML documents are rendered by a web browser"}),Object(d.jsx)("li",{children:"The browser downloads the HTML file and processes it as it is downloaded"}),Object(d.jsx)("li",{children:"Browsers are super smart, erven if the HTML is a BIT broken, it might still work"}),Object(d.jsx)("li",{children:'HTML is "evaluated" or "interpreted" by the browser'})]}),Object(d.jsx)("h2",{children:"Working with code - VSCode"}),Object(d.jsxs)("ul",{children:[Object(d.jsx)("li",{children:"We will be using Visual Studio Code"}),Object(d.jsx)("li",{children:"VSCode is an IDE - Integrated Development Environment"}),Object(d.jsx)("li",{children:"Alternatives include Atom and Sublime"}),Object(d.jsx)("li",{children:"HTML files are edited often by hand, even though visual editors exist"}),Object(d.jsxs)("li",{children:["Setting up VSCode",Object(d.jsxs)("ul",{children:[Object(d.jsxs)("li",{children:["You have extensions (plugins)",Object(d.jsxs)("ul",{children:[Object(d.jsx)("li",{children:"Live Server"}),Object(d.jsx)("li",{children:"Prettier"}),Object(d.jsx)("li",{children:"So, so many others"})]})]}),Object(d.jsxs)("li",{children:["You have user settings",Object(d.jsx)("ul",{children:Object(d.jsx)("li",{children:"Color theme etc."})})]}),Object(d.jsxs)("li",{children:["You have workspace settings",Object(d.jsxs)("ul",{children:[Object(d.jsx)("li",{children:"Workspace is basically just a folder"}),Object(d.jsx)("li",{children:"Here you can define per-project color themes for example"}),Object(d.jsx)("li",{children:"Lets set the workspace color!"}),Object(d.jsx)("li",{children:"The workspace directory (.vscode) is almost always ignored in git (.gitignore)"})]})]}),Object(d.jsxs)("li",{children:["You have keyboard shortcuts",Object(d.jsxs)("ul",{children:[Object(d.jsx)("li",{children:"Ctrl + b -- Toggle (show or hide) the side bar"}),Object(d.jsx)("li",{children:"Ctrl + f -- Find stuff within a file"}),Object(d.jsx)("li",{children:"Ctrl + Shift + f -- Find in files"}),Object(d.jsx)("li",{children:"Ctrl + p -- Find files by name inside the current workspace"}),Object(d.jsxs)("li",{children:["Ctrl + Shift + p -- ",Object(d.jsx)("em",{children:"The Command Palette"})]}),Object(d.jsx)("li",{children:"Ctrl + Shift + ` -- Toggle VSCode integrated terminal"}),Object(d.jsx)("li",{children:"Ctrl + + -- Zoom in"}),Object(d.jsx)("li",{children:"Ctrl + - -- Zoom out"}),Object(d.jsx)("li",{children:"When working with code: Ctrl + Shift + 7"})]})]}),Object(d.jsxs)("li",{children:["Recommendation: Go through the settings of vscode at your own time sometimes!",Object(d.jsxs)("ul",{children:[Object(d.jsx)("li",{children:"Repeat this every now and then"}),Object(d.jsx)("li",{children:"Find out what works for you"})]})]}),Object(d.jsxs)("li",{children:["Introducing Emmet!",Object(d.jsxs)("ul",{children:[Object(d.jsx)("li",{children:"Built into vscode"}),Object(d.jsx)("li",{children:"Started life as a plugin (I think...)"}),Object(d.jsx)("li",{children:"Makes writing code (or markup like HTML) easier and faster"}),Object(d.jsxs)("li",{children:["Use ",Object(d.jsx)("code",{children:"p*5"})," to create 5 Paragraph elements quickly"]}),Object(d.jsx)("li",{children:"Cheat sheet: https://docs.emmet.io/cheat-sheet/"}),Object(d.jsxs)("li",{children:["For example, Create an empty html file and use the ",Object(d.jsx)("code",{children:"!"})," emmet abbreviation",Object(d.jsx)("ul",{children:Object(d.jsx)("li",{children:"This creates the common HTML 5 boilerplate"})})]})]})]})]})]})]}),Object(d.jsx)("h2",{children:"Examining the HTML 5 Boilerplate!"}),Object(d.jsx)("h2",{children:"Working with HTML"}),Object(d.jsxs)("ul",{children:[Object(d.jsxs)("li",{children:['files can be named anything, but they usually have the ".html" ending',Object(d.jsx)("ul",{children:Object(d.jsx)("li",{children:'"joel-file.html"'})})]}),Object(d.jsxs)("li",{children:["index.html is a special name",Object(d.jsxs)("ul",{children:[Object(d.jsx)("li",{children:'When an HTML file is called "index.html" the web server understands that it is the default html file to load from that folder'}),Object(d.jsx)("li",{children:'"index.html" might not be displayed in the URL (for convenience)'})]})]}),Object(d.jsx)("li",{children:"You might run into historical files that end in .htm OR .htmlx or .xhtml"}),Object(d.jsxs)("li",{children:["How to actually see a website you have done?",Object(d.jsxs)("ul",{children:[Object(d.jsx)("li",{children:"Locally opening the file on a browser"}),Object(d.jsxs)("li",{children:["Locally running a web server",Object(d.jsxs)("ul",{children:[Object(d.jsxs)("li",{children:["From within VSCode",Object(d.jsx)("ul",{children:Object(d.jsx)("li",{children:'use the "live reload" extension'})})]}),Object(d.jsxs)("li",{children:["From the command line",Object(d.jsx)("ul",{children:Object(d.jsxs)("li",{children:['Install the "live-server" program with NPM:',Object(d.jsx)("ul",{children:Object(d.jsx)("li",{children:"npm install --global live-server"})})]})})]})]})]})]})]}),Object(d.jsx)("li",{children:'"Lorem ipsum" placeholder text'}),Object(d.jsx)("li",{children:"Placeholder images, services such as placekitten work well"}),Object(d.jsxs)("li",{children:["Clean code is super important",Object(d.jsxs)("ul",{children:[Object(d.jsx)("li",{children:"Well indented"}),Object(d.jsx)("li",{children:"Much easier to understand"}),Object(d.jsx)("li",{children:"Much easier to maintain"}),Object(d.jsx)("li",{children:"It really helps with finding errors too"}),Object(d.jsx)("li",{children:"Helps with consistency and"}),Object(d.jsx)("li",{children:"Helps with working with others as well"})]})]})]}),Object(d.jsx)("h2",{children:"CSS - Cascading Style Sheets"}),Object(d.jsxs)("ul",{children:[Object(d.jsx)("li",{children:"Version 3 is the current one and CSS is being actively developed"}),Object(d.jsx)("li",{children:"CSS describes how HTML elements are to be displayed"}),Object(d.jsxs)("li",{children:["Three different ways of defining CSS",Object(d.jsxs)("ul",{children:[Object(d.jsxs)("li",{children:["External styles",Object(d.jsxs)("ul",{children:[Object(d.jsx)("li",{children:'A separate file for CSS, such as "main.css"'}),Object(d.jsxs)("li",{children:["Loaded into your webpage via the ",Object(d.jsx)("code",{children:"<link>"})," element"]}),Object(d.jsx)("li",{children:"The most common way in 2021"})]})]}),Object(d.jsxs)("li",{children:["Internal styles",Object(d.jsxs)("ul",{children:[Object(d.jsx)("li",{children:"Defined directly inside HTML files"}),Object(d.jsxs)("li",{children:["Inside ",Object(d.jsx)("code",{children:"<style>"})]})]})]}),Object(d.jsxs)("li",{children:["Inline styles",Object(d.jsx)("ul",{children:Object(d.jsx)("li",{children:"Written directly on the HTML element"})})]})]})]}),Object(d.jsx)("li",{children:Object(d.jsxs)("code",{children:["p ",String.fromCharCode(219)," color: crimson; ",String.fromCharCode(221)]})}),Object(d.jsx)("li",{children:'The "p" is a selector, it selects which elements are targeted by the rule'}),Object(d.jsxs)("li",{children:["The ",Object(d.jsxs)("code",{children:[String.fromCharCode(219)," color: crimson; ",String.fromCharCode(221)]})," is the declaration block - it contains one or more declarations separated by semicolons."]}),Object(d.jsx)("li",{children:"Each declaration includes a CSS property name and a value, separated by a colon"}),Object(d.jsx)("li",{children:"Multiple CSS declarations are separated with semicolons, and declaration blocks are surrounded by curly braces."})]})]})}var I=t(3),T=t(4);function U(){return Object(d.jsx)("div",{id:"content",children:Object(d.jsx)(I,{remarkPlugins:[T],children:L})})}var L='\n# UIB Content - part 1\n\n## Separation of concerns\n\n- It is a good idea to keep structure (HTML) and visuals (CSS) separate\n    - Separate people often work on these\n    - Better organization\n    - With external CSS; you only have to update one place\n    - It is also faster to load websites when the files are separate (cache; caching)\n    - It\'s clearer\n\n- ! CONTENT IS KING !\n    - With the exception of art websites, the content is what truly matters most\n    - Generally, it is better to have fantastic content than fantastic visuals\n    - However, visuals make the content better too!\n    - The structure of content is important for Search engines and humans\n    - HTML and CSS are *strongly* connected, and sometimes HTML needs to accommodate CSS\n\n- Semantics\n    - The art of using the right tag in the right place\n    - This can be difficult, depends on the situation\n    - Let us strive to do our best and select good elements!\n\n- This is where as a developer you develop your own skills with experience a lot!\n\n## HTML Continued\n- `title` HTML attribute, can be used in Many different tags (such as `p`)\n- `<br>` - Break row, mostly used inside paragraphs\n- `<hr>` - Horizontal rule, it draws a line! Useful for separating content\n- `<pre></pre>` - Preformatted text!\n    - By default, uses a Monospaced font\n    - Preserves whitespace\n    - Often used for text art for example\n- LISTS\n    - `<ul>` Unorganized list\n    - `<ol>` Organized list\n    - `<li>` List item\n    - Often nested within each other!\n- Often projects or companies have their own style guide\n    - For example https://google.github.io/styleguide/htmlcssguide.html\n    - Personally, I just use my own judgement\n    - HTML style varies a bit from developer to developer\n    - Old project? Follow the style that is already there\n- Indentation and nice code is important\n- Especially when looking at the original source\n\n## CSS - "Cascading Style Sheets"\n- Three types\n    - External (link tag)\n    - Internal (style tag)\n    - Inline (style attribute)\n- Example: `p { color: red; }`\n    - Here `p` is a selector\n    - Here `{ color: red; }` is the declaration\n    - Here `color` is the property\n    - Here `red` is the value\n- CSS can be applied in multiple different ways at the same time\n    - (internal, external and inline)\n    - example: dw.com has all three in use at the same time\n- New thing: commenting out CSS code!\n    - Use this style: /* CSS here */\n    - VSCode shortcut: Ctrl + Shift + 7\n- Reminder: "Cascading"\n    - Styles cascade down from parent element to descendants\n    - For example, the Body can have a red color\n    - And then all of its descendents will also be red',D=t(3),P=t(4);function M(){return Object(d.jsx)("div",{id:"content",children:Object(d.jsx)(D,{remarkPlugins:[P],children:A})})}var A='\n# UIB content 2\n\n## New CSS Stuff!\n- Elements with an "id" attribute\n    - New HTML attribute called `id`\n    - One element can only have one ID\n    - *Unique*: One ID *SHOULD* only be used by one element in an HTML file\n    - Values are alphanumeric (alphabet and numbers)\n    - Avoid \xfc \xf6 \xe4 etc, keep them from a to z (american alphabet...)\n    - Generally, these tend to be in english\n    - It\'s good to keep them descriptive, even if they are a bit long\n    - Getting more rare, still used but not super much\n    - ID is more powerful than the class when it comes to CSS\n    - ID CSS overrules class CSS\n- Elements with "class"\n    - New HTML attribute called `class`\n    - You can have multiple elements in the same HTML file with the same class\n    - You can have multiple classes in the same HTML element (tag)\n        - Different classes for one element are separated with a space\n            - For example: `class="important hilight"`\n    - Values are alphanumeric (alphabet and numbers)\n    - Avoid \xfc \xf6 \xe4 etc, keep them from a to z (american alphabet)\n    - Generally, these tend to be in english\n    - It\'s good to keep them descriptive, even if they are a bit long\n    - Much more popular\n- CSS Selectors\n    - ID: `id="title"` --\x3e `#title`\n    - Class: `class="important"` --\x3e `.important`\n\n## New css selector type\n- "Descendent combinator" CSS selector\n- Looks like this: `ol li { color: blue; }`\n    - Here "li" is descended from "ol"\n\n## NEW CSS!\n- `font-weight` -- defines the font weight\n    - Values are usually "bold" or "normal", but can be "bolder" for example\n- `background-color` -- defines the background color\n    - Used like "color"\n- `list-style-type` -- defines how the "bullet points" of a LIST look like\n    - Values like `circle` and `square`\n    - Also values like `"- "` work too!\n        - Any text characters\n        - Emojis are normal text characters! (Unicode)\n        - \ud83d\ude3a\n\n## HTML - (hyper)links\n- Anchor element: `<a>`\n    - "a" is the element\n    - "<a>" is the tag\n- The target of a link is defined in an attribute called `href`\n    - `<a href="staff.html">Staff</a>`\n- Originally used just for jumping around inside one file, kind of like bookmarks inside a PDF\n    - Still can be used in this way by referencing IDs!\n    - `<a href="top">Click to go up</a>`\n- Now, more commonly they link between files\n    - `<a href="staff.html">Staff</a>`\n- Can be used to link between different websites! (External sites)\n    - `<a href="https://wwww.google.de/">Googl</a>`\n- Can also be used to trigger different kinds of functionality, like sending an email\n    - `<a href="mailto:joel.peltonen@gmail.com">Email Joel</a>`\n        - mailto is a protocol!\n        - the href here is a URI (Universal Resource Identifier)\n        - Not a URL\n    - Other protocols (many!) exist as well, such as "tel"\n\n\n\n## Color in CSS\n- Colors can be defined in many ways\n    - Named colors / keywords: pink, blue, purple, silver, palegoldenrod...\n    - Hex colors / Hexadecimal colors: #FF   00     00\n                                       255   00     00\n                                       RED   GREEN  BLUE\n    - rgb(255, 0, 0);\n- Transparency\n    - CSS property\n        - `opacity` -- "How opaque something is"\n        - Ranges from 1.00 to 0.00, for example "0.50"\n    - CSS color\n        - rgba - Red,   Green,  Blue,   Alpha\n                 0-255, 0-255,  0-255,  0-1\n- Other color schemes\n    - Self study\n    - CMYK\n    - HSL\n    - HSLA\n\n## Important! \n    In CSS it matters in what order your declarations are in\n\n## CSS Pseudo classes\n- link states are a great example of these!\n    - visited link\n        - CSS with pseudoclass: `a:visited { color: black; }`\n    - active link\n        - CSS with pseudoclass: `a:active { color: black; }`\n    - hovered link#\n        - CSS with pseudoclass: `a:hover { color: red; }`+\n- Try out link pseudoclass styles in different orders\n    - visited after active\n    - active after visited\n    - hover before either\n    - hover after either \n    - etc\n    - the order matters!\n',H=t(3),R=t(4);function E(){return Object(d.jsx)("div",{id:"content",children:Object(d.jsx)(H,{remarkPlugins:[R],children:F})})}var F='\n# UIB day 4\n\n## Updating a forked repository from the original\n - Automatic\n    - Create a new Pull Request in GitHub\n    - Click on "Switch base", if it is available to you#\n    - After merging the Pull Request, update your local repository using git pull\n - Manual\n    - Copy the changes manually\n    - use git commands (Search Google for assistance here)\n\n## CSS Units\n - CSS has a lot of units to use\n - We will be looking at "px", "%", "em", "rem", "vw", "vh"\n - New CSS: `width`, `height`, `font-size`\n - New HTML: `<div>`\n    - No semantic meaning\n    - Container element, wrapper\n    - Often deeply nested\n    - Very very common in the real world\n- Pixels or `px`\n    - Static length or static size\n    - Basically, these are the unit of the web\n    - Reference pixels, Not Device pixels\n        - Mobile phone with 4k\n        - https://developer.mozilla.org/en-US/docs/Glossary/CSS_pixel\n        - Affected by zoom!\n    - Values smaller than one pixel can exist and are fairly common\n        - For example `font-size: 15.2px;`\n- Percentages or `%`\n    - Dependant on the parent\n    - Dynamic length or dynamic size\n    - Affected by zoom levels\n    - You can be more accurate than 1%, so "50.04%" is valid\n- For most users, the default font size of a browser is "16px"\n    - The root font size of a page is defined by the `<html>` element\n    - You can define this yourself with CSS\n    - The font settings _cascade_ down from the `<html>` element\n- Font size with percentages\n    - Like widths, these are dependent on the parent!\n    - Gets complicated with nesting!\n\n- `em` and the `rem` units\n    - Typography units\n    - Often used in font sizing, very useful there\n    - Not common for defining layouts\n        - Except for a few exceptions\n    - Units that come from typesetting originally\n    - rem - "root em" units\n        - Relative to root font size\n        - Can be tricky to design around if you don\'t have a set root font size\n            - Users might have different default font sizes\n        - A size that is relevant to the ROOT font size\n        - Can be thought of as percentages relevant to the root font size\n            - `1.2rem` is 120% of the root font size\n            - `0.5rem` is 50% of the root font size\n            - `.5rem`  is 50% of the root font size\n            - `1.337rem` is 133.7% of the root font size\n        - Common for especially font sites\n        - Sometimes used for icon sizes as well\n    - em - "em" units\n        - Relative to parent font size\n        - If the parent font size is "20px"\n            - 0.1em == 2px (10% of 20px)\n            - 1em == 20px (100% of 20px)\n            - 2em == 40px (200% of 20px)\n        - Pretty much the same as percentages when it comes to font size\n            - 1em works exactly like 100% *for text*\n        - Originally from how wide the "M" character is for a font\n        - Now in CSS it is just the font size\n        - Good use case: Icon images inside text elements\n            - Relevant to the text size of the parent\n\n- `vw` -  `vh`\n    - percentages of the viewport height and width in pixels\n    - values from 0 to 100\n    - viewport width\n        - sizing relative to the viewport width\n        - the parent size does not matter\n    - viewport height\n        - sizing relative to the viewport height\n        - the parent size does not matter\n    - Commonly used in creating full screen landing pages\n    - Also commonly used in full screen elements, such as\n        - cookie warnings\n        - overlay images\n        - overlay dialogs\n    - Also commonly used in positioning\n\n## Developer Tools! Devtools! Browser tools! Developer console!\n- Right click an element on the page and select "Inspect element" from the context menu\n- Alternatively, press F12 on your keyboard\n- Can be positioned in the bottom or the right of your browser\n- Can be detached and exist in a separate window from your browser\n- INSPECTOR tab\n    - HTML and CSS\n    - Edit CSS values\n    - Add new CSS rules and values\n    - Add new CSS blocks\n    - View the computed CSS values for an element\n    - View the Font of an element\n    - Edit HTML\n- NETWORK tab - shows you what is being loaded\n\n*Task time here*\n\n- Let us have a look at the CNN and the Immoscout24 websites',N=t(3),z=t(4);function $(){return Object(d.jsx)("div",{id:"content",children:Object(d.jsx)(N,{remarkPlugins:[z],children:W})})}var W='\n# UIB - Images\n\n## Basic HTML, CSS with images\n- Downloading images\n    - Context menu depends on what thing you rightclicked\n    - Normal images have a "Save image as" option\n- Normal HTML images: `<img src="image.jpg2" alt="Here!">`\n    - The ALT attribute is important\n        - Provides a text alternative if the image doesn\'t work\n        - Especially needed if the user has a screen reader\n        - If the image is broken or loads very very slowly, this can provide context too\n- Width and height\n    - You can add width and height as attributes\n        - `<img src="image.jpg" alt="Here!" width="200" height="100">`\n            - No units!\n        - Width/height when give as attributes (inline) they generally should be the real sizes of the image\n            - Often used when images are part of the content\n        - The space for the image is reserved\n    - You can also use CSS to size images\n        - Even when they have an inline size definition!\n        - CSS overrules HTML width/height\n    - In the real world, in perfect examples, you have both defined\n        - This is optimal for making the site work in all cases\n    - Avoid having huge images squeezed into small spaces\n        - This makes websites load very slowly\n        - Depending on the situation, you can have different sizes for the same images\n- Absolute and relative paths\n    - Absolute: Works from anywhere (on your own website)\n        - Full URL\n        - `<img src="https://www.example.org/image.jpg" alt="Example images!" width="200" height="100">`\n    - Relative:\n        - Relative to the current URL\n        - Local URL\n        - `<img src="./../pics/image.jpg" alt="Example images!" width="200" height="100">`\n\n\n## New CSS!\n- Borders!\n    - Rule: `border`\n    - Value: `[width] [style] [color]`\n    - Width can be defined with `px`, `rem`, `em` etc CSS units\n    - Style is mandatory\n        - solid\n        - dashed\n        - dotted\n        - double\n        - groove\n        - etc\n    - Color is optional, defaults to current font color\n        - Use the usual CSS color rules (named, hex, rgb, etc...)\n    - Can be defined separately as well\n        - `border-color`\n        - `border-width`\n        - etc\n- Border radius!\n    - `border-radius: 15px;`\n    - most commonly done with pixels or with percentages\n        - `border-radius: 50%` - very common with profile pictures\n    - Value can be defined separately for the corners\n    - `border-radius: 15px 5px 15px 5px;`\n    - `border-radius: 40% 15%;`\n- Object-fit and Width AND height\n    - for example, an image within a parent div\n    - makes the image fit in the specified way\n    - `object-fit`, `width` and `height` are used together\n    - https://developer.mozilla.org/en-US/docs/Web/CSS/object-fit\n\n        ```\n        <div style="border: 1px solid red; width: 90vw; height: 200px;">\n            <img\n                src="https://placekitten.com/500/200"\n                alt="Kitten"\n                style="object-fit: cover; width: 100%; height: 100%;"\n            >\n        </div>\n        ```\n    - Can be used for other things than images too (videos)\n- Image links\n    - Just wrap an image with an `a` link tag\n- Using float\n    - CSS `float`\n    - "float" is a thing that was designed to wrap text around an image\n    - Mostly to be used when you control the image and the text\n    - Avoid using float for _anything_ else (design)\n\n## Image formats\n\nMost common and important formats used in the web\n\n    - JPG\n        - Raster\n        - Binary files\n        - This compression works best for photos\n    - PNG\n        - Raster\n        - Binary files\n        - This compression works best for logos/cartoons/screenshots/gradients etc (not photos)\n        - Can be transparent\n        - Can be animated (rare, sometimes .apng or .mpng etc)\n    - GIF\n        - Raster\n        - Binary files\n        - Can be transparent\n        - Can be animated\n    - SVG\n        - Inline or Normally\n        - Just text files (XML)\n        - Vector\n        - Can be transparent\n        - Can be animated (with CSS or JavaScript)\n\n\n\n\n\n## Quick into to GIMP\n- Basic image manipulation\n    - Crop\n    - Draw\n    - Export\n    - Color picker\n    - Add text\n    - Work with layers\n    - Resizing an image to create a thumbnail (scaling)\n- Raster files!\n- No animation\n- In Ubuntu; the screenshot tool is nice!\n\n\n\n## Core CSS Basic awesome greatness\n- More specific selectors\n- Descendant selector example: `#mainpage p { color: red; }`\n    - All paragraphs descended from the #mainpage element\n- Comma separated selectors: `.fool, p { color: blue; }`\n    - All elements with the class "fool" and all paragraphs\n- To change the mouse cursor: `cursor: pointer;`\n- To change the text style: `text-decoration: underline;` (or none)\n\n\n\n\n\n\n',G=t(3),V=t(4);function Y(){return Object(d.jsx)("div",{id:"content",children:Object(d.jsx)(G,{remarkPlugins:[V],children:q})})}var q='\n# UIB Content - a11y\n\n## Accessibility\n- Goal: provide equal access and opportunity to people with disabilities\n- Goal: make the web accessible\n- Often shortened to a11y in text (A, 11 characters, Y)\n- Semantic elements have good a11y support already\n\t- Content elements with a meaning\n\t- "h1" instead of "div"\n\t- "p" instead of "div"\n\t- "button" instead "div"\n\t- real inline elements instead of "span"\n- Semantically important attributes\n\t- "alt" for images\n\t- Good for screen readers\n\t- Also good for SEO!\n- Screen reader example: ChromeVox extensions\n\t- Operating systems have their own screen readers too\n\t- NVDA (windows)\n\t- Orca (linux)\n\t- Voiceover (osx)\n\t- WebAnywhere\n- Websites should be usable with just the keyboard too!\n- Use ARIA attributes to help create an accessible webnsite\n\n\n\n\n\n\n\n',J=t(3),_=t(4);function X(){return Object(d.jsx)("div",{id:"content",children:Object(d.jsx)(J,{remarkPlugins:[_],children:K})})}var K='\n# UIB - Fonts and boxes\n\n## Quick tip\n\n- Google Fonts for custom fonts\n\n## Everything is a box!\n\n- Easy to see with inspecting and setting Dev tools CSS\n  - `* { border: 1px solid red !important; }`\n  - `div { border: 1px solid blue !important; }`\n  - `span { border: 1px solid green !important; }`\n\n## Containing content\n\n- Semantic elements, let\'s learn a few\n- `<main>`\n  - represents the main content of a page\n  - often combined with "skipnav" technique\n  - nav = your navigation menu\n    - `<nav>` - semantic element used for wrapping your navigation section\n  - used for wrapping your main content\n  - "shrink wrapping" / wrapping\n    - put all of your content inside the main\n  - often you can have classes and/or ids for your main element\n    - <main class="container"></main>\n  - One (visible) main per page\n\n## Stop content busting out of its box!\n\n    width: 40vw;       /* Set box width */\n    height: 40vh;      /* Set box height */\n    margin: auto;      /* Center this box inside its parent box */\n    overflow: hidden;  /* Prevent content from overflowing out of the box! */\n\n## Elements\n\n- Two types of elements\n  - Block\n    - Always start (on) a new line\n    - Take up the full width available\n      - stretch out to the left and to the right as much as they can\n      - meaning it has a width of 100% by default\n      - the height is defined by the content automatically OR by the developer\n  - Inline\n    - Start within an existing block-level element (they don\'t start a new line)\n\n### BLOCKS\n\n- main, nav, div, p, hr, lists(ul, ol, li), h1-h6, pre\n- <section>\n    - a section of the page which doesn\'t have a more specific semantic element to use\n    - often these would have a heading\n- <article>\n    - a self-contained composition in a page, which is intended to be independently redistributable or reusable\n- <aside>\n    - a part of a document where the content is only indirectly related to the main content\n- <header>\n    - defines the top part of a page\n    - often repeated in many pages\n- <footer>\n    - defines the bottom part of a page\n    - often repeated in many pages\n\n- SO SO SO MANY MORE!\n\n### INLINE\n\n- span, a, em, br, img\n- strong, b\n- sup and sub\n- input\n\n**You do not need to know all of these**\n\n**Self-learning** Have a look at MDN to see what Block and Inline elements exist\n',Q=t(3),Z=t(4);function ee(){return Object(d.jsx)("div",{id:"content",children:Object(d.jsx)(Q,{remarkPlugins:[Z],children:ne})})}var ne='\n# UIB - The Box Model\n\n## Modeling boxes - the box model\n\n- What is the box model?\n        - Everything is a box\n        - Box model = how to calculate the size of a box\n        - Calculated from\n                - The content & CSS\n                - Padding\n                - Border\n                - Margin\n- Measuring box sizes is hard\n- Having a fluid / dynamic content area is better for the user\n- Two ways of calulating box sizes\n        - box-sizing: content-box\n                - width = content\n        - box-sizing: border box\n                - width = content + padding + border\n        \n    <main\n      id="main"\n      style="\n            background-color: lightblue;\n            width: 50%;\n            padding: 10px;\n            border: 10px solid;\n            margin: 10px;\n            box-sizing: border-box;\n      "\n    >\n              Lorem ipsum dolor sit amet consectetur adipisicing elit. Quibusdam minus\n              unde in sit ullam ut magnam dicta iusto, deleniti asperiores qui? Velit\n              nam iure similique ab alias praesentium! Molestias, asperiores! Lorem\n              ipsum dolor sit amet consectetur, adipisicing elit. Saepe perferendis, ad\n              explicabo maiores magnam amet itaque quos, non ex iusto molestiae\n              architecto nobis aliquam sunt incidunt at! Voluptatibus, quam porro.\n    </main>\n\n## Reset CSS\n        - A bit of CSS to reset browser defaults\n        - One example:\n        - `* { margin: 0; padding; 0; box-sizing: border-box; }`\n        - More complex reset CSS definitions help with browser inconsistency\n        \n## CSS shorthand\n        - example: `margin: 10px`\n                - margin-top: 10px\n                - margin-right: 10px\n                - margin-bottom: 10px\n                - margin-left: 10px\n        - example2: `margin: 10px 5px 0 50%;` - remember: TRouBLe / clockwise\n                - margin-top: 10px\n                - margin-right: 5px\n                - margin-bottom: 0\n                - margin-left: 15%\n        - example3: `padding: 10px 50px;` - Vertical - Horizontal\n                - padding-top: 10px\n                - padding-right: 50px\n                - padding-bottom: 10px\n                - padding-left: 50px\n        - border: `border: 1px solid red`\n                - border-width: 1px;\n                - border-style: solid;\n                - border-color: red;\n        - other shorthands, such as font amd backgound exist as well\n\n## Inline vs Block box model\n- The box model applies to inline elements too! Just a bit differently\n- Inline elements\n        - don\'t respond to margin-top, margin-bottom, width or height\n        - Top and bottom values do not push other elements or rows of text\n        - Inline elements are contained vertically in a line of text\n- Inline vs Block\n        - It\'s just the value of `display`\n        - Inline elements are elements with a "display" value of "inline"\n        - Block elements are just elements with a default "display" of "block"\n        - You can control this!\n        - `display: block;`\n        - `display: inline;`\n        - `display: none;`\n        - `display: inline-block;`\n                - Hybrid between the block and the inline elements\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n',te=t(3),ie=t(4);function se(){return Object(d.jsx)("div",{id:"content",children:Object(d.jsx)(te,{remarkPlugins:[ie],children:oe})})}var oe='\n# UIB - More backgrounds!\n\n## Backgrounds yeah!\n\n- `background-image` - for decoration, not content\n        - You can have multiple background images and a background color!\n        - background-color: lightcyan;\n        - background-image: url("bg.png"), url("bg2.png");\n- `background-repeat` - controls how our background image is repeated\n        - background-repeat: no-repeat; - does not repeat\n        - background-repeat: repeat-x; - repeats horizontally\n        - background-repeat: repeat-y; - repeats vertically\n        - background-repeat: round; - repeats, but rounds the image sizes\n        - background-repeat: space; - repeats, images get spaced according to the available space\n- `background-size`\n        - background-size: 100px; - defines a width of 100px, height gets automatically calculated\n                - maintains aspect ratio\n        - background-size: 100px 100px; - width 100px, height 100px\n                - does not maintain aspect ratio\n        - background-size: cover - the background attempts to cover the containing box\n        - background-size: contain - the background attempts to be shown completely in the containing box\n- background-position\n        - background-position: top; - centered, at the top of the containing box\n        - background-position: center; - centered horizontally and vertically\n        - background-position: left; - centerd vertically, to the left of the box\n        - background-position: right; - centerd vertically, to the right of the box\n        - background-position: 10px 100px; - 10 px from the left, 100px from the top        \n- setting multiple attributes with the `background` shorthand\n        - `background: no-repeat center url("bg.png"), \n                       no-repeat center url("bg2.png");`\n        - background: green;\n        - Check MDN when and if you want to use this\n\n## Gradients!\n\n- Remember, transparency works here too!\n\n- linear gradient\n        - background: linear-gradient(#000, #F00);\n        - background: linear-gradient(#000, #F00, yellow);\n- radial gradient\n        - background: radial-gradient(red, #000, rgba(0,0,0,0));\n- conic gradient\n        - background: conic-gradient(#000, #f00, #00f, #000);\n- When creating gradients, a CSS Gradient tool is really helpful!\n        \n        \n## Positioning\n\n- Coordinate positioning\n        - Usually set with either "top" and "left" OR "bottom" and "right"\n- CSS `position`\n        - Often combined with coordinates\n        - `position: static;` - default value, element follows normal document flow\n        - `position: absolute;` - element is removed compltely from the normal flow \n                - is positioned with coordinates\n                - the element takes no space in normal document flow\n        - `position: relative;` - element is positioned relative to itself\n                - the space taken up by the element is taken normally\n        - `position: fixed;` - removed from normal document flow, relative to the viewport\n                - is positioned with coordinates\n                - ignores parent/ancestor scrolling\n        - `position: sticky;`\n                - not supported by *everything*\n                - is positioned with coordinates\n                - ignores parent/ancestor scrolling until it hits the viewport edge, then it kind of becomes fixed\n        \n## Z-index -- CSS layering\n \n- Z-axis coordinates, higher is closer to the user, ontop of lower\n- Numbered values starting from 0\n- Default is actually (auto)\n- Values can be negative\n- Like layering\n- For big sites, it\'s best to have a System:\n        - auto for basic content\n        - 100-999 for the overlays (backgrounds)\n        - 1000-9999 for dialogs (cookie accept)\n        - 10000-99999 for modals (alert, such as "you have signed out automatically")\n\n## Positioning- Coordinate positioning\n        - Usually set with either "top" and "left" OR "bottom" and "right"\n- CSS `position`\n        - Often combined with coordinates\n        - `position: static;` - default value, element follows normal document flow\n        - `position: absolute;` - element is removed compltely from the normal flow \n                - is positioned with coordinates\n                - the element takes no space in normal document flow\n        - `position: relative;` - element is positioned relative to itself\n                - the space taken up by the element is taken normally\n        - `position: fixed;` - removed from normal document flow, relative to the viewport\n                - is positioned with coordinates\n                - ignores parent/ancestor scrolling\n        - `position: sticky;`\n                - not supported by *everything*\n                - is positioned with coordinates\n                - ignores parent/ancestor scrolling until it hits the viewport edge, then it kind of becomes fixed',re=t(3),ae=t(4);function le(){return Object(d.jsx)("div",{id:"content",children:Object(d.jsx)(re,{remarkPlugins:[ae],children:ce})})}var ce='\n# UIB10 - UI/UX - Intro to UI / UX Again!\n\n## *Interface*\n\n- Boundary between two separate concepts / components\n    - Person / Information about a company\n    - Person / Computer \u2014> Mouse, Keyboard (Human Interface Device)\n    \n## User Interface (UI)- Human - Computer interaction\n\n- Human and a website\n    - Visual (to see, a Graphical User Interface [*GUI*])\n    - Tactile (to touch, Phone tactile feedback and Braille displays)\n    - Auditory (to hear)\n- Websites are interfaces between people and information\n\n## User eXperience (UX)\n\nSee link at [https://userinyerface.com/game.html](https://userinyerface.com/game.html)\n\n## Fonts (continued)\n\nDifferent faces for different meanings, font styles:\n\n- Serif\n    - Has serifs\n    - "look authoritative, professional, suggest the weight of history or experience" - Adobe\n    - Often used in the body of newspapers and articles\n    - Can be more readable when there is very little room or the font is small\n- Sans Serif\n    - Does not have serifs\n    - Hard, minimalistic, modern feeling\n    - "Maybe a bit overused" - Joel\n    - Take up less space (narrower than serif)\n- Monospace\n    - Code\n    - ASCII art\n    - Data tables and lists\n- Cursive\n    - Real pretty\n    - Soft\n    - Modern or old looking\n    - Visual selection\n- Symbol\n    - Icons for example or emojis (windings for example)\n    - Pictures or pictographs instead of letters\n        - Meaning that letters are rendered as little text-images\n- Emoticons / Emoji are just unicode symbols similar to "A" or "7"\n    - Some fonts support these, some dont\n    - When a symbol is not supported by a font your browser tries to use some other font\n        - (Or fails miserably) - in the olden days Heikki T\xe4k\xe4l\xe4inen \u2014> Heikki T?k?l?inen\n- Choosing a font is a part of your UX / UI Design\n    - Mixing fonts is OK!\n        - For example: Sans-serif for headings, Serif for paragraphs\n- `font-family`\n    - Pre-installed system fonts: May not work for everybody, so use generics or fallbacks\n        - Fallback fonts; "font1", "banana revolution", "Arial"\n        - Generics: sans-serif, serif, monospace\n    - Using your own fonts injected via link or @import - they will just work\n- CSS `:root` pseudo-class\n    - Targets whatever the root element is\n    - Often used to define the default font\n- Getting more fonts: use @import or <link>\n    - the @import(s) needs to be before anything else in your CSS\n    - `@import "common.css" screen;`\n    - `@import "print.css" print;`\n\n## Icon font example - Fontawesome    \n\n    *NOTE* We are looking at *version 4* of Fontawesome.\n    Icon font, often used in websites\n    Icon fonts are popular because they load quickly, they are vectors (scalable)',de=t(3),he=t(4);function je(){return Object(d.jsx)("div",{id:"content",children:Object(d.jsx)(de,{remarkPlugins:[he],children:me})})}var me='\n# Lessons - UI UX - Direction and stylish\n\n## Text Direction\n\n- Writing text from Left to Right and Right to Left\n    - Hebrew or Arabic\n    - HTML `dir="rtl"`\n        - Inherited from parent to children!\n    - CSS `direction: rtl;`\n    - Default is `ltr`\n    \n## Text Alignment\n\n- Align text with\n    - `text-align: center;`\n    - `text-align: justify;`\n    - `text-align: right;`\n    \n## Stylish text\n\n- `font-weight`\n    - normal, bold\n        - 100\n        - 200\n        - 300\n        - 400 \u2014 "normal"\n        - 500\n        - 600\n        - 700 \u2014 "bold"\n        - 800\n        - 900\n    - Which ones work, depends on the font **family**\n        - "Arial"\n- `font-style`\n    - italic, normal are the usual values\n    - ~~"oblique" exists, rarely used~~\n- `text-decoration`\n    - `text-decoration: underline;` is a shorthand\n        - `text-decoration-line`\n        - `text-decoration-color`\n        - `text-decoration-style`\n    - `green wavy underline`\n    - `underline overline blue`\n    - `line-through`\n- `text-transform`\n    - uppercase, lowercase, capitalize\n- `text-shadow`\n    - `1px 2px 26px #ff0000`\n        - 1px offset to the right\n        - 2px offset to the bottom\n        - 26px blur amount\n        - #ff0000 color\n- `::before` , `::after`, `content`\n    - before and after are pseudo-elements\n        - two colons for pseudo-elements\n        - one colon for pseudo-classes\n    - content defines some kind of content in relation to the selector',be=t(3),pe=t(4);function ue(){return Object(d.jsx)("div",{id:"content",children:Object(d.jsx)(be,{remarkPlugins:[pe],children:xe})})}var xe='\n# UIB - FontAwesome & Boxes revisited\n\n## Fontawesome revisited\n\n- Conveys meaning without text using icons\n- Register and sign in to use the easy method of injecting a script and FA "just works"\n    - OR: Download FA locally and use (link) it like any other CSS file (the fonts will be included automatically then too)\n- Note! You have to use the correct code (like Joel did not, thanks Rudesh!)\n- FontAwesome is a Font icon library - fonts are vectors!\n- Not the only Icon Font Library\n    - Self-study: alternatives to FA; flaticon, thenounproject.com\n    \n## Everything is a Box!\n\n- The Box Model\n- Boxes are made up of a few different parts inside out:\n    - Content / Content area\n    - Padding\n    - Border\n    - Margin\n- When we define a CSS box width, it targets the content area (padding, border, margin are not counted as the width)\n- IF we use `box-sizing: border-box` - the padding and border are included in the width\n- Different types of boxes\n    - Block (Block-level elements)\n        - div, p, section, h1...\n    - Inline (elements)\n        - b, i, span, a, strong, em...\n        - In line with text, like a part of text\n        - Cannot have height, width\n        - Padding and margin work, but top and bottom don\'t move other content away\n    - Inline blocks\n        - Mostly done ourselves with CSS\n        - Can have height, width\n        - Padding, margin work\n        - `vertical-align: middle`\n            - Aligns the inline-block  element within its current line of text (often moves the line of text a bit too!)\n    - (((( Some blocks behave like in between inline amd inline-blocks, like images ))))',fe=t(3),ge=t(4);function Oe(){return Object(d.jsx)("div",{id:"content",children:Object(d.jsx)(fe,{remarkPlugins:[ge],children:we})})}var we='\n# UIB - UIUX - Design\n\n## Basic principles of UI design\n\n- Structure (Overall UI architecture)\n        - Organize the UI meaningully and usefully\n        - Use clear & consistent models that are recognizable\n        - Put related things together, separate unrelated things\n                - Company metadata section\n                        - About us, Jobs, Media, History, Campuses\n                - Products section\n                        - Search, Promotions, Lookbooks, etc..\n        - Differentiate dissimilar things, make similar things resemble each other\n- Simplicity\n        - Design should make simple, common tasks easy\n        - Communicate clearly and simply in the users own language\n        - Provide good shortcuts that are meaningully related to longer procedures\n- Visibility\n        - Make all needed options and materials visible\n        - Don\'t distract the user with extra or redundant information\n        - Don\'t overwhelm the user with alternatives or confuse with unneeded information\n- Feedback\n        - Keep the user informed of\n                - Actions or interpretations\n                - Changes of state\n                - Errors or exceptions that are relevat to the user\n        - Feedback should clear, concise and unambiguous (an in a language familiar to the user)\n- Tolerance\n        - Design should be flexible and tolerant\n        - Reduce the cost of mistakes and misuse by allowing undo / redo\n        - Prevent errors when possible by tolerating varied inputs and sequences\n        - Interpret all reasonable actions\n- Reuse\n        - The design should reuse internal and external componets and behaviours\n        - Maintain consistency with purpose rather than arbitrary consistency\n        - Reduce teh need for users to rethink and remember\n        \nhttps://en.wikipedia.org/wiki/Principles_of_user_interface_design\n\n- Additionally, focus on design consistency and components\n        - Elements look the same everywhere\n        - Space between elements is consistent\n        - Buttons look similar etc\n\n## Designing with Colors!\n\n- Branding is important here!\n        - Tiffany.de -- The "Tiffany" blue\n        - Fiskars.com -- The "Fiskars" orange\n        - Fazer.com -- The "Fazer" blue\n- You often have one primary or main color\n        - That doesn\'t mean to make _everything_ that color\n        - Primary color does not mean background color\n        - You can have a dark AND a light version using the same color palette!\n        - "A tamer primary color and a brighter accent color gives apps a bold, colorful look without overwhelming the content"\n- In addition to the primary color, you\'ll most likely have a set of others too!\n        - Secondary or Accent color\n        - Plus others, I\'d advise to have at least three colors\n        - Accent colors, like the The "Fiskars" orange *could* be used in\n                - Buttons\n                - Hover action hilights\n                - Controls (sliders, switches, inputs...)\n                - Hilighted text, Progress bars\n                - Links and Headlines\n- Selecting colors\n        - It\'s easiet to start with one main color / starting point\n        - It\'s easiest and simplest to use a generator\n                - coolors.co\n                - https://color.adobe.com/create/color-wheel\n                - *Self study hint* https://material.io/design/color/the-color-system.html#color-usage-and-palettes\n\n- Design guidelines document example\n        - Color palette\n        - Content examples\n        - Component examples\n        - A mature version of of this would be Material UI\n\n## More on color!\n        \n- Hue\n        - Color in its pure form\n- Saturation\n        - The intensity or purity of a hue -- vivid, bright\n        - A very saturated website: neopets.com\n- Lightness - the relative degree of black / white mixed with a give hue\n        - A lot of black - a duller color\n- Tempretarure\n        - To make a color warmer, add orange or yellow\n        - To make a color colder, add blue\n\n*notes on color*\n- Color meaning might vary from culture to culture\n- Accessibility is relevant when choosing a color palette\n- When learning, it\'s a good idea try to implement nice looking designs from other websites\n- Experiment with textures too!\n        - https://wesbos.com/\n        - Footer at fazer.com\n\n## An example on color usage - light and shadows\n\n- Shadows convey elevation\n- You can use text and box shadows to emulate a light source\n\n## Further research suggestions\n\n-  (Podcast) https://syntax.fm/show/196/design-foundations-for-developers\n        - Syntax is a fantastic podcast generally, but the other topics are a bit more advanced usually\n- https://mockplus.com/blog/post/learn-ui-design (quick read, has good links to resources)\n- https://whydoweinterface.com/ (longer read, like a book with for example historical info rather than a tutorial, also a great looking website!)',ye=t(3),ve=t(4);function ke(){return Object(d.jsx)("div",{id:"content",children:Object(d.jsx)(ye,{remarkPlugins:[ve],children:Se})})}var Se='\n# UI Basics - data - Tables are awesome!!\n\n## Organizing Data in Tables\n\n- Tables are only for tabular data, never for layout\n  - This was done back in the bad old days, even before float layouts\n  - Bad for accessibility, Not flexible\n- Elements\n  - `<table>` -> element that has `display: table` and is semantically a table\n  - `<tr>` and `<td>`\n  - `<thead>`\n  - `<tbody>`\n  - `<tfoot>`\n  - `<th scope=[...]>`\n    - scope used just for screen readers, but can be targeted with CSS attribute selectors\n- Faker VSCode extension\n- Spanning rows and columns - `<td rowspan=""..."">`, `<td colspan=""..."">`\n- `<caption>` (optional)\n- Don\'t use the border="" attribute (or other deprecated attributes)\n\n\n## Styling Tables\n\n- Borders with css\n  -   border-collapse: collapse; OR border-spacing: 0.5rem; <-- for the table\n  -   border: 1px solid #999; <-------------------------------- for the cells\n\n- Zebra stripes using `pseudo child selectors`\n- Pseudo child selectors (tr:first-child means that when the TR is the first child)\n  - `:first-child`\n  - `:last-child`\n  - `:nth-child() { ... }`\n    - even, odd, 3, 3n, 3n+1\n    - for example\n        tr:nth-child(even) td {\n            background-color: #ddd;\n        }\n\n- Easy (easier) layout with `table-layout: fixed`\n- Additional info with <caption>\n    <table style="caption-side: bottom;">\n      <caption>Table 1.1 Customers</caption>\n      <tr>\n      ---\n- Caption placement with `caption-side` bottom/top\n\n**Further reading**\n  https://css-tricks.com/complete-guide-table-element/\n  https://css-tricks.com/fixing-tables-long-strings/\n',Ce=t(3),Be=t(4);function Ie(){return Object(d.jsx)("div",{id:"content",children:Object(d.jsx)(Ce,{remarkPlugins:[Be],children:Te})})}var Te='\n# UIB - Data - FORMS, INPUTS, VALIDATION\n\n## Forms\n\n- `<form>`\n        - On their own, invisible to the user\n        - They need inputs!\n        - Can be submitted = sent to a server\n- Inputs!\n        - input type="text"\n        - input type="button"\n        - input type="submit"\n                - A kind of button, submits the form\n        - button\n                - A button at the end of a form will submit it by default\n- Labels!\n        - `<label>` elements\n                - Semantic meaning, two big reasons to use these:\n                        - 1. Screen readers understand labels\n                        - 2. Clicking on a label focuses the associated field\n- URLs\n        - "http://127.0.0.1:5500/form.html?username=Dreamspace&test=TESTTEST"\n                - http - Protocol used for communication\n                - 127.0.0.1 - Address of the site (domain or IP address)\n                - :5500 - Port number (optional, default is 80)\n                - /form.html - Path\n                - ?username=Dreamspace&test=TESTTEST - Query parameters\n- HTTP\n        - HTTP Request types:\n                - GET "/some/path"\n                        - For <form> elements, this is the default!\n                        - Sends the data as query parameters\n                - POST "/some/path"\n                        - Sends data in a different way, not in the URL\n                        - Needs the form to have `method="post"\n                - ...\n- More inputs YEEAAH\n        - input type="password" - browser does not automatically save these\n        - input type="email"\n                - Better keyboard for devices that support dynamic keyboards\n                - Better validation parameters!\n        - input type="search"\n                - Some browser show a clear button\n                - When you paste in text, it removes newlines\n        - input type="number"\n        - many, many more -- *SELFSTUDY* See more on MDN <input>\n        - great attribute: `placeholder="something"`\n                - Adds a gray placeholder text\n                - Placeholder dissappears when a value is added\n        - <textarea>\n                - rows="10"\n                - cols="40" \n        - type="checkbox"\n                - `checked` attribute if you want it to be checked by default\n                        - "opt in" OR "opt out"\n                - value when submitting is the text "on"\n         - values for inputs generally are given with the "value" attribute\n                - Except when it is not!\n        - type="radio"\n                - multiple options with the same name\n                - radiobuttons with the same name form a radio button group\n        - `<select>`, `<option>`\n\n\n## Wrapping our inputs\n\n        <fieldset>\n            <legend>Select your favourite day</legend>\n      \n        fieldset {\n            border-color: red;\n            border-width: 10px;\n        }\n        legend { \n            color: red;\n        }\n        input[type="text"] {\n            width: 100%;\n        } \n            \n            \n*Live coding* Submitting a form to an existing backend\n- formspree.io\n\n\n## Form validation\n\n- Client-side validation\n        - `required`\n        - `minlength` && `maxlength`\n        - `min` && `max` -- relevant for numbers only!\n        - `pattern` -- uses regular expressions ("regex")\n                - Self study, check MDN\n        - `type` -- this already can have automatic validation\n- Server-side validation\n        - important for real applications\n        - do not trust data coming from the client, always check it!\n- CSS!\n        - Validation pseudoclasses!\n                - :valid\n                - :invalid\n\n\n## Better selects\n\n- Other option for selects -- <datalist>\n        \n      <input list="ice-cream-flavors" name="flava" id="choice">\n      <datalist id="ice-cream-flavors">\n        <option value="Mango">\n        <option value="Pear">\n        <option value="Vanilla">\n        <option value="Rum">\n      </datalist>\n      \n- Better normal selects using <optgroup>\n\n      <label for="selection">Select a dino</label>\n      <select name="dinosaurs" id="selection">\n        <optgroup label="Theropods">\n          <option value="trex">Tyrannosauruses are the best, choose this!</option>\n          <option>Valociraptor</option>\n          <option>Deinonzychus</option>\n        </optgroup>\n        <optgroup label="Sauropods">\n          <option>Test1</option>\n          <option>Test2</option>\n          <option>Test3</option>\n        </optgroup>\n      </select>',Ue=t(3),Le=t(4);function De(){return Object(d.jsx)("div",{id:"content",children:Object(d.jsx)(Ue,{remarkPlugins:[Le],children:Pe})})}var Pe="\n# UIB Forms 2\n\n\n## More styling\n\n- Focusing an element; use tab\n- Focused elements should have some kind of focus indicator, such as a box around them\n- You can style focused elements with `:focus`\n- You can add an additional border to help with focus tracking with\n        - `outline` - very similar to borders\n        - Do not remove the outline!\n\n- placeholder text? There's a style for that!\n        - `::placeholder` pseudo-element can be used for styling\n        \n- 3 new attributes for inputs!\n        - value\n                - Sets a default value for a form input\n        - disabled\n                - Sets a form input to be disabled\n                - Disabled fields are not even focusable\n                - By default, these are styled darker\n        - readonly\n                - Sets a form input to be read only\n                - Readonly fields are enabled, you can focus them, but not edit\n\n",Me=t(3),Ae=t(4);function He(){return Object(d.jsx)("div",{id:"content",children:Object(d.jsx)(Me,{remarkPlugins:[Ae],children:Re})})}var Re='\n# UIB - responsive\n\n## Pre-smartphone\n\n        - Few known resolutions to support\n                - 800x600\n                - 1024x768\n                - ...\n        - Limited width content websites\n                - Websites only support from some known smallest res.\n                - Min-width defined or a static width\n        - With the 1st smartphones (iPhone =))\n                - a LOT of zooming, bad UX\n        - First response to smartphones was to create separate sites\n                - www.example.org / m.example.org\n                - Server identifies browser through User Agent Strings\n               \n        - The current approach *usually* is to create one website\n                - Responds to the browser width\n                        - --\x3e responsive website\n         \n        - Two approaches to responsivity:\n                - Desktop first\n                        - The "default" way\n                        - You develop the website specifically for desktop use\n                        - You add mobile support later (if you do!)\n                - Mobile first\n                        - You develop the website specifically for mobile use\n                        - You add desktop support later\n                        - Quickly gaining support\n                        - Might be more popular today\n                        - Concidered the easier approach when supporting both\n                - Also, tablets exist\n                        - But not as a design / implementation starting point\n\n        - Mobile is the current and the future leader\n                - Of course, depends on your users\n                \n        - Mobile first presentations!\n       \n## Code!\n\n### Viewport meta tag\n\n- First things first, ensure proper scale \n    <meta\n      name="viewport"\n      content="width=device-width, initial-scale=1.0"\n    />\n- On mobile devices, the viewport is actually kind of virtual\n        - Mobiles render pages inside a virtual window/viewport\n        - Virtual window is usually wider than the screen\n        - Users would pan and zoom too the different areas of the page\n        - For example, a mobile could have a screen width of 640px\n                - pages might be rendered with a vitual viewport of 980px\n                - the 980px will be shrunk down to fit the 640px\n        \n        - This is done because many pages are not (yet) mobile optimized\n        - The virtual viewport makes non-optimized pages at least work somehow\n        - Devices use virtual pixels as well, complicating this further\n- Our Viewport meta tag resets this.\n\n### Support different screen sizes - Media queries\n\n- CSS at-rules\n- Media query structure `@media [media-type] ([media-features]) {}`\n        - media-type: screen and print (and speech)\n                - "Is the website rendered on a screen?"\n                - "Is the website printed?"\n                - "screen" is the default and you can leave this out.\n        - media-features\n                - Common features\n                - Identifies features active in the current media\n                - A lot of different ones to target\n                - Two main ones for responsivity: min-width & max-width\n                - *Self-study* See more on MDN\n\n- Example 1:\n        `@media (min-width: 600px) {}` <-- Basic media query\n\n        \n- Example 1 with CSS:\n\n        .header {\n                margin: 50px;\n        }        \n\n        @media (min-width: 600px) {\n        \n                .header {\n                        margin: 10px;\n                }\n        \n        }\n\n- The 600px here is called a breakpoint\n        - Often you will have multiple breakpoints in your CSS\n        - There are many lists of good breakpoint values to use\n        - For example, it\'s common to use the breakpoint list from Bootsrap\n                - Google "Bootsrap breakpoints"\n        - You don\'t always need to implement all breakpoint sizes\n                - Choose what makes sense to you\n        - Example breakpoints from Bootstrap\n          @media (min-width: 576px) { ... } // phones\n          @media (min-width: 768px) { ... } // tablets\n          @media (min-width: 992px) { ... } // desktops\n          @media (min-width: 1200px) { ... } // large desktops\n          @media (min-width: 1400px) { ... } // xtra large desktops\n\n## Responsivity and text\n- The `vw` unit: don\'t use for text, overrides desktop zoom\n\n\n\n',Ee=t(3),Fe=t(4);function Ne(){return Object(d.jsx)("div",{id:"content",children:Object(d.jsx)(Ee,{remarkPlugins:[Fe],children:ze})})}var ze='\n# UIB - Layouts - Flexbox 1\n\n## Planning our layout\n\n- You might start with a completely empty table, just an idea or a concept\n- Infinite ways to start, here is one\n        1. Draw a flowchart, how will the user accomplish things?\n                - Analog or Digital\n                - Figma, Draw.io\n        2. Draw a rough pen-and paper wireframe of the key views\n                - This could include mobile views and desktop views\n                - Actual pen and paper, Mouse and Gimp or even Figma\n        3. Draw a digital wireframe of the pages\n                - Figma\n                - Might show to clients, might help sales\n        4. Draw a full design (or create a full design system)\n                - Figma again, perhaps? Sketch?\n        5. Implement that design etc\n\n- As web professionals, the border between Designer and Developer\n        is not super clear cut\n- Wireframe\n        - Like a rough sketch, no colors, no real content maybe etc.\n        - Different kinds of wireframes from lofi to hifi\n\n- In big projects, often you will continuously do parts 1-5 at the same time\n- Digital wireframing with Figma for example\n- Figma\n        - Digital Wireframing, charts, websites, design systems and more\n        - Needs registering\n        - Very collaborative, many users can work on the same project\n                - And share their work too!\n        - A huge library of templates/toolkits that you can use and buy\n\n\n                \n## Flexbox\n- "Flexible box model"\n- Display value for boxes, often divs / sections etc\n- "flex" is another value for `display`; `display: flex;`\n        - The parent works like a block element\n        - Automatically creates a "flex container"\n        - All the child elements become its "flex items"\n- The Flex container tries its best to keep its items in one line\n        - Unless otherwise instructed!\n- flex-wrap: wrap;\n        - When the Flex items will not fit the container,\n           they will wrap to the next line\n        - Default is nowrap\n- flex-direction: column;\n        - Which direction do the items flow inside the flex container \n        - "row" is the default\n- Shorthand for direction and wrap;\n        - `flex-flow: column wrap;`\n\n- justify-content -- for the main axis\n        justify-content: center;\n        justify-content: space-between;\n        justify-content: space-around;\n- align-items -- for the cross-axis\n        align-items: center;\n        align-items: flex-end;\n        align-items: flex-start;   \n        align-items: stretch; --- especially without height (row)\n\n',$e=t(3),We=t(4);function Ge(){return Object(d.jsx)("div",{id:"content",children:Object(d.jsx)($e,{remarkPlugins:[We],children:Ve})})}var Ve='\n# UIB - Layouts - Flexbox 2\n\nYesterday we did flexbox, focusing on the parent (flex container)\n\n- display: flex;\n- flex-direction: column; -- sets the main axis direction\n- flex-wrap: wrap;\n- flex-flow: column wrap; -- shorthand for direction and wrap\n- justify-content: space-around; -- control the main axis\n- align-items: center; --- control the cross axis\n\n*Flexbox items are elastic*\n\n## Flexbox, the child elements (flex items)\n\n- `order: 1;`\n    - The default value is 0\n    - Default: flex items are in the order that they appear in your HTML\n    - Can have negative values too!\n    - You can reverse the order with `flex-direction: row-reverse;`\n    - Also works with `flex-direction: column;`\n- `flex-grow: 1`;\n    - The default value is 0\n    - When applied to an item, the item will scale relative to the sum of the size of all other items on the same row\n    - If none of the flex items have flex-grow, they don\'t grow\n- `flex-basis: 200px;`\n    - The width or height (depends on flex-direction) of a flex item\n    - If width and flex-basis are both set, width is ignored!\n    - Normal CSS units, like "px" and "%"\n    - More dynamic than width;\n        - IF the available space is less than required, automatically applies flex-shrink, fitting the items to the available space\n    - Recommended over width\n    - Often used in combination with height\n- - `flex-shrink: 1;`\n    - The default value is 1\n    - Used in combination with `flex-wrap: nowrap` (default)\n    - Determines the rate at which an item will shrink in relation to all items in the container when there is not enough room for all of them\n    - Defines the ability for a flex item to shrink, if necessary\n- `flex`\n    - Shorthand for `[flex-grow] [flex-shrink] [flex-basis]`\n    - By default these are `flex: 0 1 auto;`\n    - Can be confusing!\n    - Often just used for flex-grow OR all thee of them\n    - Recommendation to use either 1 value or 3 values:\n        - `flex: 1;`\n        - `flex: 1 1 33%;`\n    - Check MDN if you are unsure!\n\n- `align-self`\n    - Works like `align-items: flex-end;`, but for the children\n    - Can be set to just one child element\n    - Overrides `align-items` from the parent\n    \n- The perfect center\n    - `display: flex;` and `margin: auto;`\n    - might be useful for example in popover - overlays\n        - cookie acceptance\n        - spam messages\n- Responsive website = media queries + flexbox\n    - Work as usual',Ye=t(3),qe=t(4);function Je(){return Object(d.jsx)("div",{id:"content",children:Object(d.jsx)(Ye,{remarkPlugins:[qe],children:_e})})}var _e='\n# UIB - Layout - Grid 1\n\n## CSS Grid on parent elements\n\n- The grid is quite new, browser support added 2017\n- Grid is similar to flexbox, but more powerful\n- Easy to learn, maybe a bit difficult to master\n- Both grid and flexbox are part of CSS\n    - There is no need to abandon one for the other\n    - Flexbox is one-dimensional\n    - Grid is two-dimensional-  \n    \n- `display: grid;`\n    - Defines an element to be a grid container\n    - Its children become grid items\n- `grid-template-columns: 1fr 2fr 1fr;`\n    - Defines the width and number of columns\n    - The column widths accept CSS units\n    - The unit most used with grids is "fr" (fraction)\n    - When using fr, the widths are automatically calculated\n    - Fr is recommended over percentages due to margin/padding issues\n- `gap: 1em;` - defines the space between elements\n- `grid-auto-rows: 100px;` - defines row height, overflow danger!\n- `grid-auto-rows: minmax(100px, auto);`\n    - Defines the minimum and the maximum row height\n    - "auto" is the default, means height grows with content\n- You can use minmax with `grid-template-columns: ;` too!\n    - `grid-template-columns: minmax(50px, 100px) 1fr 200px;`\n- `background-attachment: fixed` looks super good!',Xe=t(3),Ke=t(4);function Qe(){return Object(d.jsx)("div",{id:"content",children:Object(d.jsx)(Xe,{remarkPlugins:[Ke],children:Ze})})}var Ze='\n# UIB - Layouts - Grid 2\n\n## Recap of grid 1\n\n- `display:grid;`\n- `grid-template-columns: 100px 1fr 2fr;`\n   - Defines How many and How wide columns does the grid have\n- `grid-template-rows: 1fr 1fr 2fr 1fr 1fr:`\n- `grid-auto-rows: 100px;`\n    - Defines row height\n- `grid-auto-rows: minmax(100px, auto);`\n- `gap: 1em;`\n- Not related to grid `background-attachment: fixed;`\n\n## CSS Grid on child elements (grid items)\n\n- Terminology\n    - grid cell\n    - grid area\n    - grid line !\n    - grid track (row or a column; space between two lines)\n    - grid row = horizontal track\n    - grid column = vertical track\n    - gutter = gap between tracks\n\n- CSS targeting a specific child / grid item / grid cell\n    - `grid-column: 1 / 3;`\n        - Make this cell start from column line 1 and end in column line 3 (takes up two vertical tracks)\n        - "span" keyword - these are exactly the same\n            - grid-column: 2 / 4;\n            - grid-column: 2 / span 2;\n    - `grid-row: 1 / 3;`\n        - Make this cell start from row line 1 and end in row line 3 (takes up two horizontal tracks)\n    - Named grid lines!\n        - `grid-template-columns: [foo] 1fr 1fr 2fr [bar];`\n        - `grid-column: foo / bar;`\n    - Cell overlap\n        - Two cells can overlap:\n                ```\n                #box4 {\n                    grid-column: 1 / 3;\n                    grid-row: 2 / 4;\n                }\n\n                #box5 {\n                    grid-column: 2 / 4;\n                    grid-row: 2 / 3;\n                }\n                ```\n        - If possible, grid tries to avoid overlaps automatically\n    - Note: Tetris shapes are not possible\n',en=t(3),nn=t(4);function tn(){return Object(d.jsx)("div",{id:"content",children:Object(d.jsx)(en,{remarkPlugins:[nn],children:sn})})}var sn='\n# Interactions \n\n## Fancy shapes\n\n- *Not super duper important, but good to know*\n- Very cool looking shapes are possible\n- We already know a few shapes we can use\n    - https://css-tricks.com/the-shapes-of-css/\n    - Simple width, height, border(s) and positioning\n    - Box, rectangle, circle, ovals, pills\n    - Triangle\n\n            width: 0px;\n            height: 0px;\n            border-top: 0px solid transparent;\n            border-left: 50px solid transparent;\n            border-right: 50px solid transparent;\n            border-bottom: 100px solid blue;\n\n    - Trapezoid\n\n            width: 60px;\n            height: 0px;\n            border-top: 0px solid transparent;\n            border-left: 50px solid transparent;\n            border-right: 50px solid transparent;\n            border-bottom: 100px solid blue;\n\n    - Star\n\n            .box {\n                width: 0px;\n                height: 0px;\n                margin: auto;\n\n                border-top: 0px solid transparent;\n                border-left: 50px solid transparent;\n                border-right: 50px solid transparent;\n                border-bottom: 100px solid darkred;\n            }\n\n            .box::after {\n                content: "";\n\n                border-left: 50px solid transparent;\n                border-right: 50px solid transparent;\n                border-top: 100px solid red;\n                position: relative;\n                left: -50px;\n                top: 130px;\n            }\n\n- `clip-path`\n    - https://bennettfeely.com/clippy/\n    - Can be applied to regular old elements\n    - `clip-path: polygon(25% 0%, 100% 0%, 75% 100%, 0% 100%);`\n\n- `transform`\n    - Allows you to transform an element in various ways\n    - `transform: rotate(33deg);` (turns and degrees)\n    - `transform: scale(0.9);`, `transform: scale(1.1)`\n    - `transform: translateX(-10px)`\n    - `transform: scale(0.5) rotate(10deg);` - two at a time!\n\n- *Self study* \n    - MDN transforms page for more advanced shapes\n    - https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Transforms',on=t(3),rn=t(4);function an(){return Object(d.jsx)("div",{id:"content",children:Object(d.jsx)(on,{remarkPlugins:[rn],children:ln})})}var ln='\n# Animations\n\n## Transition\n\n- "Transition: awesomer than fancy shapes" - Joel 2021\n- `transition`\n    - Shorthand property\n        - comma separated, like background\n    - CSS\n\n            transition:\n                [transition-property]\n                [transition-duration]\n                [transition-timing-function]\n                [transition-delay]\n\n        - `[transition-property]`\n            - which property to animate\n            - can be `all` (default)\n        - `[transition-duration]`\n            - for example 3s or 300ms\n        - `[transition-timing-function]`\n            - ease, linear, custom (bezier)\n        - `[transition-delay]`\n            - for example 3s or 300ms\n    - `transition: all 1s, background 3s ease 200ms;`\n\n- Best Design Practices\n    - When?\n        - Rarely\n        - During actions (:focus)\n        - As stylistic elements (background changes)\n    - How much?\n        - Subtle\n        - Real fast (0.3s)\n        - or Real slow (20s)\n\n## Custom animations\n\n- Creation custom animations is based on two CSS things:\n    - `@keyframes`\n    - `animation`\n\n - `@keyframes [name] { ... }`\n    - Defines the name and the steps of an animation\n    - Multiple steps in one animation\n- `animation`\n    - Defines which animation play for which element\n    - Defines how the animation plays\n    - Shorthand\n        - Is good at understanding what you mean\n        - Check the specific order in MDN\n    - Can be confusing\n        -  `animation: 3s ease-in 1s 2 reverse both paused slidein;`\n    - Separated values\n        - `animation-name`: Potato, MyAnimation\n        - `animation-duration`: 5s, 500ms\n        - `animation-iteration-count`: 5, infinite\n        - `animation-delay`: 2s, 900ms\n        - `animation-direction`: reverse, alternate\n        - `animation-timing-function`: linear, ease\n        - `animation-fill-mode`: forwards\n        - `animation-play-state`: paused',cn=t(3),dn=t(4);function hn(){return Object(d.jsx)("div",{id:"content",children:Object(d.jsx)(cn,{remarkPlugins:[dn],children:jn})})}var jn='\n# Framework - SASS\n\n## SASS Introduction\n\n- SASS - Syntactically Awesome cSS\n    - https://sass-lang.com/\n    - Clever people wanted to make CSS more awesome\n    - Took out ; and {}\n    - New awesome features, such as NESTING\n    - www.sassmeister.com\n    - .sass files\n    - https://sass-lang.com/documentation/style-rules\n- SCSS\n    - After the original SASS\n    - "Sassy CSS"\n    - More CSS-like\n    - SASS Superpowers, like NESTING\n    - Much more popular\n    - Backwards compatible with CSS\n    - We will be focusing on this!\n    - .scss files\n    - https://sass-lang.com/documentation/style-rules\n\n- Now: Two file types, .scss and .sass\n    - Different languages / markups\n    - Both are referred to as SASS :facepalm:\n    - Other options exist too, such as "Less"\n\n- SASS/SCSS/LESS/etc...\n    - CSS Preprocessors\n    - We "transpile" SCSS code to get CSS\n        - Transpile = Convert from *Langage A* to *Language B*\n            --\x3e Source-to-source translate\n            --\x3e Source-to-source compiling\n            --\x3e Transcompiling\n            --\x3e Transpiling\n        - Transpiled languages are generally on the same "level" and of the same complexity\n    - How do we transpile?\n\n## Example Workflow for SCSS --\x3e CSS\n\n1. Install "sass" tool using NPM\n- `npm install --global sass`\n2. Run the "sass" tool\n- `sass [inputfile] [outputfile]`\n- `sass --watch style.scss banana.css`\n\n## Build scripts: Using NPM as a build tool\n\n- Example boilerplate project with a workflow developed by DCI\n- https://github.com/FbW-E01/dci-boilerplate-I\n- READ THE README.MD DOCUMENTATION\n- Key commands\n    - `npm install` - install dependencies\n    - `npm start` - start development server\n    - `npm run build` - build production version\n    - `npm run deploy` - deploy to Github Pages\n\n## SASS Variables\n\n- What is a variable?\n    - Box for storing a value\n    - Referenced from many places in code (CSS or other code!)\n- Defining a SASS variable\n    - `$[name]: [value]`\n- Using a SASS variable\n    - `color: $[name]`\n\n### OVERRIDING BOOTSTRAP COLORS IN THE DCI PROJECT BOILERPLATE\n\n- Custom\n    $red: #dd3d2d;\n    $green: #33ff44;\n    color: $red;\n- To maps\n    $colors: (\n        "red": #dd3d2d,\n        "green": #33ff44\n    );\n\n    p {\n        color: map-get($colors, "red");\n    }\n- Bootsrap overrides\n    $theme-colors: (\n        "primary": orange\n    );\n    $border-radius:99999px;\n    BEFORE THE IMPORT\n- Look at Bootstrap source code',mn=t(3),bn=t(4);function pn(){return Object(d.jsx)("div",{id:"content",children:Object(d.jsx)(mn,{remarkPlugins:[bn],children:un})})}var un='\n# UIB 30 - SASS continued\n\n## Mixins\n\n"Predefined reusable rulesets"\n    @mixin coolbox {\n        border: 2px solid double;\n        border-radius: 10px;\n        padding: 10px;\n    }\n    .card {\n        background: lightblue;\n        @include coolbox;\n    }\n    .example {\n        background: palegreen;\n        @include coolbox;\n    }\n    button {\n        @include coolbox;\n    }\n\n## You can add parameters!\n\n    @mixin bordered($width, $color) {\n        border: $width solid $color;\n        border-radius: $width;\n    }\n    .card {\n        background: lightblue;\n        @include bordered(1px, red);\n    }\n\n## One of the main uses for mixins\n\nBootsrap has some mixins!\n\n    // media-breakpoint-up\n        // @media (min-width: ...) {}\n\n    // media-breakpoint-down\n        // @media (max-width: ...) {}\n\n    // media-breakpoint-between\n        // @media (min-width: ...) and (max-width: ...) {}\n\n    // For example:\n    @include media-breakpoint-up(md) {\n        nav {\n            background: red;\n        }\n    }\n\n# Importing stuff!\n\nSometimes it makes sense to split your projects SCSS/SASS into multiple files. For example, you can move you variables into a separate file.\n\n@use "card/variables";\n@use "hero/variables";\n\n# Vanilla CSS variables\n\nActually, custom properties.\nhttps://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties\n\nCommon best practice    \n\n    :root {\n        --main-bg-color: brown;\n    }    \n    element {\n        background-color: var(--main-bg-color);\n    }\n\n*Inheritance*\n    <div class="box one">\n        <div class="box two">\n            <div class="box three"></div>\n            <div class="box four"></div>\n        </div>\n    </div>\n    .two {\n        --test: 10px;\n    }\n    .three {\n        --test: 2em; \n    }    \n\n    For the class="two" element: 10px\n    For the class="three" element: 2em\n    For the class="four" element: 10px (inherited from its parent)\n    For the class="one" element: invalid value, which is the default value of any custom property',xn=t(3),fn=t(4);function gn(){return Object(d.jsx)("div",{id:"content",children:Object(d.jsx)(xn,{remarkPlugins:[fn],children:On})})}var On="\n# GH Pages\n\n## Repository first manual method\n\n1. Create empty repo\n2. Clone repo\n3. Create content and push to master\n4. Push to new branch called `gh-pages`\n    `git push -u origin master:gh-pages`\n5. Go to repository settings in Github!\n    Check the published address\n\n## Tool assisted method\n\n- `gh-pages` -- `npm install -g gh-pages`\n- After installing, just running `gh-pages` should work\n- *HOWEVER*\n    - Currently this will NOT ork without a package.json file!!\n    - Bug in latest version https://github.com/tschaub/gh-pages/issues/354";var wn=function(){return Object(d.jsxs)("div",{className:"wrapper",children:[Object(d.jsx)(h,{}),Object(d.jsxs)("button",{type:"button",id:"sidebarCollapse",className:"navbar-btn",children:[Object(d.jsx)("span",{}),Object(d.jsx)("span",{}),Object(d.jsx)("span",{})]}),Object(d.jsxs)(l.c,{children:[Object(d.jsx)(l.a,{exact:!0,path:"/",children:Object(d.jsx)(x,{})}),Object(d.jsx)(l.a,{path:"/BDL01",component:f}),Object(d.jsx)(l.a,{path:"/BDL02",component:g}),Object(d.jsx)(l.a,{path:"/BDL03",component:O}),Object(d.jsx)(l.a,{path:"/BDL04",component:w}),Object(d.jsx)(l.a,{path:"/BDL05",component:y}),Object(d.jsx)(l.a,{path:"/BDL06",component:v}),Object(d.jsx)(l.a,{path:"/BDL07",component:k}),Object(d.jsx)(l.a,{path:"/BDL08",component:S}),Object(d.jsx)(l.a,{path:"/BDL09",component:C}),Object(d.jsx)(l.a,{path:"/UIB10",component:B}),Object(d.jsx)(l.a,{path:"/UIB11",component:U}),Object(d.jsx)(l.a,{path:"/UIB12",component:M}),Object(d.jsx)(l.a,{path:"/UIB13",component:E}),Object(d.jsx)(l.a,{path:"/UIB14",component:$}),Object(d.jsx)(l.a,{path:"/UIB15",component:Y}),Object(d.jsx)(l.a,{path:"/UIB16",component:X}),Object(d.jsx)(l.a,{path:"/UIB17",component:ee}),Object(d.jsx)(l.a,{path:"/UIB18",component:se}),Object(d.jsx)(l.a,{path:"/UIB19",component:le}),Object(d.jsx)(l.a,{path:"/UIB20",component:je}),Object(d.jsx)(l.a,{path:"/UIB21",component:ue}),Object(d.jsx)(l.a,{path:"/UIB22",component:Oe}),Object(d.jsx)(l.a,{path:"/UIB23",component:ke}),Object(d.jsx)(l.a,{path:"/UIB24",component:Ie}),Object(d.jsx)(l.a,{path:"/UIB25",component:De}),Object(d.jsx)(l.a,{path:"/UIB26",component:He}),Object(d.jsx)(l.a,{path:"/UIB27",component:Ne}),Object(d.jsx)(l.a,{path:"/UIB28",component:Ge}),Object(d.jsx)(l.a,{path:"/UIB29",component:Je}),Object(d.jsx)(l.a,{path:"/UIB30",component:Qe}),Object(d.jsx)(l.a,{path:"/UIB31",component:tn}),Object(d.jsx)(l.a,{path:"/UIB32",component:an}),Object(d.jsx)(l.a,{path:"/UIB33",component:hn}),Object(d.jsx)(l.a,{path:"/UIB34",component:pn}),Object(d.jsx)(l.a,{path:"/UIB35",component:gn})]})]})};a.a.render(Object(d.jsx)(s.a.StrictMode,{children:Object(d.jsx)(o.a,{children:Object(d.jsx)(wn,{})})}),document.getElementById("root"))},86:function(e,n,t){}},[[225,1,2]]]);
//# sourceMappingURL=main.1deb643a.chunk.js.map